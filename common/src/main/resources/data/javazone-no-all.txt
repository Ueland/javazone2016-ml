Mange av Accentures ansatte har den siste tiden arbeidet med å sertifisere seg som Java Programmer og Enterprise Architect. Denne presentasjonen vil summere opp erfaringer fra dette arbeidet og vurdere nytteverdien av disse sertifiseringene.
Mange av Accentures ansatte har den siste tiden arbeidet med å sertifisere seg som Java Programmer og Enterprise Architect. Denne presentasjonen vil summere opp erfaringer fra dette arbeidet og vurdere nytteverdien av disse sertifiseringene: Hvilke forberedelser har kandidatene gjort Hvilke verktøy har kandidatene brukt, og hva er erfaringene med disse Hvordan har prosessen med sertifiseringene vært Hvilken nytte har man fått av prosessen utover selve sertifiseringen Hvor mye forteller sertifiseringen om kompetansen til kandidatene
Foredragsholder innen: Sertifisering Hjemmeside: http://www.accenture.no Håvard Bjåstad har vært ansatt i Accenture siden 1994. Han har primært arbeidet som teknisk arkitekt innenfor bank og finans med hovedfokus på integrasjonsprosjekter med Java og J2EE. Han har arbeidet ved Accentures teknologisenter i Palo Alto og leder Accentures Java Center of Excellence.

Sesjonen vil gi en innføring i filosofi og tankesett rundt Aspektorientert Programmering, en diskusjon rundt implementeringsstrategier for AOP i Java, samt endel eksempler på hvordan komme igang med AOP og eksempler på fornuftig bruk av AOP.
Agenda: What is AOP? How does it work? Examples What's in it for me? Further reading
Hjemmeside: http://www.dreambean.com Rickard Öberg er en internasjonalt anerkjent Java-ekspert som har spesialisert seg på avanserte mellomvarearkitekturer og en av de ledende autoriteter på EJB og J2EE. Han har skrevet boken "Mastering RMI", en avansert bok på utvikling av RMI-løsninger i Java og EJB. Rickard er en av de som har vært med å utvikle EJB spesifikasjonen fra SUN til det den er i dag. Han er også en av utviklerne på "core teamet" bak jBoss Application Server, applikasjonsserverenes svar på Linux. I tillegg jobber han på diverse OpenSource prosjekter, og har vunnet ikke mindre enn åtte konkuranser på Java applikasjons utvikling og J2EE servere. Rickard har vært foredragsholder på mange av de store Java konferansene og drar alltid mengder av tilhørere gjennom sin måte å fremføre stoffet på og hans ytterst tunge fagkunnskap. Rickard har også tidligere gjestet JavaBin flere ganger tidligere med foredrag om JMX, Porlets og AOP. Med sitt siste foredrag i AOP klarte han å vekke til live en het debatt som pågikk i flere uker etterpå. Han vil i år besøke JavaZone for å snakke om AOP for avanserte.

Modelldrevet utvikling med open source-verktøy.
Denne presentasjonen viser en modelldrevet tilnærming for effektiv og enkel utvikling av J2EE-applikasjoner. UML brukes for å beskrive komponenter og grensesnitt. Ulike kodegenereringsverktøy brukes for å generere session- og entity-komponenter fra modellene. Et eksempel blir brukt for å vise hvordan J2EE-løsninger kan automatiseres basert på modelleringsverktøy og kodegenerering. Eksempelet viser bruk av UML for modellering, et open source verktøy (UMT - UML Model Transformation Tool) for generering fra UML-modell til Java/XDoclet og ant build scripts, og hvordan dette blir tatt videre til J2EE/JBoss ved bruk av XDoclet. Hovedfokus vil ligge på bruk av UML og kodegenerering i modelldevet utvikling. Andre tilnærminger til automatisering/kodegenerering av systemutviklingen vil også bli belyst.
Foredragsholder innen: MDA Jon Oldevik er forsker ved SiNTEF Tele og data, avdeling for Distribuerte Informasjonssystemer i Oslo. Han har lang erfaring med programvarearkitektur, systemutviklingsmetoder, produktfamilier, modellering, kodegenerering og implementasjon av distribuerte og komponentbaserte systemer. Utvikling og bruk av verktøy for modelldrevet utvikling har vært et spesielt fokusområde.

Middlegen er et kodegenereringsverktøy basert på JDBC, Velocity, Ant og XDoclet. Det er et Open Source prosjekt startet i Norge.
Middlegen er et kodegenereringsverktøy basert på JDBC, Velocity, Ant og XDoclet. Det er et Open Source prosjekt startet i Norge. Verktøyet bygger en modell ut fra database ved hjelp av JDBC meta-data. Diverse plugins benytter modellen sammen med Velocity templates til generering av kode. Det eksisterer foreløpig plugins for EJB CMP 2.0 (+ Struts), Hibernate og JDO. XDoclet benyttes til å ferdigstille koden med interfaces, deployment descriptors etc. Alt kjøres og pakkes med Ant script, slik at prosessen blir mest mulig automatisk. Sesjonen vil fokusere på generering av komplett database applikasjon, med Entity Beans (CMP 2.0), XDoclet value-objects, Session Bean Facade til JBoss applikasjonsserver. Muligens med live demonstrasjon. Den ferdige applikasjonen kan aksesseres av forskjellige klienter, som for eksempel Webapp/Struts eller J2SE Swing klient. Sesjonen kommer også til å ta for seg hvilke andre plugins som eksisterer, og hvordan man enkelt kan skrive egne custom plugins. Man vil også si noe om hvordan neste versjon av Middlegen kommer til å bli og trekke paralleller mot andre kodegenereringsverktøy. Prosjektside
Foredragsholder innen: MiddleGen, XDoclet Hjemmeside: http://boss.bekk.no/boss/middlegen/ Eivind Waaler Eivind Waaler jobber som senior konsulent i BEKK. Han har mange års erfaring med utvikling og arkitektur av J2EE løsninger. Eivind er tilhenger av Open Source software, og har det siste året vært aktiv utvikler på Middlegen prosjektet. Han har stor kompetanse på Open Source produkter og benytter disse i stor grad på sine prosjekter og løsninger. Eivind har tidligere holdt foredrag om XDoclet og Middlegen på JavaBin.

Dette foredraget vil se nærmere på Hibernate og hvordan det kan brukes sammen med J2EE.
Dette foredraget vil se nærmere på Hibernate og hvordan det kan brukes sammen med J2EE. Foredraget vil bygge på erfaringer fra et prosjekt hvor Hibernate blir brukt og det vil dekke bl.a. følgende ting: Hvordan virker rammeverket? Verktøystøtte Transaksjonshåndtering Hvordan hentes data fra databasen? Cache-mekanismer Queryspråket til Hibernate Design-strategier: Top-down vs bottom-up Hibernate i en J2EE-setting Andre alternativer til Hibernate Andre erfaringer, gode og dårlige Hvis det blir tid vil det også bli kodeeksempler for å vise hvordan en del av disse tingene virker i praksis.
Foredragsholder innen: Hibernate, OR-rammeverk Hjemmeside: http://www.objectware.no Bjørn Vidar Bøe har en MSc Software Engineering og en BSc Informatics. Han jobber som konsulent hos Objectware og driver hovedsakelig med utvikling på Java-plattform.

Hvordan Java-teknologier som JAAS og JACC kan brukes for å løse problemer knyttet til ende-til-ende autentisering og autorisasjon, og hvordan nye standarder for "digital identitet" (SAML, XACML, Liberty) kan kombineres med Java-teknologier for å lage løst koblede web-føderasjoner.
En av utfordringene med å lage løsninger som integrerer informasjon og tjenester fra mange forskjellige fagsystemer er autentisering og avgrensning av sluttbrukerens rettigheter i de ulike systemene. Som oftest har de ulike systemene egne sikkerhetsløsninger og opererer med ulike brukerbegreper. Sikkerhetsløsningen må dermed også omfatte hvordan identitet konsolideres og transformeres når informasjon og tjenester fra ulike systemer integreres. Dette gjelder både ved tette integrasjoner som når løsninger integreres gjennom en J2EE applikasjonstjener, og ved løse integrasjoner, som når løsninger integreres gjennom web føderasjoner eller web services. Vi skal se på hvordan Java-teknologier som JAAS og JACC kan brukes for å løse problemer knyttet til ende-til-ende autentisering og autorisasjon, og hvilken rolle disse teknologiene spiller i Javas sikkerhetsmodell. Vi skal også se på nye standarder innenfor det feltet vi kaller "digital identitet", og hvordan disse standardene kan kombineres med Java-teknologier for å lage løst koblede web-føderasjoner. Aktuelle standarder er SAML, XACML og Liberty. Vi skal videre se på hvordan støtte for autentisering med digitale sertifikat, for eksempel BankID, kan implementeres inn i det utvidbare JAAS-rammeverket.
Foredragsholder innen: Sikkerhet Hjemmeside: http://www.kantega.no Gunnar Nordseth er teknologisjef i Kantega AS (www.kantega.no). Han har utdannelse innenfor fysikk og matematikk fra NTNU (tidligere NTH). I Kantega har han ansvar for å lede satsningen på løsninger og tjenester for digital identitet, og har blant annet vært involvert i prosjektet for utvikling av SpareBank 1s pilotløsning for BankID. Hans interessefelt omfatter informasjonssikkerhet, objektmetodikk og utviklingsprosess.

Foredraget tar for seg hvilke forskjeller og likheter det er i funksjonalitet plattformene tilbyr, såvel som det evinnelige spørsmålet: Hvilken plattform er best?
I de siste 5 årene har Java vært den raskest voksende utviklingsplattformen i verden. Nå slår Microsoft tilbake. .NET er Microsofts visjon av en plattform for det nye årtusen. Begge miljøene har forkjempere som står på barrikadene og har sine sterke meninger. Dette foredraget tar for seg hvilke forskjeller og likheter det er i funksjonalitet plattformene tilbyr, såvel som det evinnelige spørsmålet: Hvilken plattform er best? Foredraget sammenliger hvilke løsninger plattformene tilbyr til utviklere av en n-lags enterprisemodell, mobile applikasjoner, og desktop-applikasjoner. Brodwall vil sammenligne sin erfaring på Java og .NET prosjekter når det gjelder integrasjon, sikkerhet og portabilitet, såvel som ikke-tekniske faktorer som opplæring, kostnad og filosofi.
Foredragsholder innen: Java vs .NET Hjemmeside: http://www.systek.no/ Johannes Brodwall har jobbet i flere år som konsulent innen Java og J2EE. Før Java jobbet han med COM og Window 32. Det siste halv året har han vært teknisk prosjektleder og arkitekt for et nyutviklingsprosjekt i .NET. Johannes kjenner begge plattformene godt, og synes de har sine individuelle styrker og svakheter. Han jobber (nesten) like gjerne med begge to.

Et system utviklet for Statens Vegvesen hvor PDA'er benyttes for informasjonsutveksling.
Java på små "duppedingser" er ensbetydende med spill og moro for folk flest. For bedrifter kan J2ME også bety "nytteverdi", "besparinger", "fleksibilitet" og "suksess". Presentasjonen omhandler et system utviklet for Statens Vegvesen hvor PDA'er benyttes for informasjonsutveksling. Temaer som vil bli gjennomgått er valg av plattform (PersonalJava vs PersonalProfile), distribuert oppdatering av persistent informasjon ved hjelp av XML og et open-source rammeverk for brukergrensesnitt (Thinlet).
Foredragsholder innen: J2ME Hjemmeside: http://www.objectnet.no Helge Gundersen jobber som konsulent i Objectnet hvor han engasjeres i utviklingen av forretningskritiske systemer basert på Java-teknologi. Helge er utdannet sivilingeniør med fordypning innen mobilkommunikasjon og åpne distribuerte systemer.
Henning Kvalheim jobber som konsulent i Objectnet. Objectnet er et uavhengig konsulentselskap som bistår kunder i valg og utvikling av fremtidsrettede løsninger. Objectnet representerer faglig tyngde og spiss­kompetanse innen objekt­orientert systemutvikling, både på prosess- og teknikksiden. Objectnet har lang prosjekterfaring og er en leverandør av objektorienterte, åpne, distribuerte systemer i en flerlagsarkitektur.
Hjemmeside: http://www.objectnet.no Rune Melhus er født i 1973 og er utdannet ved Ingeniørhøgskolen i Trondheim. Han har jobbet med objektorienterte systemer siden 1997 og arbeidserfaringen omfatter 4 år med utvikling i C++ hos SuperOffice samt to år med utvikling i Java hos Objectnet. Hos sistnevnte har han jobbet mest med nummerportering og distribuerte systemer.

Foredraget tar for seg poenggiving i Bowling og er inspirert av Robert C. Martin's eksempel fra "Agile Software Development"
Foredraget tar for seg poenggiving i Bowling og er inspirert av Robert C. Martin's eksempel fra "Agile Software Development" og vil gå gjennom følgende: Introduksjon om test-drevet utvikling og bowling. Praktisk demonstrasjon med test, utvikling og refactoring av løsningen. Det vil bli implementert Spear, men ikke Strike (for de som er bowlingeksperter!). Typisk blir det 4-8 runder med test-code, og 2-3 runder med refactoring. Q&A
utvikler/arkitekt ( BBS ) Johannes Brodwall har mange års fartstid som konsulent innen utviking på Java-plattformen, og jobber nå på BBS som utvikler/arkitekt med framtidens regningsbetalingssystemer. Han har hold foredrag på begge de tidligere JavaZone (J2ME, Java versus .NET). Han har studert eXtremeProgramming i lengre tid, og brukt mange av teknikkene i prosjekter de siste par årene. Johannes er også medlem av styret for interesseorganisasjonen extremeprogramming.no. Han bruker test-drevet utvikling i sitt daglige arbeid, og har også vist teknikken på foredrag før.
( Favourite Systems ) Trond Pedersen is a consultant for Favourite Systems. Lately, he has been working with mobile devices, including mobile phones and on-truck computers for the petroleum industry. He is a co-founder and active member of extremeprogramming.no.

De fleste større selskaper har både J2EE- og .NET-baserte løsninger. Både Java og .NET har sine sterke sider - hvordan kan du utnytte disse for å levere bedre løsninger for brukerne?
Vi vil vise forskjellige måter å gjøre dette på, samt synliggjøre noen av grunnene til at dette kan være interessant for deg!
Enterprise Architect ( Microsoft ) Enterprise Architect med hovedfokus på Financial Services. Har jobbet som arkitekt og fagsjef på integrasjon 7 år i Storebrand.
Enterprise Architect ( Microsoft ) Rune Zakariassen: Enterprise Architect med hovedfokus på Oil & Gas. Har jobbet som integrasjonsarkitekt 6 år i Accenture.

Hibernate has de siste årene blitt en av de mest populære persitensmekanismene tilgjengelig. Foredraget tar for seg en rask innføring i selve rammeverket, samt gjennomgang av forskjellige verktøy for utvikling og hvordan disse virker sammen.
Hibernate, en liten oversikt. Trekke inn noe ORM og sammenligne med JDO/EJB2.0. Utvikling med Hibernate. Vise med eksempel hvordan man kan bruke XDoclet til å få generert XML mapping filer (top-down). Vise hvordan man kan bruke MiddleGen til å generere mappingfiler fra eksiserenede database for så å kjøre hbm2java verktøy for å generere klasser (bottom-up). Hibernate i bruk. Trekke frem kjente problemer, som sesjonshåndtering, exception handling osv. Vise forskjellige måter å deploye/bruke hibernate: 1. Som SAR fil i JBoss, hvor app server styrer transaksjoner osv.. 2. Med Spring rammeverk for å styre sesjoner, exceptions, transaksjoner osv. Ytelse og tuning. Snakke om typiske ytelsesproblemer, hvordan effektivisere spørringer osv. Eventuelt trekke inn andre tips og tricks. Avsluttning med fremtidsutsikter. Snakke litt om EJB3.0 spec, samt JDO2.0. Trekke frem Hibernate sin rolle i disse, og se på sannsynligheten for at Hibernate kommer til å bli kompatibelt med disse.  
Senior konsulent ( BEKK ) Eivind Waaler jobber som senior konsulent i BEKK. Han har mange års erfaring med utvikling og arkitektur av J2EE løsninger. Eivind er tilhenger av Open Source software, og har det siste året vært aktiv utvikler på Middlegen prosjektet. Han har stor kompetanse på Open Source produkter og benytter disse i stor grad på sine prosjekter og løsninger. Eivind har tidligere holdt foredrag om XDoclet og Middlegen på JavaBin.

Begrepet Multi-Paradigm Design er stjålet fra James Coplien som har skrevet bok om temaet relatert til C++. I Java har vi mange programmeringsparadigmer tilgjengelig. I tillegg til Objekt-orientert programmering, kan vi benytte Meta-programmering, Generisk programmering (JDK 1.5) og Aspekt-orientert programmering (f.eks. vha AspectJ).
Begrepet Multi-Paradigm Design er stjålet fra James Coplien som har skrevet bok om temaet relatert til C++. I Java har vi mange programmeringsparadigmer tilgjengelig. I tillegg til Objekt-orientert programmering, kan vi benytte Meta-programmering, Generisk programmering (JDK 1.5) og Aspekt-orientert programmering (f.eks. vha AspectJ). Spørsmålet er hvordan kombinere disse paradigmene på best mulig måte. Coplien tar utgangspunkt i en såkalt "Commonality and Variability Analysis" for å finne objektive kriterier for når de forskjellige paradigmene passer best. Vi foreslår å passe en slik analyse inn i en iterativ prosess der Solution Design gradvis forbedres gjennom å anvende metoden. Vi vil presenterer et lite (men realistisk) case study som tar utgangspunkt i et use-case, hvor man til slutt ender opp med å benytte alle 4 paradigmene.
Chief consultant ( Kantega ) Chief consultant in Kantega. 13 years of experience in the software industry, 4 years of experience with J2EE as a developer and architect. Special interests include programming languages, design patterns and frameworks.

Erfaringer fra arbeidet med Metro 2, Telenor Networks sin mellomvareplattform. (The presentation will be held in Norwegian.)
"Metro" tilhørende Telenor Networks, er en mellomvareplattform brukt til systemintegrasjon og applikasjonslogikk tilhørende de fleste større applikasjoner innunder kundefront, kundeservice, feilhåndtering, alarmer, leveranse og tjenesteaktivering innenfor Telenors fastnettvirksomhet. Vi har i løpet av de siste par årene vært gjennom et stort migreringsløp hvor løsninger er blitt flyttet fra gammel plattform/arkitektur over på ny plattform/arkitektur basert på WebSphere 5.x, MQ 5.3 og tilhørende verktøy, arkitekturmålbilder og -retningslinjer. Foredraget vil presentere erfaringer fra denne migreringen, med problemer vi møtte og hvordan de har blitt løst. (The presentation will be held in Norwegian.)
( Telenor ) Kristian har arbeidet 4,5 år i Accenture, og siden et par år i Telenor Networks, og er arkitektur-/teknisk ansvarlig for Metro2-plattformen.
( Accenture ) Otto har arbeidet i Accenture siden 1998 innenfor fagområdene teknologi og arkitektur, med fokus på Java.

Mesan AS har lang erfaring med utvikling av store transaksjonssystemer i det norske markedet. Denne presentasjonen viser hvordan Mesan har videreført denne kompetansen til effektiv utvikling av Java-applikasjoner med Swing brukergrensesnitt og J2EE transaksjonshåndtering.
Mesan AS har lang erfaring med utvikling av store transaksjonssystemer i det norske markedet. Denne presentasjonen viser hvordan Mesan har videreført denne kompetansen til effektiv utvikling av Java-applikasjoner med Swing brukergrensesnitt og J2EE transaksjonshåndtering. Følgende emner vil bli berørt: Hvilke egenskaper ved teknologi, arkitektur og utviklingsmiljø trenger vi for å kunne utvikle effektivt? God arkitektur for en SWING-basert enterpriseapplikasjon GUI-håndtering SCOPE HMVC Transaksjonshåndtering - J2EE Hvordan sikre kodekvalitet, effektivitet og vedlikeholdbarhet Priaktisk demonstrasjon - vi bygger en komplett Swing/J2EE-applikasjon Live!
Sjefskonsulent ( Mesan AS ) Foredragsholderen Carl-Olav Løvald, er Sjefskonsulent i Mesan AS. Han er en ledende kapasitet på MDA, og har blant annet vært brukt som foredragsholder på Universitetet I Oslo, Eurpean Conference on Object Oriented Programming (ECOOP) 2004 og som bidragsyter til ulike teknologianalyser.

Rune, Rune og Ru... Gunnar presenterer teknologi og erfaringer fra håndholdte Java-løsninger.
Objectnet AS og Unified Consulting utvikler to av Norges største virksomhetskritiske løsninger for håndholdte terminaler. Disse er Forvaltsys for Statens Vvegvesen og MT for NSB. Prosjektene har gitt oss mye kunnskap om hva som finnes av teknologier, muligheter og problemer. Ved å presentere MT-prosjektet ønsker vi å dele denne kunnskapen med andre utviklere. Stikkord for foredraget er modulær oppbygging, J2ME, J2EE, design patterns, kommunikasjon mellom eksterne og interne enheter, valg av teknologi og ytelse. Vi vil fortelle om våre valg og løsninger og gi dere et inn blikk i hva som fungerer, hva som ikke gjør det og hvor vi mener utfordringene ved håndholdte løsninger ligger. Foredraget vil hovedsakelig passe for utviklere og arkitekter med noe erfaring i utvikling av systemer for håndholdte terminaler. Foredraget vil også være interessant for beslutningstagere som ønsker å vite hvilke muligheter som finnes med håndholdte løsninger i dag.
Konsulent ( Objectnet as ) Rune Melhus jobbet med applikasjonsutvikling siden 1997 og har de siste årene fokusert på arkitektur og utvikling av forretningskritiske applikasjoner for håndholdte terminaler.
Systemutvikler ( Objectnet as ) Gunnar Velle er systemutvikler i Objectnet as, og har det siste året jobbet mest med løsninger på håndholdte terminaler. Gunnar har en sønn som heter Jonas og de to er kjempekompiser.
( Unified Consulting ) Rune Storløpa har jobbet med utvikling av større distribuerte systemer siden 2001 med fokus på transaksjonshåndtering. Det siste året har han jobbet med håndholdte terminaler og deres plass i større systemer.

Teknologien endrer seg .. Sun N1 Grid: Managing n computers as 1 ..... Dette er ikke bare om teknologi, men en hybrid av teknologi og automatiserte prosesser og rutiner. Dette er ikke “bare” ett Sun initiativ, men noe hele industrien arbeider med. Ett paradigmeskift i hvordan vi forvalter IT arkitektur, prosesser, rutiner, tjenester osv er i ferd med å skje.
Teknologien endrer seg .. Sun N1 Grid: Managing n computers as 1 ..... Dette er ikke bare om teknologi, men en hybrid av teknologi og automatiserte prosesser og rutiner. Dette er ikke “bare” ett Sun initiativ, men noe hele industrien arbeider med. Ett paradigmeskift i hvordan vi forvalter IT arkitektur, prosesser, rutiner, tjenester osv er i ferd med å skje.
Senior Architect - Sun technology group Norway ( Sun Microsystems AS ) ● Jobber for Sun Microsystems i Oslo ● Sun Professional Services / Solution Technology Group ● Primære arbeidsoppgaver .. ● N1 spesialist ● Teknisk arkitektur design ansvarlig ● Teknisk faglig bakgrunn. Ansvarsområder; ● Automatisering ● N1 SPS / Jumpstart (Jet) / Live Upgrade / ++ ● System administrasjon
( Sun Microsystems ) ● Sun Professional Services / Solution Technology Group ● Primære arbeidsoppgaver .. ● Strategisk rådgivning innen datasenter driftsprosesser ● Rådgivning innen Service Management prosessorientering ● Business consulting; ofte i form av .. ● Total Cost of Operations analyser ● Return Of Investments analyser ● Overordnet teknisk arkitektur design .. ● Teknisk faglig bakgrunn, men har gradvis blitt prosess- og metode orientert

Agile utviklingsteknikker som test-drevet utvikling, kontinuerlig integrasjon, daglige stand-up møter og ukentlige iterasjoner skaper en rytme i prosjektet som er veldig behagelig og effektiv å jobbe i, både for utviklere og prosjektet som helhet. Foredraget vil fokusere på disse teknikkene og for bedre enn andre, mye anvendte teknikker i programvareutvikling, og ikke minst gi tips og råd om hvordan man gjennomfoerer teknikkene i praksis og hva man kan gjoere for å ta dem i bruk.
Agile utviklingsteknikker som test-drevet utvikling, kontinuerlig integrasjon, daglige stand-up møter og ukentlige iterasjoner skaper en rytme i prosjektet som er veldig behagelig og effektiv å jobbe i, både for utviklere og prosjektet som helhet. Foredraget vil fokusere på disse teknikkene og for bedre enn andre, mye anvendte teknikker i programvareutvikling, og ikke minst gi tips og råd om hvordan man gjennomfoerer teknikkene i praksis og hva man kan gjoere for å ta dem i bruk. Agile teknikker som foredraget vil ta for seg er blant annet: Test-drevet utvikling Parprogrammering Kontinuerlig integrasjon Automatiske akseptansetester Stand-up møter Ukentlige iterasjoner Blant teknikkene som diskuteres og ikke anbefales å gjoere finner vi: ukentlige statusmøter manuelle byggeprosesser lange/ingen iterasjoner manuell akseptansetesting på slutten av prosjektet up-front detaljert design
( ThoughtWorks ) Nils Christian er sivilingeniør fra NTNU med seks års erfaring med programvareutvikling som utvikler og arkitekt. Han har tidligere holdt foredrag om Java og Agile programvareutvikling for DND, javaBin og Universitetet i Oslo. Nils Christian jobber for tiden for ThoughtWorks, Inc. i London med systemintegrasjon og utvikling av store, distribuerte, objektorienterte applikasjoner.

Ved Universitetets Senter for Informasjonsteknologi (USIT) i Oslo har man det siste året gjennomført to prosjekter med bruk av emnekart. Det ene systemet brukes til å registrere IT tjenester og maskinressurser i et emnekart, og det andre for å legge inn metainformasjon om blant annet fagområder og tema for artikler i forskningsmagasinet Apollon. Presentasjonen er først og fremst beregnet på de som har vært igjennom en introduksjon til emnekart og vil vite mer om hva det kan brukes til i Java applikasjoner.
Ved Universitetets Senter for Informasjonsteknologi (USIT) i Oslo har man det siste året gjennomført to prosjekter med bruk av emnekart. Det ene systemet brukes til å registrere IT tjenester og maskinressurser i et emnekart, og det andre for å legge inn metainformasjon om blant annet fagområder og tema for artikler i forskningsmagasinet Apollon. Presentasjonen er først og fremst beregnet på de som har vært igjennom en introduksjon til emnekart og vil vite mer om hva det kan brukes til i Java applikasjoner.

Presentasjonen vil gi en innføring i Emnekart (Topic Maps) og hvordan man utvikler smart programvare med denne standarden.
Presentasjonen vil gi en innføring i Emnekart (Topic Maps) og hvordan man utvikler smart programvare med denne standarden. Emnekart er en relativt ny ISO-standard for formell beskrivelse av kunnskap. Datamodellen er svært godt egnet i applikasjoner hvor datamodellen er dynamisk og gjerne kompleks. I tillegg kan dataene være distribuerte og automatisk flettes ved behov. Presentasjonen vil legge spesiell vekt på at man i motsetning til i relasjonsdatabaser og XML ikke behøver å gjøre skjemaendringer og endringer i applikasjonen dersom nye typer data introduseres. Muligheten for å utvikle generisk programvare vil også bli diskutert. Fokuset til presentasjonen vil først være en introduksjon til emnekart-modellen, deretter på hvordan man bruker denne modellen til å modellere domene-informasjon, og til slutt hvordan man utvikler programvare rundt emnekart.
( Ontopia ) Geir Ove Grønmo var med på å grunnlegge det norske emnekart-selskapet Ontopia AS i 2000. Han er utdannet ingeniør fra Høyskolen i Gjøvik og har jobbet med systemutvikling siden 1995. Geir Ove har lang erfaring med håndtering av strukturerte informasjonsmengder og utvikling av dokumenthåndteringssystemer og publiseringsløsninger. I tillegg har han inngående kunnskap om og erfaring med programmering, databaser og internetteknologi. Han skrev verdens første emnekart­motor (tmproc) i Python som åpen kildekode i 1999 og har vært hovedarkitekten bak Ontopias emnekartmotor i Java.

Dette foredraget vil se på redesign av et tjenestegrensesnitt brukt i en portalløsning for å lettere kunne møte nye ikke-funksjonelle krav samt å forenkle utvikling av ny forretningslogikk. Verktøy som blir tatt i bruk er bl.a. dynamiske proxyer, aop og dependency injection ved hjelp av Spring. Resultatet blir en løsning hvor egenskaper som caching, logging og EJB-teknologi blir kapslet inn slik at man til daglig ikke trenger å forholde seg til dette. Foredraget vil være praktisk anlagt med både kodeeksempler og muligens også live kode. I tillegg vil det også bli brukt litt tid på å se på fordeler og ulemper ved et slikt design, samt å se på hvilke nye muligheter dette designet gir. Dette foredraget er basert på mine erfaringer fra et større forretningskritisk prosjekt hvor dette designet nå er i produksjon.
Vis designet til grensesnittet som skal refaktoreres (5 min) Gå gjennom fordeler og ulemper med dette designet (5 min) Mål for ny løsning (5 min) Kort introduksjon til verktøy for jobben og hvorfor de ble valgt (15 min) Dynamic proxies Spring, både som aop-rammeverk og lettvekts-container Vis skisse til nytt design og hvordan dette løser målene skissert tidligere (5 min) Strategi for hvordan man kan gå fram for å gjøre en slik refactoring (5 min) Fordeler og ulemper med ny løsning (5 min) Vis kode på ny løsning (5 min) Forventet forhåndskunnskap: Det vil være en fordel med noe kunskap om dynamiske proxyer, spring og aop.
Seniorkonsulent ( Objectware ) Bjørn Vidar Bøe har en MSc Software Engineering og en BSc Informatics. Han jobber som konsulent hos Objectware og driver hovedsakelig med utvikling på Java-plattform.

Det finnes en rekke rammeverk for utvikling av brukergrensesnitt som baserer seg på XML. Deklarativ GUI-utvikling gir mange fordeler i en del av systemutviklingen som tradisjonelt er veldig tidkrevende. Rutinemessig arbeid minimaliseres og kodebasen reduseres. Hierarkisk definering av GUI komponenter i XML-filer gir også god oversikt og er lesbart for vanlige mennesker.
Objectnet har benyttet rammeverkene SwiX^ml og Thinlet i tre av sine utviklingsprosjekter. Hensikten med denne presentasjonen er å gi en introduksjon til XML-drevet GUI utvikling og Objectnets erfaring med disse rammeverkene. SwiX^ml (http://swixml.org <http://swixml.org/>) er et open-source (ala Apache) Java bibliotek med intensjon om å forenkle implementasjon av Swing brukergrensesnitt. Rammeverket leser XML-definisjonen under kjøretid og bygger opp et brukergrensesnitt på basis av innholdet i definisjonen. De fleste standard Swing komponenter støttes. Det er i tillegg mulig å utvide rammeverket med nye komponenter. SwiX^ml er tett integrert med Swing-biblioteket og bygger på eksisterende Swing kompetanse. Dette gjør overgangen fra tradisjonell Swing-programmering til XML-drevet GUI enkel. Thinlet (http://thinlet.com <http://thinlet.com/>) er en annen open-source (LGPL) løsning for XML-drevet GUI. Denne er laget med et eget proprietært komponentsett. Hovedvekten er lagt i å gjøre GUI-motoren lettvekt. Dermed kan den benyttes selv på små plattformer ned til Personal Java. Thinlet har alle de komponenter som vi er vant med og utseendet er enkelt og moderne. Til slutt vil vi avslutte med en funksjonssammenligning mellom de to grensesnittsverktøyene og sette dette opp mot XUL.
( Objectnet ) Thor Åge Eldby er konsulent på andre året ved Objectnet AS. Han har 10 års erfaring innen systemutvikling og har jobbet i Telenor Mobil, FairPlay International og LCC Europe. For seks år siden startet han å jobbe med Java som hovedspråk. Mesteparten av utviklingen har det gått på store applikasjonsservermiljø, men i det siste har utvikling av GUI og web-GUI kommet i fokus. Andre ting som Thor Åge finner interessant for tiden er dynamiske språk, J2ME og Spring.
( Objectnet ) Andreas Bade har over fem års erfaring i systemutvikling. Det siste halvannet året i Objectnet AS. Han har jobbet med programmering av både webløsinger og desktop-applikasjoner. Hovedfokus er Java-utvikling, men har også besøkt .NET-leiren. Han har tidligere jobbet i Accenture i litt over fire år. Hovedinteresser er Spring, J2EE, desktop-GUI og Hibernate.

Når man gjør integrasjoner mot ulike baksystem vil man oppleve at ulike konvertering teknikker må benyttes for å mappe mellom proprietære eller strengbasserte resultater til en intern DO representasjon. Dette medfører at man bør ha bygge inn muligheten for å konfigurere denne mappingen for å enkelt kunne bygge utvidelser og endre konfigurasjonen.
Da vi i mitt nåværende prosjekt skulle bestemme oss på hvordan mappe mellom CICS record, offset string basert resultat, falt valget på å benytte Hibernate Configurasjon siden vi allerede skulle benytte Hibernate. For å få gjort dette måtte det gjøres noen utvidelser til Hibernate for å få den nødvendige ekstra funksjonaliteten. Dette førte til at vi kunne konfigurere mappingen mellom DO's og Cics Records (CopyBooks) i samme format som for vår database. Videre for å konfigurere hvilken configurasjon for hvilket kall i CICS benyttet vi Spring Framework. Duration: 45-50 Min Required experience: Kjent med Hibernate og Spring Expected audience: Personer som jobber med integrasjonsarktiektur (J2EE Arkitekter). Hibernate utviklere
( Accenture ) 5 years work experience in Accenture 3 years as J2EE Architect Intresser: - Integrasjonsarkitektur - Utviklingsarkitektur - Distribuerte Multimedia Systemer - Linux Bachelor in Computer Sience Soon to recieve MSc in Computer Sience

Etterhvert som bedrifter tar i bruk flere og flere web-løsninger internt øker brukernes krav om å slippe å oppgi brukernavn og passord for hver applikasjon. Microsoft har lagd en utvidelse av HTTP autentisering for IE og IIS som tillater brukere som er logget på en Windows-maskin på et Active Directory (AD) domene å autentisere seg mot websider uten å oppgi brukernavn og passord. Autentiseringen foregår ved at brukerens AD-sesjon sendes til webserveren og autentiseres mot AD-serveren. Dette foredraget viser hvordan man kan benytte dette i en Javaløsning uten å benytte IIS eller Windows på serversiden.
Foredraget er praktisk rettet og går igjennom den nødvendige java-koden for å implementere denne typen av single sign-on. Det blir en kort overordnet beskrivelse av Single sign-on generelt og NTLM-protokollen, samt jCIFS-biblioteket som ble benyttet for å implementere dette. Foredraget er basert på erfaringer gjort på en webapplikasjon i WebSphere som kjørte på Windows, HP-UX og IBM stormaskin. Brukerne av dette systemet er logget på sin Windows arbeidsstasjon og trenger ikke å oppgi brukernavn og passord for å logge seg på webapplikasjonen etter at denne løsningen ble implementert. Det vil også bli en kort gjennomgang av hvordan dette kan benyttes på andre applikasjonstjenere som WebLogic og JBoss. Outline 0. Why single sing-on? Different ways of doing single sing-on 1. Background: Java Authentication and Authorization Service (JAAS) 2. Microsoft's NTLM authentication protocoll 3. Implementing single sign-on with NTLM using an open source library (jCIFS) 4. Making WebSphere trust our NTLM-implementation 5. Other application servers (BEA and jBoss) Required experience Man bør kjenne til J2EE.
Konsulent ( Accenture ) Holger har vært konsulent i Accenture i 7 år og er med i Accentures "Global Architecture and Core technologies"-gruppe som fokuserer på teknisk arkitektur og grunnteknologier. Han har de siste 5 årene jobbet på J2EE prosjekter og har en spesiell interesse for sikkerhet i webløsninger. Han er IBM Subject Matter Expert og jobber for tiden som leder for arkitekturgruppen i et større J2EE prosjekt som benytter Hibernate og Spring på WebSphere og DB2 på z/OS.

Multi-Paradigm Design handler om systematisk å kombinere flere paradigmer for design av software. I Java kan vi benytte objekt-orientering, meta-programmering, generisk programmering og aspekt-orientert programmering. Refaktorisering bør utføres for å unngå duplisering av kode. I mange tilfeller finner man duplisert kode som håndterer ”cross-cutting concerns”, dvs. funksjonalitet som går på tvers av klasser og metoder. Foredraget viser hvordan forskjellige paradigmer kan avvendes for å refaktorisere ”cross-cutting code”. Det vil være spesielt fokus på likheter og forskjeller mellom AspectJ Advice, Dynamic Proxy og objekt-orienterte design patterns, og hvordan velge blant disse. Prinsippene illustreres gjennom et case-study som tar utgangspunkt i en J2EE applikasjon basert på EJB og Struts som refaktoriseres ved å kombinere forskjellige paradigmer. Foredraget viderefører prinsippene fra fjorårets foredrag på JavaZone (Multi-Paradigm Design in Java), med fordypning på problemstillinger rundt refaktorisering av ”cross-cutting code”.
Outline 1) Introduksjon (2.5 min.) - Oversikt over paradigmer i Java (OOP, Meta-progr, Generics, AOP) - Om å kombinere paradigmer 2) Refaktorisering (25 min.) - Felles kode på tvers av klasser og metoder (cross-cutting code) - Om behovet for refaktorisering - Språk-støtte i Java - AspectJ advice - Dynamic Proxy - OO design patterns 3) Case study (25 min.) - Refaktorisering av J2EE applikasjon basert på EJB og Struts ved å kombinere forskjellige paradigmer - Oppsummering (2.5 min.)
Chief consultant ( Kantega ) Chief consultant in Kantega. 13 years of experience in the software industry, 4 years of experience with J2EE as a developer and architect. Special interests include programming languages, design patterns and frameworks.

Hvordan bygge komplekse moderne virksomhetskritiske systemer med fokus på total livssyklus Når 1. versjon av applikasjonen er implementert skal den være bygd for å håndtere endringer. Dette kan være endringer knyttet til f.eks: - Ny funksjonalitet - Ny teknologi - Ny teknologisk plattform, f.eks. applikasjonsservere/databaserplattform - Antall brukere av applikasjonen - Brukermønster til applikasjonen, flere og evt. nye kanaler - Nye systemer som skal integreres mot applikasjonen
Stikkord: Hvilke virkemidler bør og må settes i prosess i forkant og underveis i selve for å sikre høy effektivitet både i utviklingen og videreutviklingen/ forvaltningen av systemet i hele systemets levetid. Hvordan sikre kvalitet før leveranse/implementering av systemer: - Ha fokus på J2EE applikasjonens ”Life Cycle” - Java Automation- automatisert J2EE utvikling - Prosesser som gir mulighet for å systematisere og automatisere test Hvordan bygge systemer for å håndtere endringer knyttet til videreutvikling gjennom: - Bruk av hensiktsmessige, riktig og strukturerte patterns - Testing i hele utviklingsprosessen med ulike virkemidler og på alle nivåer - Kvalitetsikring underveis i utviklingen. (4) Level: Intermediate (5) Forventet publikum: Arkitekter, utviklere, metode- og prosessansvarlige
( Mesan ) Lars Reed er sjefskonsulent i Mesan AS. I roller som teknisk prosjektleder og arkitekt, har han gjennom årene bistått bedrifter med spisskompetanse på standarder, kvalitetskontroll og krav til struktur. Gjennom langvarige konsulentoppdrag, har han måttet ta sin egen medisin hva livssyklus og vedlikehold av store systemer angår.

Prosjekterfaringer: - EA/SOA: Granularitet, governance, KPI'er, BPEL etc. - Common Information Model (Shared Object Model/Domenemodell) med tilhørende transformasjoner - EA/SOA sett fra både IT avdelingen og forretningssiden - Kanskje litt om JSR207, JSR208 og andre viktige spesifikasjoner
( Accenture ) Leif Arne er senior teknisk arkitekt i Accenture med 15 års erfaring fra bl.a. EA, SOA, EAI, J2EE og teknisk arkitektur. Han er også leder for Accenture's nordiske teknologi-satsning med spesialområde innen EA.
Arkitekt ( Accenture ) Tonny er teknisk arkitekt i Accenture med 7 års erfaring og har jobbet som konsulent for store norske, nordiske og europeiske kunder innen bank/finans, telekommunikasjon og det offentlige. Fokusområder er Java/J2EE, SOA, Integrasjon, BEA og OpenSource. Holdt presentasjon på JavaZone 2004 om prosjekt erfaringer med BEA 8.1 Platform.

Elektroniske billettsystemer er et satsningsområde for å øke antall kollektivreisende, oppnå mer kostnadseffektive salgsløsninger og økt kundetilfredshet. Slike systemer er under planlegging, konstruksjon eller i drift i mesteparten av landet. Foredraget presenterer erfaringer høstet i Oslo-samarbeidet, som er et samarbeid mellom operatørene NSB, Oslo Sporveier og Stor-Oslo lokaltrafikk.
Partene i Oslo-samarbeidet søker å oppnå interoperabilitet mellom sine respektive billettsystemer. Med interoperabilitet menes det at de ferdige systemene opptrer som ett og samme koordinerte system for de kollektivreisende. I tillegg konstrueres det et felles system for å håndtere noen oppgaver som interoperabilitet krever. Utvikling av ny software og tildels ny hardware utføres av fem forskjellige leverandører i fire forskjellige land, på oppdrag fra tre operatører. Samordningssystemet samt standardene rundt selve de elektroniske billettene skal, sammen eller hver for seg, kunne ta inn over seg flere operatører i samarbeidet, eller løftes helt ut av denne sammenhengen og over til andre operatører som ønsker å benytte dette. Foredraget vil ha en del med noe bakgrunnsinformasjon om e-billettering. Dessuten vil foredraget berøre hvordan koordinering mellom de tre/åtte partene håndteres. Avslutningsvis presenteres den implementerte løsningen.
Systemkonsulent / teknisk arkitekt fra Unified Consulting ( Unified Consulting ) Lars Lundby er systemkonsulent / teknisk arkitekt fra Unified Consulting. Han er Cand.Scient fra Informatikk på Blindern, med flere års erfaring fra J2EE/Java-basert systemutvikling. Han leder et av delprosjektene som tar for seg integrasjon av e-billetteringen i NSBs salgssystemer.

Viktige beslutninger tas ofte på bakgrunn av magefølelse. Slik er det også innen systemutvikling, der de fleste prosjektplaner er basert på eksperters magefølelse av arbeidsomfanget.
Våre forskningsresultater viser at: 1) Ekspertestimater er bedre enn sitt rykte og trolig minst like bra som estimeringsmodeller. 2) Ekspertene vet ikke hvordan overgangen fra "å forstå hva som skal gjøres" til "å estimere hvor mye arbeid som kreves" (the magic step) skjer. 3) Ekspertestimater er lette å påvirke (f eks gjennom å legge til irrelevant "ankerinformasjon") Presentasjonen tar for seg disse og andre resultater fra vår forskning på området, samt gir råd om hvordan man med enkle midler kan bli bedre til å estimere. Presentasjonen vil være interaktiv, med innlagt øvelser og konkurranser.
( Simula Research Laboratory ) Magne Jørgensen received the Diplom Ingeneur degree in Wirtschaftswissenschaften from the University of Karlsruhe, Germany, in 1988 and the Dr. Scient. degree in Informatics from the University of Oslo, Norway in 1994. He has 10 years’ industry experience as a software developer, project leader and manager. He is now Professor in Software Engineering at the University of Oslo and a member of the software engineering research group of Simula Research Laboratory in Oslo, Norway. He has published many articles in international journals on software cost estimation. He has supported work on the improvement of software project estimation and has been responsible for estimation training in several software companies.
( Simula Research Laboratory ) Stein Grimstad received the MSc degree in Informatics from the University of Oslo, Norway in 1998. He has 7 years’ industry experience as software developer and solution architect. He is now a PhD-student in Software Engineering at the University of Oslo, and is a member of the software engineering research group of Simula Research Laboratory in Oslo, Norway. He also works part-time as an advisor at Objectnet. His research interests are software engineering and, in particular, software cost estimation.

En visuell reise gjennom historien til COS, Telenor Mobils mellomvaresystem, gjennom 8 år og en gjennomgang av hvordan transisjonen til lettvektsmetodikker faktisk har gått.
COS er et system som til enhver tid har hatt over 30 utviklere. Hva fungerer? Hva fungerer ikke? Hvilke begrensninger har man? Hva er effekten av teknikker på kort, mellomlang og lang sikt? Hvordan introdusere teknikker? Hvordan bygge kultur? Hvordan få aksept i organisasjonen for radikale endringer? Deltagerne vil gå gjennom en visuell historisk reise med bilder, samt tall og grafer fra verktøyet XRadar. COS-miljøet i Telenor Mobil jobber med et av Norges største Java-systemer. De siste årene har miljøet blitt stadig smidigere i sin prosjektgjennomføring - med bruk av lettvektsmetoden Scrum og innføring av smidige teknikker - mange kjent fra ekstrem programmering (XP). Underveis har man endret rutiner, fjernet prosessteg, innført og utviklet nye verktøy, deltatt i forskning på teknikker, jobbet med rekruttering, miljøbygging - og samtidig målt produktivitet, intern og ekstern kvalitet i løsningen.
Kristoffer Kvam jobber i Telenor Norge som funkjonell arkitekt og teamleder i CRM Forretningslogikk. Selv om tittelen kankje ikke antyder det, er Kristoffer fast fokusert på å holde fingrene skitne - minst 50% av tiden brukes til utvikling. Fokuset har vært variert innen applikasjonsplanlegging og -utvikling, men som konsulent og senere som fastansatt i Telenor har hovedfokus hele tiden vært på mellomvareløsninger på Javaplattform. Kristoffer er utvikleren og arkitekten bak XRadar.
Seniorinnvikler ( Objectnet as ) Styremedlem i javaBin fra 2004, var portalgruppeleder og redaktør for java.no det første året. Har jobbet på Java/J2EE-prosjekter siden 1999, først i Accenture og så i Objectnet. Spesiell interesse for metode og verktøy med preferanse for "smidige" metoder og verktøy som hjelper en å fokusere på det man faktisk skal gjøre, uten å ta fra en kontroll og fleksibilitet. Setter stor pris på fellesskapet både faglig og sosialt i javaBin!

Enhetstesting er nå etablert som en naturlig del av de fleste prosjekter. For webapplikasjoner er det i tillegg nødvendig å teste selve brukergrensesnittet, vanligvis gjennomført manuelt med de ulempene dette medfører med hensyn til tidsforbruk og kostnad. Automatiserte webtester øker kvaliteten i prosjektene ved at testene kjøres kontinuerlig som en del av utvilkingsprosessen, og muliggjør dessuten regresjonstesting. Canoo WebTest lar deg gjøre nettopp dette og enda mer...
Outline : Introduksjon : 10 minutter - Hvorfor automatiserte webtester? - Kvalitet - Kost/nytte - Dokumentasjon - Hvorfor Canoo WebTest? - Sammenligning med andre verktøy Canoo WebTest : 15 minutter - Kort presentasjon av Canoo WebTest - Open Source Java prosjekt - Plattform uavhengig - Spille inn tester med Click-O-Mat - Feilretting og regresjonstesting - Skal jeg virkelig bruke det? - Automatisk HTML validering - Utvidelser til Canoo WebTest Demonstrasjon : 10 minutter - Demonstrasjon - Automatiserte Webtester med ant Praktiske erfaringer : 15 minutter - Bruk av Canoo i forbindelse med ytelsestesting - Hvordan unngå skjøre tester - "pragmatisk" GUI-testing - Overvåking av svarstider Spørsmål og Svar : 10 minutter
Seniorkonsulent ( BEKK Consulting ) Per Mengshoel jobber som seniorkonsulent i BEKK Consulting og har jobbet med Java og J2EE utvikling siden 1998. Han har erfaring som systemutvikler, arkitekt og mentor fra mange forskjellige prosjekter og leder for tiden faggruppen Systemutvikling i BEKK.

Når du skal utvikle store systemer som skal håndtere høy trafikk, må du være forsiktig med å følge J2EE "etter boka". Kanskje det til og med kan bli riktig galt. En del J2EE-mekanismer er rene feller. Hva gjør du når CMP cachen har "overraskende" lav treffrate, eller når du måler at altfor mye av tiden går med til transaksjonshåntering i applikasjonsserveren. Distribuerte transaksjoner med XA har flere sideeffekter som man ikke tenker på før man opplever dem som overraskende "killere" på ytelse og robusthet. XA på tvers av persistente køer, integrasjon mot databaser på flere plattformer og kall mot CICS på stormaskin, åpner for interessante problemer i utviklings- og testmiljøet. Hvilke hensyn må du ta når du clustrer applikasjonen over flere noder? Hvilke cache teknikker fungerer best? Hvordan skalerer du et stort J2EE system? Hvis du har problem med ditt profileringsverktøy, har vi et tips til en nødløsning som ikke påvirker ytelsen i systemet. IIOP burde sikre at to produkter kunne snakke sammen, men så enkelt er det ikke. For å fikse en av dagens svakheter, må du faktisk endre Sun's runtime. Det å "flytte" en applikasjon fra stormaskin til J2EE/Unix må da gi billigere drift, eller...
I dette foredraget vil du få presentert flere tips om hvordan få store J2EE systemer til å spille godt. Dette er basert på erfaringer fra flere store J2EE-prosjekter med opptil 80 programmerere og 150 prosjektdeltagere. Noen tips vil være grunnleggende, ting du må vurdere i arkitekturdesignen, mens andre er muligheter til å gjøre forbedringer senere i prosessen, for eksempel under volumtester.
( Accenture ) Henrik Lund-Hanssen, som leder Accentures nordiske gruppe av arkitekter innen J2EE og .NET. Han har 18 års erfaring med objektorientert utvikling og virksomhetskritiske systemer, og har ofte hatt rolle som arkitekt i slike prosjekter. Henrik gjør også kvalitetsgjennomganger og støtter arkitektene på prosjekter.
( Accenture ) Trond Isaksen, en av Accentures nordiske integrasjonsarkitekter. Han har 7 års erfaring med utvikling av integrasjonsløsninger og større J2EE-systemer. Trond jobber vanligvis som arkitekt i prosjekter, men han brukes også som en "Red Adair" - en som kommer inn og hurtig løser de virkelig vanskelige problemene.

Derby introduksjon - hva Derby er: open source apache prosjekt, 100% Java, small footprint etc - historikk fra Cloudscape via IBM & Informix, til Apache Derby - har aktiv støtte fra IBM og Sun (begge har dediker personell på Derby) Derby features - Standarder (JDBC, SQL) - Platformer (J2EM, J2SE) - Java stored procedures - Embedded vs. client-server - sikkerhet (krypterte data, autentisering etc). Derby ytelse - litt om Derby ytelse Derby arkitektur: - Litt om hvordan Derby er bygd opp - Kompilering (SQL kompilert til byte kode og java klasseobjekter) Derby framtid: - Hva vi i Sun DBTG i Trondheim ser for oss kommer til å skje med Derby - Ut av incubator status (og hva det innebærer) - Standard DB for Apache Geronimo - Økt funksjonalitet og robusthet
( Sun Microsystems ) Bernt M. Johnsen jobber som senioringeniør for Sun Microsystems i Trondheim hvor han er teknologisk ansvarlig for arbeidet med Derby. Ble ansatt i Clustra i 2000 som ble kjøpt opp av Sun i 2002 hvor han har vært arkitekt for distribuert SQL-eksekvering, ledet implementasjon av JDBC driver og arkitekt for distribuert administrasjon av HADB (tidl. Clustra). Han har tidligere arbeidet med ekspertsystemer, kompilatorer, internett-protokoller og var arkitekt for noen av de første nettbankene i Norge.

I en verden som endres raskt har tradisjonell systemutvikling vist seg å komme til kort – systemet er kort og godt utdatert før det kommer i produksjon. Prosessen tar ikke tilstrekkelig hensyn til læringseffekten i prosjektet og tar for lite hensyn til endrede behov grunnet manglende involvering og tilbakemelding. Iterativ systemutvikling tar hensyn til denne læringseffekten og sikrer at løsningen som leveres er mer i tråd med de krav som gir verdi på leveransetidspunktet. Prosessen sikrer således raskere ”time-to-market” og økt fokus på forretningsmessig verdi. Foredraget fokuserer på hvilke styringsparametre som benyttes i iterativ systemutvikling, og hvordan disse konkret sikrer en verdidrevet prosjektgjennomføring.
Outline Kort om iterativ og inkrementell systemutvikling (5 min) Hvorfor iterativ og inkrementell systmeutvikling bidrar til bedre kvalitet (10 min) Hvilke styringsparametre som sikrer verdidrevet systemutvikling (10 min) Hvordan disse parametre brukes til løpende og målrettet planlegging og kontroll av verdiskapingen i prosjektet (15 min) Konkrete erfaringer - do’s and dont’s (10 min) Spørsmål og svar (10 min) Required experience Erfaring fra ledelse av eller deltakelse i systemutviklingsprosjekter Expected audience Ledere med ansvar for utviklingsprosjekter, program- og prosjektledere og erfarne systemutviklere
Prosjektdirektør ( BEKK Consulting ) Reidar Sande er Prosjektdirektør i BEKK Consulting med ansvar for selskapets prosjektledergruppe. Han har 12-års erfaring med prosjektledelse knyttet til utvikling av komplekse løsninger, de siste fem årene med fokus på J2EE. Han har det overordnede ansvaret for selskapets fokusering på smidige metoder.

De siste årene er bruk av Object-Relational Mapping-verktøy som Hibernate, TopLink og JDO blitt stadig mer populært. Dette er blitt enda mer aktuelt med Java Persistens API som er kommet som en del av EJB3.0, samtidig som at det er et felt som lett blir undervurdert. I dette foredraget vil man få lære hvilken innvirkning ORM-teknologi har på arkitekturen og få se mer av hva som skjer i bakgrunnen når man benytter ORM for persistens og hvilken innflytelse dette kan ha på ytelsen. Jeg vil først ta utgangspunkt i de fundamentale forskjellene mellom Java- og database-teknologi, både fra et teknisk og organisatorisk perspektiv for å se hvilke utfordringer man står ovenfor. Jeg vil deretter se kort på forskjellige metoder for å implementere persistens, både for å vise hva dette valget gjør med arkitekturen og spesielt hvordan valg av ORM skiller seg fra andre teknikker. Deretter vil jeg se nærmere på hvilken innflytelse forskjellige implementasjoner av arv, lesing av objekter med lazy-loading og caching har på ytelsen. I tillegg vil jeg også bruke en del tid på n+1-queries problemet og forskjellige måter å håndtere dette på da dette illustrerer mange av de utfordringene man møter ved bruk av ORM-teknologi Foredraget vil ikke basere seg på et spesifikt ORM-produkt men fokusere på hva som skjer i kulissene og hva slags SQL som faktisk kjøres, hvilket er felles for de fleste produkter. Til slutt vil jeg også se på tilfeller hvor ORM kan komme til kort og hvor andre alternativer kan passe bedre.
Outline Utfordringer med persistens, The Object-Relational impedance mismatch (5 min) Tekniske Organisatoriske Tre forskjellige typer design for persistenslaget (5 min) Vanlig JDBC Lagrede prosedyrer Object Relational Mapping ORM-implementasjonsteknikker (10 min) Lazy-loading Arv ORM-tuning (15 min) Caching N+1-queries problemet, et lite eksempel og hvordan det kan løses Projeksjoner Skriving (5 min) Minimering av skriving til basen Utnyttelse av databasen (5 min) Når bør man vurdere andre alternativer? (5 min)
Seniorkonsulent ( Objectware ) Bjørn jobber som seniorkonsulent hos Objectware, jobber til daglig med J2EE-basert utvikling. I det siste har han hatt fokus på tjenestebasert utvikling med produkter og teknologier som Spring, AOP og TopLink og han har også holdt foredrag på JavaZone i 2003 og 2005.

Case study av Bergen kommunes nye innbyggerportal basert på emnekart. Datagrunnlaget for portalen er fagsystemer, innhold fra publiseringsløsningen Escenic og eksterne kilder (LivsIT, Nasjonal Tjenestekatalog); alt dette sys sammen automatisk for å produsere portalen. Presentasjonen forklarer hva emnekart er, gir litt bakgrunn for prosjektet og beskriver selve den tekniske løsningen (arkitektur, datamodell og integrasjon) samt hvordan den resulterende portalen ser ut.
Hva er emnekart (8 minutter) Kort om prosjektet (2 minutter) Om løsningen (20 minutter) Konseptuel arkitektur Hva brukes emnekart til (og hvordan) Integrasjon mellom emnekartmotor fra Ontopia og publiseringsløsning fra Escenic. Hvordan er søk i portalen løst Erfaringer (10 minutter) Hva var suksess Hva var ikke Oppsummering Required experience: Ingen spesielle Expected audience: Alle som er interessert i nye konsepter
Systemarkitekt ( Bouvet ) Øyvind Litlere. Arbeider ved Bouvet i Bergen. Prosjektleder for implementasjon av ny innbyggerportal I Bergen kommune. Har bakgrunn som utvikler, prosjektleder og systemarkitekt.
Sjefsarkitekt ( Ontopia ) Sjefsarkitekt hos Ontopia. Har vært hovedutvikler for Ontopias emnekartprodukter siden oppstarten i 2000, og har også bidratt i flere emnekartprosjekter. Har skrevet tre emnekartmotorer, og flere open source-produkter rundt XML. Utdannelse som grafisk ingeniør.

Rikstrygdeverket valgte, i 2001, J2EE med IBM som leverandør, som strategisk plattform for modernisering. Rikstrygdeverket er en stor organisasjon med et svært heterogent applikasjonmiljø og mange samtidige prosjekter av forskjellig størrelse og omfang. I tillegg er det mange forskjellige leverandører inne på forskjellige prosjekter. I Rikstrygdeverket har vært at det er mange prosjekter som kjører og mange leverandører som er inne og leverer disse prosjektene. En stor utfordring har vært å skape en effektiv og standardisert utviklingsarkitektur som understøtter både god kvalitet, standardisering, produktiv utvikling og ikke minst ensartet deployment og konfigurering. Foredraget vil se på hvordan Rikstrygdeverket har bygge et utviklingsmiljø og utviklingsarkitektur for å effektivisere utviklingen og supportere mange paralelle prosjekter i en stor og kompleks infrastruktur sammensatt av mange forskjellige applikasjoner. Dette for å sikkre kvalitet i leveranser og holde orden på versjoner av applikasjonene kjørende i de ulike miljøene.
- Introduksjon - Dagens situasjon - Utfordringer - Løsningen - Resultater og erfaringer - Videre arbeid og utfordringer - Oppsummering - Spørsmål Required experience: Kjent med Java/JEE Expected audience Utviklere Arkitekter
Arkitekt ( Accenture ANS ) Utdanning: Master of Science - Distributed Mulitmedia Systems Erfaring: Har jobbet 6 år i Accenture med hovedfokus på Java/J2EE platformen. 4+ års arkitekturerfaring på platformen. Har jobbet for Rikstrygdeverket i 2,5 år, her hovedsaklig som arkitekt for utviklingsarkitektur. Hovedintresser: - Utviklingsarkitektur - Integrasjonsakriktektur - Java/JEE Arkitektur
Arkitekt ( Rikstrygdeverket ) Utdanning: Høgskoleingeniør, videreutdanning Institutt for Informatikk, Universitetet i Oslo Erfaring: 8 års erfaring med utvikling og arkitektur. Jobbet 4 år som arkitekt i IT-Avdelingen i RTV som fagansvarlig for J2EE-plattformen. Arkitekt, utvikler og kvalitetssikrer på diverse prosjekter. Tidligere jobbet i CSC og Newmad Technologies. Hovedinteresser: - Enterprise Architecture - Development Architecture - Integrasjonsarkitektur - Storskala systemer.

Systemutvikling med fokus på drift og vedlikehold blir ofte forsømt av mange i dag. Dette skjer ofte på grunn av press på tid og økonomi, men også fordi man benytter verktøy som ikke er laget eller er velegnet for en drifts- og vedlikeholdssituasjon. Foredraget vil peke på en del ting som kan gå feil og som man bør tenke på. Eksempler er hentet fra relle prosjekter. Målet er å belyse områder som mange ikke tenker på til daglig, men som man bør fokusere mer på fremover.
Introduksjon (5 min) bakgrunn og erfaringer Anders Bjørnestad Problemområdet, konsekvenser, eksempler (30 min) Feller og feil, tips og triks (10 min) hva bør man tenke på hva bør man se etter Oppsummering (5 min) Q&A / diskusjon
Seniorkonsulent ( Webstep ) Seniorkonsulent i Webstep med hovedfokus på systemutvikling og arkitektur med Java som plattform. Spesielle interesseområder innen løsningsorienterte oppgaver i grensesnitt mellom teknologi og forretningsprosesser. Bred erfaring fra prosjekter innen offentlig og privat sektor. Har holdt foredrag om server-basert java i inn- og utland tidligere.

Presentasjonen er en erfaringsutblåsning fra STAY, BBS sitt store omleggingsprosjekt, der stormaskin/COBOL fases ut til fordel for UNIX/Java. Som mange andre av dagens programvareprosjekter har STAY hentet inspirasjon fra metodikker som Extreme Programming (XP), Test-Driven Development (TDD) og Domain-Driven Design (DDD). Målet ved prosjektstart var å følge prinsipper som korte iterasjoner med påfølgende release, delt kodeeierskap, automatiserte tester med mer.
Presentasjonen er en erfaringsutblåsning fra STAY, BBS sitt store omleggingsprosjekt, der stormaskin/COBOL fases ut til fordel for UNIX/Java. Som mange andre av dagens programvareprosjekter har STAY hentet inspirasjon fra metodikker som Extreme Programming (XP), Test-Driven Development (TDD) og Domain-Driven Design (DDD). Målet ved prosjektstart var å følge prinsipper som korte iterasjoner med påfølgende release, delt kodeeierskap, automatiserte tester med mer. Men det er ikke bestandig like enkelt med teori og praksis når man skalerer opp et prosjekt fra noen få, til flere titalls utviklere? Hvilke prinsipper kan man lempe litt på og hvilke er det viktig å holde på? For eksempel: Hvor viktig er det egentlig med delt kodeeierskap? Hvor langt skal man gå når det gjelder automatiserte tester? Skaper ”Continuous Integration” (CI) mer trøbbel enn nytte? Presentasjonen drøfter forskjellige ”grep” som er tatt for å holde på en del prinsipper? Hvilke prinsipper er nedprioritert? Og hvilke konsekvenser har det fått?
Softwareutvikler ( BBS ) Eirik Torske har jobbet som utvikler hos Bankenes Betalingssentral (BBS) siden 2004. Han har hovedfag i informatikk fra UiO, og har jobbet i større og mindre Java-prosjekter siden 2000.

Studier fra andre fagfelt viser gang på gang at enkle matematiske modeller som oftest har langt mer nøyaktige estimater enn eksperter. Selv modeller av ekspertvurderinger fungerer stort sett bedre enn ekspertene de modellerer.Resultater fra studier innen estimering av software utvikling er ikke like entydige.
Professor Magne Jørgensen og Stein Grimstad oppsummerer studier som sammenligner estimeringsmodeller (COCOMO, Use Case Points, etc) og ekspert-estimering, og viser i hvilke situasjoner det lønner seg å stole på ekspertene, når vi bør basere estimatene på modeller, og når det kan lønne seg å kombinere estimater fra eksperter og modeller. De vil også oppsummere arbeid på hvordan man finner fram til de beste estimeringseskpertene.
( Simula Research Laboratory ) Magne Jørgensen received the Diplom Ingeneur degree in Wirtschaftswissenschaften from the University of Karlsruhe, Germany, in 1988 and the Dr. Scient. degree in Informatics from the University of Oslo, Norway in 1994. He has 10 years’ industry experience as a software developer, project leader and manager. He is now Professor in Software Engineering at the University of Oslo and a member of the software engineering research group of Simula Research Laboratory in Oslo, Norway. He has published many articles in international journals on software cost estimation. He has supported work on the improvement of software project estimation and has been responsible for estimation training in several software companies.
( Simula Research Laboratory ) Stein Grimstad received the MSc degree in Informatics from the University of Oslo, Norway in 1998. He has 7 years’ industry experience as software developer and solution architect. He is now a PhD-student in Software Engineering at the University of Oslo, and is a member of the software engineering research group of Simula Research Laboratory in Oslo, Norway. He also works part-time as an advisor at Objectnet. His research interests are software engineering and, in particular, software cost estimation.

Følelser. Brukere. Opplevelser. 50 millisekunder! Noen mener at dette er tiden en portal har til å fange en brukers oppmerksomhet. Vise seg fra sin beste side. Ihvertfall hvis det er snakk om eksterne brukere. Verdens vakreste tekniske løsning forblir den "stygge andungen" om ikke presentasjonslaget og brukeropplevelsen tas minst like seriøst som programmeringsteknikker og integrasjonsrammeverk. Kampen om oppmerksomhet gjelder ikke bare overfor brukerne, men også overfor portalens sponsorer og eiere - de som skal realisere sin konkurransekraft gjennom f.eks. en virksomhetsportal. Å forankre et slikt strategisk viktig IT-prosjekt hos ledelsen og andre sentrale ressurspersoner er en stor utfordring, men også en betydelig suksessfaktor. Foredraget tar for seg temaene brukeropplevelse, forretningsmessig nytteverdi og forankring. - med trender og eksempler. Det legger vekt på de ikke-tekniske sidene ved en virksomhetsportal, og betydningen av disse.
Portalens fallgruver/suksessfaktorer: Brukeropplevelse, nytteverdi og forankring - intro (5 minutter) 50 millisekunder (5 minutter) Hva er det som gir et godt førsteinntrykk? (15 minutter) Hvordan det virkelig er og hvordan det oppfattes at det er (5 minutter) Hvordan få dette til? (5 minutter) Forretningsmessig nytteverdi (5 minutter) Strategisk rammeverk, viktige veivalg (10 minutter) Forankring - opp, ned og til siden (5 minutter) Trender (5 minutter) Oppsummering
Rådgiver og CKO i Objectware ( Objectware ) Kristin Halvorsen. Rådgiver og CKO i Objectware. Jobber i grenseland mellom forretning og IT, spesielt innen virksomhetsportaler og knowledge management. Jobbet som konsulent/rådgiver i 11 år. Utdannet siv.ing data - informasjonssystemer.
Kreativ rådgiver ebusiness i Virtual Garden Screenplay ( Virtual Garden Screenplay ) Kreativ rådgiver ebusiness i Virtual Garden Screenplay. Utdannet fotograf fra University of Glocestershire. Har også studert Data- og multimedieteknikk Han har jobbet med design i interaktive medier siden 2000.

Forskerne fra Simula vil i denne sesjonen demonstrere hvordan du i praksis kan forbedre dine estimater og redusere sannsynligheten for overoptimisme og uønsket påvirkning. Store deler av sesjonen er interaktiv og avsluttes med et uformelt Norgesmesterskap i estimering hvor de som kommer på seierspallen kan glede seg over gavekort fra en av byens bedre restauranter.
( Simula Research Laboratory ) Stein Grimstad received the MSc degree in Informatics from the University of Oslo, Norway in 1998. He has 7 years’ industry experience as software developer and solution architect. He is now a PhD-student in Software Engineering at the University of Oslo, and is a member of the software engineering research group of Simula Research Laboratory in Oslo, Norway. He also works part-time as an advisor at Objectnet. His research interests are software engineering and, in particular, software cost estimation.
( Simula Research Laboratory ) Magne Jørgensen received the Diplom Ingeneur degree in Wirtschaftswissenschaften from the University of Karlsruhe, Germany, in 1988 and the Dr. Scient. degree in Informatics from the University of Oslo, Norway in 1994. He has 10 years’ industry experience as a software developer, project leader and manager. He is now Professor in Software Engineering at the University of Oslo and a member of the software engineering research group of Simula Research Laboratory in Oslo, Norway. He has published many articles in international journals on software cost estimation. He has supported work on the improvement of software project estimation and has been responsible for estimation training in several software companies.

Fri programvare får stadig økt aksept og utbredelse. Dette gir nye muligheter for utradisjonelle forretningsmodeller i konsulentbransjen. Disse mulighetene er både økonomiske, organisatoriske og ikke minst markedsutvidende. Eller med ordene til politisk rådgiver Jørund Leknes i Fornyingsdepartementet, til Linux1.no, 2006-03-30: «Fri programvare baserer seg på nye samarbeidsformer og forretningsmodeller som kan gi viktig stimulans for utviklingen av norsk kompetanse og næringsvirksomhet på IT-området.» I BOF-sesjonen presenteres ulike forretningsmodeller for utvikling av fri programvare. Alternative modeller diskuteres og eksemplifiseres med prosjekter og pågående initiativer. Stafettbasert modell innebærer at ulike interessenter bidrar med sine krav og tilhørende finansiering til hver sine utviklingsfaser av en løsning. I dugnadsbasert modell samarbeider flere interessenter om krav og finansiering innenfor samme fase. Med donasjonsbasert modell er gjerne utviklerne initiativtakere og søker bidrag fra allmenheten eller større pengesekker. Eksempler som presenteres: Unified Consulting AS har utviklet en kompetanseportal for kommunenorge, med utgangspunkt i Kongsberg-regionens kommuner. Den GPL-lisensierte portalen er basert på stafettfinansiert utvikling med dugnad underveis. Prosjektets to første faser er finansiert av kommuner i Buskerud og Telemark, samt leverandør Unified Consulting. For tredje fase pågår en dialog med flere interessenter om finansiering. Ekstra-funksjonalitet til CMS-løsningen eZ publish for sammenligning av innhold (Content diff), ble utviklet i vår. Finansieringen var en dugnad mellom tre kunder og to partnere av eZ systems. Content diff ble sluppet i vår (eZ publish 3.8). Norske eZ systems er i ferd med å etablere initiativet eZ Open Funding for å koordinere og hjelpe konstellasjoner av interessenter for finansiering av programvareutvikling. Eksemplene drøftes i lys av utfordringene og forutsetningene de ulike modellene gir. Foredraget vil i utgangspunktet ta for seg bestemte eksempelprosjekter, men dersom publikum har relevant prosjekterfaring, er det åpning for å presentere / diskutere disse på bekostning av planlagte prosjekteksempler.
Introduksjon til foredraget og foredragsholder/firma. (2 min) Presentasjon av ulike forretningsmodeller for programvareutvikling. (15 min) Modeller / varianter (Stafettbasert, dugnadsbasert, terskelfinansiering, open funding, ++) Muligheter (Nye markeder, oppdragsgiver-økonomi, leverandør-lås, samfunnsøkonomi, ++) Utfordringer (Styring, tillit, vedlikehold) Koblingen til fri programvare Prosjekteksempel med stafettbasert utvikling (6 min) Erfaringer fra prosjekt i Kongsbergregionen Styrker / utfordringer Prosjekteksempel med dugnadsbasert utvikling (6 min) Erfaring fra utvikling av Content diff til eZ publish Styrker / utfordringer Hvordan etablere spleiselag. (6 min) Fødselshjelperen "eZ Open Funding" Styrker / utfordringer Sammendrag / diskusjon (4 min) Spørsmål / svar / kommentarer fra salen (10 min) Lengde / Duration: ca 40 minutter + spørsmål og innspill fra publikum. Forkunnskapskrav / Required experience: Ingen forkunnskaper kreves. Det er allikevel en fordel å kjenne sentrale begreper innen fri programvare (GPL, fri programvare, åpen kildekode, navn på kjente åpen kildekode-prosjekter) Målgruppe / Expected audience Målgruppen er alle med interesse for fri programvare, enten interessen gjelder utvikling eller rent forretningsmessige aspekter. Foredraget vil gi deg en gjennomgang av muligheter og utfordringer med ulike typer finansering av fri programvare. Temaet belyses med eksempler.
Konsulent ( Unified Consulting AS ) Klaus Stafto jobber som konsulent i Unified Consulting. Han har seks års prosjekterfaring med hovedsaklig java-teknologier. Klaus er Cand. Scient. fra NTNU med fagretning kunstig intelligens.

Modeller gir et høyt abstraksjonsnivå for utvikling og man kan se knytning til forretningsprossser. Modeller gir god oversikt og bidrar til problemorientert løsning og gjør det mulig å skjule implementasjonsdetaljer. Komplekse systemer vil ha stor hjelp av kodegeneratorer for å ivareta ønsket arkitektur og korrekthet. Samtidig kan man oppnå høyere produktivitet, bedre kvalitet og uavhengighet til målmiljø. I foredraget lages et kjørende system med arkitektur fra et virkelig eksempel der man vedlikeholder modell, ikke kode og er uavhengig av kjøremiljø.
Kort om Esito (3 min) Visjon Modelldrevet utvikling (7 min) Motivasjon Modelldrevet eller MDA Erfaringer Modelldrevet utvikling med Genova (15 min) Historikk Verktøyarkitektur Forklaring av modellene Fra modell til modell Hendelser og tjenester Templates og kodegenerator (10 min) Ulike målmiljø, fokus på java Fra modell til implementasjon Applikasjonsarkitektur Lag din egen template Referanseprosjekt (5 min) Erfaringer fra et stort pågående prosjekt Kort demo (10 min) Eksempel forklart med modellene Generering av javakode Kjøre generert applikasjon
Daglig leder ( Esito ) Daglig leder i Esito AS med fokus på utvikling av verktøy som støtter modellbasert utvikling. Cand real fra Informatikk på UiO, 30 års erfaring innen programutvikling av basis programvare og verktøy. I de seinere år har han drevet mye med utvikling av java enterprise applikasjoner.

Etter mange år med utvikling av enterprise-applikasjoner med JEE (Java Enterprise Edition) har utviklere blitt mer kritiske til hva man faktisk trenger av pakken. I dette foredraget vil jeg gjennomgå fordeler og ulemper med den komplette pakken man får av JEE. Jeg vil også gjennomgå hvilke krav en enterpriseapplikasjon vanligvis faktisk har. Gjennom hele foredraget vil jeg vise hvordan man kan bruke JSE og nyttige påbygg for å levere applikasjoner som oppfyller alle drifts- og forettningskrav, men som ikke går i veien for utvikleren. Jeg vil vise at ved å lage selvstendige applikasjoner som er uavhengig av en stor applikasjonstjener, kan man få et billigere produkt med færre feil. Med min erfaring som konsulent på Maven-relaterte oppgaver så har jeg sett hvilke hindringer JEE-applikasjonstjenere legger i utvikling og utrulling av ellers enkle applikasjoner. Jeg vil i dette foredraget vise en oversikt over problemene og komme med konkrete metoder man kan bruke for å lette hverdagen til utviklerene, arkitektene og drifterene.
Introduksjon Hvorfor er Java EE så vanskelig å bruke? Lange turer mellom skriving og kjøring av kode Utrulling og produksjonssetting, hvorfor er det så vanskelig? Miljøforskjeller mellom utviklerens maskin og miljø til produksjonsmiljøet Hvordan løser man disse problemstillingene med JEE Hvordan løser man disse problemstillingene med JSE Hvilke problemer kan Java SE ikke løse Oversikt og arkitekturer som illustrerere løsningene Bruk av embedding som et alternativ til å kjøre applikasjonene i en applikasjonstjener Oppsummering: Praktiske erfaringer ved å ikke bruke appservere Hvor passer det og hvor passer det ikke Påkrevd forkunnskap Krever kjennskap til Java SE og grunnleggende forståelse for de problemene som JEE prøver å løse. Forventede deltagere: Utviklere og arkitekter som er interessert i en enklere og mere feilfri hverdag.
Utvikler og arkitekt ( Arktekk ) Trygve Laugstøl jobber i Arktekk som utvikler, arkitekt og har mange års erfaring med Java-utvikling. Han har lang erfaring med utvikling og bruk av åpen kildekode som kjerneutvikler av Maven 2 og Continuum. Trygve har jobbet lenge med utvikling av plugins som støtter opp om smidig utvikling og som rådgiver innenfor disse områdene.

Mange applikasjoner er avhengig av batchjobber for å utføre forretningskritiske prosesser. Felles for batchjobber er at de behandler store datamengder, og utføres uten brukerinteraksjon. Batchjobber prosesserer store datamengder, formaterer inndata, utfører datavalidering og implementerer komplekse forretningsregler. Spring Batch er et omfattende lettvektsrammeverk som støtter disse prosessene. Spring Framework har lenge vært det mest populære rammeverket for utvikling av applikasjoner for Java SE og Java EE. Spring Framework legger til rette for POJO-basert utvikling og dependency injection. Spring Batch er utviklet av Accenture i samarbeid med Interface 21. Sesjonen tar sikte på å presentere Spring Batch, og vise hvordan Spring Batch flytter vanlige batchoppgaver som restart, skipping og jobpartisjonering vekk fra utvikler og inn i rammeverket. Presentasjonen vil vise Spring Batch arkitekturen og demonstrere bruken av den ved å gå igjennom en enkel eksempelapplikasjon.
Bakgrunn (Hvorfor et rammeverk, hvorfor open source, hvorfor Spring) Hensiktene/Målene med Spring Batch Spring Batch oversiktsbilde Gjennomgang av de forskjellige konfigurasjonsstegene Demonstrasjon av eksempelapplikasjon Spring Batch roadmap Presentasjon av folkene bak Spring Batch Required experience: Det vil være en fordel for tilhørere dersom de har en grunnleggende kunnskap om Spring Framework. Expected audience: Arkitekter og utvikelre av batchapplikasjoner
Consultant ( Accenture ) Morten er Consultant i Accenture og har jobbet med Java-/JEE-utvikling i 3 år, med spesialisering på EJB og persisteringsteknologier. Han er nå en del av applikasjonsarkitekturteamet på NAVs pensjonsprosjekt. Han har tidligere jobbet på prosjekter innen for bank og telekom.

Har du utfordringer med koplekse data fra flere fagsystemer? Blir systemet ditt tregt fordi komplekse data krever lang tid for å lastes? Dagens virksomheter har ofte et forretningsdomene som spenner seg over flere ulike underliggende kjernesystemer, ofte referert til som silo applikasjoner. Domeneobjektene er adskilte med ulik datakvalitet og gjerne med SLA'er av varierende kvalitet. Dette medfører en arkitektur som skaper integrasjonsutfordringer og som vil får store konsekvenser i en tjeneste orientert kontekst. Typiske tilnærminger til disse integrasjonsutfordringene er master og multi-master strategier. Man har et kjernesystem som opptrer som master og er ansvarlig for å synke mellom "slave" systemene, eller en master for hvert kjernesystem. Enterprise Domain Repository pattern (EDRP) ser utfordringen med at samme data lever i forskjellige fagsystemer. Ved å benytte EDRP oppretter du komplekse objekter en gang. Deretter legges dette objektet i cache, for rask tilgang ved senere bruk. Når du oppdaterer data som berører objektet som ligger i cache, reflekteres dette direkte til alle brukere av tjenesten. Ved at oppdatering også går gjennom EDRP tjenesten vil alle brukere, og alle fagsystemer, ha mulighet til å få med seg oppdateringen. Vi vil i dette foredraget vise hvordan man kan ta kontroll over forretningsdomenet og integrasjonsutfordringene ved å benytte EDRP. Vi vil se nærmere på hvordan EDRP baserer seg på tjenester som korrelerer data fra flere kjernesystemer. Tjenestene vil eksponere forretningsinformasjon fra flere kilder samstilt, og i tråd med virksomhetens egne definisjoner. Ved hjelp av eksempler vil man se hvilke gevinster man får ved å benytte EDRP kontra en master/multimaster strategi.
Introduksjon (1 min) Målet med foredraget (1 min) Typiske integrasjonsutfordringer i dagens virksomheter (10 min) o Overlappende kjernesystemer o Master strategi o Multi-master strategi Tjeneste kategorier (5 min) Enterprise Domain Repository Pattern (20 min) o Hva er det? o Hva løser det? o Hvorfor? o Når bør man bruke det? Erfaringer med bruk av EDRP (10 min) Kilder (1 min) Q&A (10 min)
Senior Konsulent ( Objectware ) Bård har vært hangaround i javaBin siden 1999. Han begynte å jobbe med Java i 1998, og har siden jobbet med integrasjon mellom Java, Stormaskin og Domino. Bård har jobbet med saksbehandlingsystemer, hovedsaklig i distribuerte finanssystemer de siste 8 årene. Objectware er hans nye arbeidsplass, der han spesiellt er aktiv innen OW sin EA/SOA faggruppe. Bård kommer til å være med å holde en rekke Spring kurs det neste året. Jobber nå mest med Spring og EA/SOA praksis. Bård trives veldig godt som mentor for "ferske" Java programmere. Bård er en av ildskjelen bak RFID@Conference RFIDConferenceTools
Kjartan is working as a senior consultant at Objectware AS and has about 6 years of programming experience primarily working with J2EE. He has lately been focusing on Service Oriented Architecture and services in specific.

It bransjen har gjennom ”SOA bølgen” hatt stor fokus på forretningsprosesser, noe som vises ved at mange produktleverandører fronter prosessmotorløsninger, gjerne sammen med deres ESB løsninger. Tradisjonelt sett har prosessmotorløsninger vært brukt til styring av backend integrasjon. Nå ønsker flere kunder en nærmere kobling mellom brukerne og forretningsprosessene, slik at it- systemene faktisk støtter hele forretningsdriften. I denne sammenheng finnes det mye uklarheter om hvordan man på best måte kan gjøre dette. En av utfordringene er hvordan brukerens skjermbiler og skjermflyt kan samspille med den overordnede forretningsprosessen. Vi oppklarer forskjellen mellom skjermflyt og forretningsprosesser, med å presentere scenarioer hvor dette samspillet demonstreres. Vi viser hvordan man pragmatisk og enkelt kan integrere en forretningsprosess med en Spring Web-applikasjon. Vi demonstrerer prosesser som spiller sammen med skjermbilder og forretningslogikk implementert i en Javaapplikasjon. Videre går vi inn på hvilke fordeler og bruksområder man har ved å la en forretningsprosess styre en brukerapplikasjon, og når man bør gjøre dette. Vi vil diskutere forskjellen mellom skjermfløytverktøy som Spring WebFlow og prosessverktøy som BPEL. Scenarioene i som presenteres er basert på erfaringer fra store norske prosjekter.
Introduksjon  Presentasjon av speakers Problemstilling: foretningsprosesser og skjermflyt Problemstilling: Pragmatisk implementasjon Presentasjon av teknologi Prosessmotor(ESB)- teknologi benyttet Rammeverk og annen teknologi Scenario 1: Bookingsystem Presentasjon av en avansert bookingprosess Interaksjon mellom forretningsprosess og skjermbilder Scenario 2: Saksbehandlingsprosess Presentasjon av en to-trinns saksbehandlingsprosess Applikasjonsarkitektur Interaksjon mellom forretningsprosess og skjermbilder Demonstrasjon av forretningsprosessen i benyttet verktøy Demoapplikasjon  Spørsmål / diskusjon Required experience: Grunnleggende forståelse av integrasjon og J2EE utvikling. Expected audience: Utviklere og arkitekter med interesse for enerprise arkitekturer.
Consultant ( Ciber ) Mario is currently working with Java development and Integration at CIBER Norway, an acknowledged consulting company, delivering mission critical solutions with strong focus on Java, and related technologies. He holds a Master of Computer Science from Norwegian University of Science and Technology. Mario's interests are integration, Web Services and SOA using the Java platform. 
Developer ( Tarantell ) Tor Arne is java developer at Tarantell, a leading company in user friendly web systems. He has a Master in Computational Science, and has worked for IBM Netherland Center for Advanced Studies, where he did research on grid and semantic web services, which has been published on conferences. His main experience and interest is in the field enterprise architectures, integration and web systems.   

Testing havner veldig ofte i annen rekke når man utvikler web-relaterte applikasjoner i Java. Dette er gjerne på grunn av tett knytting mellom de(t) rammeverk som benyttes og selve web-containeren. Alle som har prøvd å lage mock-objects e.l. for Servlet-klasser kjenner seg mest sannsynlig igjen i dette. Ofte ender man opp med å si at "vårt servlet-lag er så tynt, så vi trenger ikke teste det", en påstand som gjerne er mer en unnskyldning enn realitet. Dette foredraget vil vise hvor lett det er å komme i gang og bruke Struts2/WebWork, med fokus på testing av webløsningen. Ved hjelp av verktøy som Maven2, FitNesse og Spring kan man bygge opp et svært fleksibelt og oversiktlig system, basert på automatiserte kravtester. Det blir utstrakt bruk av eksempler og kode.
Introduksjon til problemstilling - problemer med testing av web-applikasjoner (5 min) Oversikt over Struts2 (10 min) - Oversikt over Struts2 - Installasjon og oppsett - Hva er nytt fra forrige versjon? Oversikt over støtteverktøy (10 min) - FitNesse - Spring - Maven2 Testing av Struts2 applikasjon - vise ved hjelp av eksempler hvordan man bygger og tester Struts2 applikasjoner (20 min) - Enhetstest - Integrasjonstest - Kravtesting/akseptansetest Oppsummering & konklusjon (5 min) Q&A (10 min) Required experience: Erfaring med utvikling av web-relaterte Java-applikasjoner (JSP/Servlet). Gjerne noe erfaring med forskjellige web-rammeverk. Expected audience: Alle som jobber med utvikling av web-applikasjoner i Java. Både nye og mer erfarne brukere av Struts2 vil ha glede av foredraget!
( BEKK ) Eivind Waaler har 8 års erfaring med utvikling og testing av Java og J2EE applikasjoner, hovedsaklig med et web-relatert fokus. Han har erfaring med de fleste største Java-baserte web-rammeverkene som brukes, og har de siste 3-4 årene vært en aktiv bruker av WebWork (nå Struts2). Eivind jobber til daglig som faggruppeleder og systemutvikler/arkitekt i BEKK, og har holdt foredrag på JavaZone de 4 siste årene.

Gjennom dette foredraget vil dere få kunnskap om utvikling av applikasjoner for mobilen. Hvordan håndtere generelle problemstillinger som terminalforskjeller, minneforbruk, brukervennlighet osv. Vi ønsker å presentere hvordan vi i mBricks plattformen håndterer dette slik at du som applikasjonsutvikler blir mest mulig effektiv.
Innleding: mBricks, mobilmarkedet, produktet (5 min) Terminalforskjeller: Utfordringer, løsninger, en kode for alle terminaler, ulike implementasjoner av JSR’er (5 min) Minneforbruk: Begrenset minne, tips og triks for å holde minneforbruket på et minimum (5min) Brukervennlighet: Små skjermer, begrenset input muligheter, branding og pixelkontroll (5 min) Kommunikasjon: HTTP, TCP, UDP (5 min) Sikkerhet: Mobilkryptografi, lagring av sensitive data (5 min) J2ME vs. J2SE: Hovedforskjell mellom J2ME og J2SE (5 min) WAP vs. Java: Fordeler/ulemper (5 min) mBricks – en ny standard for mobilapplikasjonsutvikling: Hvorfor mener vi at mBricks bør bli en ny standard og hvordan har vi tenkt å gå frem for å få dette til å skje (5 min) Demonstrasjon: Kodeeksempler (5 min) Demonstrasjon: Applikasjoner utviklet vha. mBricks (5 min) Q & A (10 min) Required experience: J2ME og J2SE kunnskap Expected audience: Who should attend: Java utviklere, forretningsutviklere og personer med interesse for mobilapplikasjoner Benefits from attending: Økt kunnskap om J2ME, innsikt i utvikling av mobilapplikasjoner og markedet rundt dette.
Product manager ( Teleplan – mBricks ) Pål Berg er produktleder for mBricks – et software bibliotek for utvikling av applikasjoner for mobilen. Han har en Siv. Ing. grad i fra NTNU og har ti års erfaring innen softwareutvikling i forskjellige programmeringsspråk. De siste tre årene har interessen vært på utvikling av applikasjoner for mobilen i Java. Spesielt har fokuset vært på å lage mobile entreprise applikasjoner.

Ajax-teknikker gjør det mulig å gi web-applikasjoner et brukergrensesnitt som ikke tidligere lot seg realisere i en nettleser. 'Bygg for alle'-prosjektet har brukt Ajax for å realisere et svært dynamisk brukergrensesnitt for registrering og publisering av informasjon om tilgjengelighet i offentlige bygg. Dette erfaringsforedraget diskuterer hvordan Ajax påvirker MVC-arkitekturen til systemet, samt demonstrerer hvilke utfordringer man står ovenfor ved bruk og testing av Ajax-funksjonalitet.
- Bakgrunn og motivasjon for løsningen (5 min) - Arkitekturen i løsningen (10 min) - Datadrevet metamodell m/ dynamiske dialoger - Ajax og MVC - omfattende bruk av Ajax og asynkronitet i web-løsning - treeview er Ajax - alle dialoger under er Ajax-basert - Ajax og web-rammeverk - mister mye web-rammeverk funksjonalitet v/ bruk av ajax - hva vi valgte - Yahoo UI Library - Velocity - Spring MVC - Servlet - Hva vi ikke valgte - GWT - hot, men ferskt når vi startet prosjektet - metadatastrukturen vår kunne bli en utfordring - Erfaringer og gotchas (20 min) - Ivaretakelse av tilstand på flere nivåer i klienten - Asynkront kommandogrensesnitt basert på XML - Divider/scroll-bar problematikk - Enkoding-problematikk v/ dynamiske skjermbilder - Feilhåndtering og validering, tilbakemelding - Asynkront kommandogrensesnitt basert på XML - Retur av html til placeholdere - Nyttige utviklingsverktøy - Testing av Ajax-funksjonalitet (10 min) - Utfordringen med testing av JavaScript - Selenium + Fit - Testing mot flere browsere - Spørsmål (10 min) NØDVENDIG ERFARING: Noe erfaring med utvikling av web-løsninger er fordelaktig PUBLIKUM: Alle med interesse for moderne web-utvikling
Seniorkonsulent ( Objectnet ) Christian har lang erfaring og kjernekompetanse innenfor mobile enheter, databaser, objektorientert utvikling, .Net og Open Source teknologi. Han har lang erfaring fra utvikling av trelags applikasjoner, web applikasjoner, web tjenester og SMS / MMS tjenester i Java og C#.
Konsulent ( Objectnet ) Asbjørn er konsulent og utvikler i Objectnet og har spisskompetanse innenfor objektorientert utvikling og utvikling av moderne webapplikasjoner. Asbjørn har mestergrad i informatikk fra Universitetet i Oslo.

Foredraget drøfter i hovedsak hvilke utfordringer som kan oppstå ved innføring av AJAX i en webapplikasjon, og hvordan disse ble løst ved bruk av Google Web Toolkit (GWT). Vi vil presentere versjon 1.0 av applikasjonen basert på JavaScript og tredjeparts AJAX biblioteker, samt endringene i versjon 2.0 ved innføring av GWT. Erfaringene fra versjon 1.0 sammen med nye krav gjorde at vi måtte velge en annen strategi for utvikling av versjon 2.0 av applikasjonen. Spesifikke områder som vil bli belyst er integrasjon mellom Spring MVC og Google Web Toolkit, og hvilke implikasjoner det får for systemets arkitektur. Vi vil også ta for oss kodeeksempler, byggstøtte, feilsøking og testmuligheter for begge versjonene. Siste del av foredraget tar for seg hvilke fordeler og ulemper vi ser ved innføring av GWT, og hvilke utfordringer vi står ovenfor ved videre utvikling av produktet.
1. Introduksjon - Foredragsholdere og introduksjon til prosjektet 2. Hovedinnhold - Versjon 1.0: Krav, valg av teknologi, arkitektur og utfordringer dette gav. - Versjon 2.0: Nye krav, nye valg av teknologier og ny arkitektur - Integrasjon mellom GWT og Spring. - Verktøy-/byggstøtte - Demo. - Fordeler og ulemper med valgt GWT løsning 3. Spørsmål og svar Required experience: Det kan være en fordel å kjenne til JavaScript. Tilhørere bør ha grunnleggende kunnskaper om AJAX, samt Google Web Toolkit. Det er også en fordel å ha kjennskap til Spring. Expected audience: Personer som har interesse av AJAX-løsninger.
Konsulent ( Accenture ) Kenneth jobber til daglig som konsulent i Accenture. Han har erfaring med Java/J2EE siden 2004 med fokus på mellomvare. Har vært utvikler på store prosjekter hovedsakelig innenfor telekom. Har jobbet med Google Web Toolkit siden oktober 2006.
Konsulent ( Bouvet ) Håvard jobber til daglig som konsulent i Bouvet ASA. Han har Java erfaring siden 2001 med fokus på webbaserte applikasjoner. Har vært utvikler i flere store Java prosjekter, hovedsaklig innenfor telekom.

Dårlige valg av metoder, teknikker og verktøy i systemutviklingsprosjekt kan ha alvorlige konsekvenser, for eksempel i form av lav produktivitet og kvalitet. Beslutninger ved valg av metoder og verktøy bør derfor i størst mulig grad være basert på gyldige forskningsresultater og systematisk innhenting og kritisk vurdering av erfaringer, dvs beslutningene bør være ”evidensbaserte”. Utgangspunktet for presentasjonen er at hyppig benyttede informasjonskilder, slik som guru-uttalelser, demonstrasjoner og referansekunder, lett gir et feilaktig bilde av gevinster og ikke minst at svært få innen IT-bransjen har fått opplæring i bruk av evidensbaserte beslutningsprosesser. Presentasjonen vil inneholde praktiske øvelser med formål å bedre deltakernes evne til å:1) formulere problemstillinger som utgangspunkt for valg av metoder, teknikker og verktøy, 2) innhente relevant og balansert informasjon fra forskning og praksis, og 3) vurdere informasjonens og argumentasjonens gyldighet i forhold til valg problemstilling.
1) Øvelsesoppgaver (10 minutter) 2) Eksempler på typiske prosessmangler ved valg av metoder, teknikker og verktøy. (5 minutter) 3) Kort øvelse relatert til vurdering av argumentasjon i tekst skrevet av høyt profilert XP-aktør. Brukes til å illustrere mangler mhp hvordan vi leser og vurderer argumentasjon, og hvor lett vi dermed blir påvirke av retoriske og markedsføringsmessige virkemidler. Gjennomgang av sjekklister og gode råd for hvordan vi bør vurdere argumentasjon av denne typen. (15 minutter) 4) Gjennomgang av stegene for evidensbasert systemutvikling. Applisert på valg av metoder og verktøy. (15 minutter) 5) Gjennomgang av øvelsesoppgaver fra 1) + spørsmål. (15 minutter) Expected audience: Utviklere, arkitekter og prosjektledere som ønsker å ta bedre beslutninger.
( Simula Research Laboratory ) Magne Jørgensen er utdannet sivilingeniør fra Universitetet i Karlsruhe og har en doktorgrad i informatikk fra Universitetet i Oslo. Han har tidligere jobbet som programmerer, prosessforbedringsleder og prosjektleder i Telenor og Storebrand, og er nå professor ved Simula Research Laboratory. Forskningsfokus er på estimering av IT-prosjekter og på ekspertvurderinger. Sammen med Barbara Kitchenham og Tore Dybå har han lansert metoden "Evidence-based software engineering". Han underviser i denne metoden både på Høgskolen i Rena og Universitetet i Oslo.

PS: Send mail til totto@objectware.no dersom du har tenkt å delta på denne BOF-en!! Her blir det Governance in action, med både Govenors, Auditers, Policy Advisory Board, IT-sjefer, stressa prosjektledere og overarbeidete utviklere - og en vil få demonstrert effektene av brudd på viktige policy regler for både løsning og arkitektur. Med andre ord, så har vi et klassisk rollespill rundt arkitektur, design og konsekvenser i den virkelige verdenen.
Agenda: Utdeling av rollebeskrivelser til deltakerene Gjennomgang/intro av caset I: Designmøte rundt nytt krav o quick-fix strategien blir valgt II: Governance QA-møte, o nytt design i tråd med Governance Policies blir påtvungt prosjektet III: Prosjektmøte: o krisemaksimering fra prosjektleder, krigen starter IV: Prosjekteiermøte: o Governance policy blir klaget inn til Policy Advisory Board (PAB) V: Møte i PAB, o policy blir videreutviklet, incentiver og begrunnelse for regel blir forvaltet/videreutviklet VI: Prosjektmøte, o Policy blir ignorert av prosjektleder VII: Project retrospect o Gjennomgang av tid/kost viser sterkt svekket endringsdyktighet, og høy feilrate rundt implementering av det nye kravet
Sjefskonsulent ,Java Champion og president i javaBin ( Objectware AS ) President of the very successful Norwegian JUG javaBin. Sun Java Champion and Community Leader on java.net. Totto's leadership the JUG has built a very strong Java community in Norway, with hundreds of active members. javaBin has monthly meetings with international and local experts, runs one of the very best non-English Java sites (www.java.no) and annually hosts the JavaZone conference (www.javazone.no). Speaker on several conferences including JavaZone, OMG Information Days, the Software conference and various others. With over 20 years of professional programming experience spanning quite a few programming languages he has contributed in both international and domnestic projects in various roles, including project leader, technology mentor, software architect, lead developer, technology strategist and trainer. In total Totto probably is the premier Java Champion in Scandinavia...

Som utvikler av en tjeneste er man interessert i når endringer gjør den inkompatibel med prosjekter som avhenger av tidligere versjoner. Vi vil presentere et konsept som går ut på å få bedre kontroll over slike endringer. Dette gjøres ved å kontinuerlig bygge prosjekter med flere versjoner av en tjeneste. Automatisering blir nødvending når antall prosjekter som er avhengig av tjenesten øker, og/eller vi ønsker å se på avhengigheter til flere tjenester. En Proof-of-Concept implementasjon basert på Continuum vil bli demonstrert. Tilhørerne kan forvente å lære hvordan avansert kontinuerlig integrasjon kan gi mer stabile tjenester. Vi vil også beskrive hvordan, og hvorfor, denne teknikken kan gi høyere tjenestekvalitet og bidra til økt gjenbruk. Stikkord: Kontinuerlig integrasjon, Continuum, Maven, komponent-orientert utvikling, versjonering
Skissere bruksområdet - Hvorfor er automatisering nyttig? (5min) Forklare konseptet - vise avhengighetsgrafer (10min) Svært kort introduksjon til teknologien utnyttet i PoC-en (Maven, Continuum og versjonering i Maven) (5min) o Egenskaper ved Maven og Continuum som legger til rette for implementasjon av konseptet Implementasjonen i grove trekk (10min) Vise demo (PoC) (10min) Nytteverdi (10min) Required experience: Grunnleggende kjennskap til Mavens Project Object Model (POM) og kontinuerlig integrasjon (CI). Expected audience: Utviklere og prosjektledere som ønsker å lære en ny CI teknikk.
Konsulent ( Objectware ) Erik er utdannet: Sivilingeniør i Datateknikk ved NTNU. (Ferdig juni 2007.) Han har gjennom to år hatt et frivillig verv som utvikler og prosjektleder hvor jeg har fått erfaring med bruk av Maven, Ant, Continuum, Spring og Hibernate.

Agile utviklingsprosesser har som utgangspunkt å tilby applikasjoner som er designet for å håndtere hyppige endringer i forretningsprosessene de skal støtte. Et av hovedpunktene i det agile manifestet, er å ønske endringer velkommen. Gjennom en iterativ utviklingsprosess skal applikasjoner utviklet gjennom en agile prosess raskt kunne tilbys kunden. En modelldrevet utviklingsprosess har som målsetting at man gjennom modellering skal kunne beskrive forretningsområdet som applikasjonen skal støtte. Videre skal man gjennom automasjon kunne transformere teknologiuavhengige løsninger over i et teknologispesifikt miljø, som så danner grunnlaget for genereringen av basisfunksjonaliteten i applikasjonen. Der den agile metodikken ønsker mest mulig ”hands on” gjennom hele utviklingsprosessen, baserer den modelldrevede metodikken seg i stor grad på automasjon. Dette er på mange måter to tankesett som står langt fra hverandre i innhold. Uansett, den uttalte målsettingen til begge utviklingsmetodikkene er å forbedre effektiviteten i prosessen og kvaliteten av det endelige resultatet. Siden begge metodikkene har den samme målsettingen, er det interessant å se hvordan man eventuelt kan bruke disse metodikkene - i en og samme prosses. Målsettingen til dette fordraget er derfor å se de på mulighetene man oppnår gjennom å kombinere agile utvikling med modelldrevet utvikling. Videre hvordan man kan nyttegjøre seg det beste fra begge ”leire”. Samtidig vil det bli rettet spørsmålstegn ved noen av de tradisjonelle ankepunktene knyttet til modelldrevet utvikling. Som f.eks at man trenger et veldig omfattende designarbeide i forkant av utviklingen, eller at kodegenerering tar bort friheten til den enkelte utvikleren.
Seniorkonsulent ( Mesan ) Som student ved UiO skrev Christoffer hovedfagsoppgave om modelldrevet utvikling og verktøystøtte til dette. Videre har han vært foredragsholder for Matergradsstudenter ved UiO om samme tema. Han har også holdt foredrag i Dataforeningen om dette fagområdet. Gjennom ulike utviklingsprosjekter i Mesan, har Daae-Qvale også opparbeidet seg en interesse for Agile utviklingsmetodikk og hvordan man best kan tilpasse denne til det enkelte prosjektet. I løpet av våren vil Daae-Qvale ta en sertifisering som Scrum master

Fjorårets norgesmester, Sindre Mehus, forsvarer tittelen i denne sesjonen hvor forskerne fra Simula kårer årets Norgesmester i estimering. Som i fjor blir det en interaktiv sesjon med intrikate oppgaver, og finalistene kan glede seg over gavekort fra byens bedre restauranter. Det blir også en kort demonstrasjon av hvor lett det er å manipulere anbudsrunder.
Expected audience: Ingen forkunnskaper er nødvendig.
Key Account Manager Stein Grimstad received the PhD degree in Informatics from the University of Oslo, Norway in 2006. He has 10 years' industry experience as software developer and solution architect. He is now a research scientist at Simula Research Laboratory in Oslo, Norway and an adviser at Objectnet AS. His research interests are software engineering and, in particular, software cost estimation.

Maven er mer enn et vanlig byggesystem - det er et verktøy som kan gi merverdi rundt firmaets forettningsregler og krav. Ved å benytte de mer avanserte mulighetene Maven tilbyr er det for en organisasjon mulig å implementere og automatisere foretningsregler, som en integrert del av utviklingsprosessen. En sentral del av Maven er muligheten til å utvide funksjonaliteten ved bruk av plugins. Jeg vil i dette foredraget gi en introduksjon til hvordan man kan, med å skrive egne og/eller benytte seg av eksterne plugins støtte oppunder bedriftens byggebehov og forretningsregler. Eksempler på dette er kontrollering av lisenser, innføre krav til pakking av programvaren og validere/godkjenne tredjepartsbiblioteker. Jeg vil gi en oversikt over den utviklingen som skjer av Maven 2-plugins idag og hvordan man kan ta del i miljøet. I løpet av foredraget vil jeg gå i gjennom plugin-APIet og vise hvordan dette kan brukes til å utvikle plugins, som muliggjør praktisk inføring og garantering av regler som en del av en utviklingsprosess.
Developer ( Arktekk ) Kristian Nordal jobber til daglig hos Arktekk, som Java-utvikler med hovedfokus på open source og smidig utvikling. Han er commiter på Codehaus sitt prosjekt for Maven-plugins og har i flere år deltatt i utviklingen av Maven 2-plugins, som for eksempel den første pluginen for Jetty5 og appassembler-pluginen.

Hver 17. mnd kommer det en ny versjon av Java. Java Community Process er aktiv som aldri før - 700 personer/firmaer bidrar kontinuerlig til Java Spesification Requests. Nye språk kommer inn i den offisielle platformen (Groovy, JRuby, Scala) og et hav av rammeverk er tilgjenglig for deg som utvikler. Hvilke av de 323,000 treffene på "Java framework" i google er relevante? Hvilke av de 272,000,000 linkene om Java burde DU ha lest?
Sitter du i tidsklemma og sliter med å følge med? Få gode tips og kilder på hvordan henge med. Etter en kort innledning prøver vi i fellesskap å finne de beste metodene for å finne informasjonen, slik at du kan beholde nattesøvnen intakt.
Konsulent ( Objectnet ) Degree in computer science (Cand. Scient.) from University of Oslo, Insititute for Informatics. Full time Java consultant since 2000. Currently employed by Unified Consulting. Passionate interest in computer science, particularly computer languages, with Java in particular.

Har du en snikende følelse av at din trygge serielle hverdag er truet og at parallellisering antagelig er noe du bør ha et forhold til før eller siden, da er målet med denne enkle introduksjonen til parallellisering å kunne vise at dette ikke nødvendigvis trenger være veldig vanskelig. Noen ganger har man behov for å splitte opp større jobber for eksempel for å utnytte datakraften som er tilgjengelig over flere prosessorkjerner, prosessorer og servere. Teknikker, infrastruktur og rammeverk finnes for dette, men de er ofte komplekse å sette opp, vanskelig å forstå og påvirker designet i for stor grad. Jeg ønsker å gi en enkel (teknologi og produktuavhengig) introduksjon til parallellisering, hvilke forutsetninger som må være på plass for at oppgaver gjøres i parallell, noen problemstillinger knyttet til å parallellisere, teknikkene master - worker, og map og reduce, og eksempler på en del typiske problemer som er egnet for parallellisering. Dersom du allerede jobber med storskala parallellisering er nok ikke dette presentasjonen for deg, dette er heller ikke en presentasjon av googles MapReduce rammeverk. Etter en introduksjonen til parallellisering vil jeg beskrive noen konkrete problemstillinger fra BBS hvor vi har hatt behov for å parallellisere jobber. Jeg kommer til å forklare hvorfor vi trengte å splitte opp og parallelisere jobbene, hvordan vi gjorde det, samt hva vi oppnådde rent konkret ytelsesmessig.
* Intro * Noen teknikker for parallellisering * Problemstillinger knyttet til parallellisering * Eksempler fra BBS * Oppsummering * Q&A Language: Norwegian Required experience: None Expected audience: Anyone interested in parallell processing/programming, but with little or none practical experience with it.
Bjørn Nordlund jobber som sjefskonsulent på Bankenes Betalings Sentral og har tidligere jobbet som forsker på Norsk Regnesentral.

Fri programvare handler om deling, gjenbruk og samarbeid - og flere store virksomheter velger nettopp åpenhet som sin viktigste innovasjonsstrategi. Fri programvare anslås å være en viktig driver for utvikling av framtidens løsninger og ha samfunnsøkonomisk betydning. Fri programvare gir lønnsomhet for kunder, leverandører og samfunnet generelt. Fri programvare representerer allerede store businessmuligheter i Norge, og Norden kan utvikle en sterk industri knyttet til fri programvare. Hvordan skape lønnsom innovasjon for kunder og leverandører?
Om Friprogsenteret: Friprogsenteret er en pådriver for verdiskaping i offentlig sektor og næringsliv. Som uavhengig kompetansesenter er vår oppgave å skape trygghet for valg, bruk og deling av fri programvare. Dette gjør Friprogsenteret ved å spre kunnskap, bygge nettverk og tilby arenaer for deling. Friprogsenteret eies av Troms og Buskerud fylkeskommuner, Rådet for Drammensregionen, Høyskolen i Buskerud, KS og IKT-Norge.
Heidi Arnesen Austlid er direktør for Friprogsenteret. Friprogsenteret er en pådriver for verdiskaping i offentlig sektor og næringsliv. Som uavhengig kompetansesenter er vår oppgave å skape trygghet for valg, bruk og deling av fri programvare. Dette gjør Friprogsenteret ved å spre kunnskap, bygge nettverk og tilby arenaer for deling. Friprogsenteret eies av Troms og Buskerud fylkeskommuner, Rådet for Drammensregionen, Høyskolen i Buskerud, KS og IKT-Norge. Heidi Arnesen Austlid har tidligere vært prosjektleder i bransjeorganisasjonen IKT-Norge og seniorrådgiver i Kunnskapsdepartementet. Hun har arbeidet i en årrekke med IKT policy/strategi og har ledet en rekke større prosjekter.

Utdanning og kompetanseheving er en kontinuerlig prosess, kanskje mer i IT bransjen enn i noen annen bransje. Nettopp derfor er det så viktig at kunnskapen formidles på en slik måte at alle har de beste mulige forutsetninger for å lykkes med å lære. Ulike roller og bakgrunn er med på å skape et komplekst bilde med lærende og lærere. Gjennom foredraget trekkes det paralleller mellom kunnskapsformidling internt i bedrifter, eksternt til kunder og til Bachelor studenter. Det pekes på utfordringer og muligheter knyttet til kunnskapsformidling og hva slags lærdom man kan ta med seg fra de ulike vinklingene. Man går også i dybden på den forskningsbaserte undervisningen som er et påkrevd fundament for alle høgskoler i Norge i dag og ser hvordan forskningsbasert opplæring kan være med på å gi kunnskapsøkning i bedrifter en ny dimensjon. Praktiske teknikker presenteres for å gi tilhørerne et konkret ”produkt” å ta med seg tilbake til egen hverdag. Gjennom presentasjonen settes det fokus på teknikker som forskningsbasert undervisning og hva det vil si både å gjennomføre dette, men også hva man får ut av det. I tillegg vies det blant annet tid til å se på prosjektbasert læring og prinsipper rundt scaffolding (stillasbygging). Norges Informasjonsteknologiske Høgskole (NITH) utdanner Bachelor studenter innen informasjonsteknologi og driver med forskning innen flere områder blant annet for å gi grunnlag for innovative og aktuelle utdanninger. NITH er den eneste høgskolen i Norge som har spesialisering på JEE5 og EJB 3.0 for sine programmeringsstudenter. I Mesan AS er det daglige utfordringer knyttet til kompetanseoverføring til kunder og andre eksterne aktører i prosjekter. Formidling av kunnskap er en av suksessfaktorene både for å kunne ha dynamiske, fungerende team og likedan for at man skal kunne ha en inkluderende dialog med kunde.
* Introduksjon Mesan og NITH * Formidling av kunnskap * Forskningsbasert kunnskap * Utfordringer ved kunnskapsformidling og opplæring * 3 ”best practices”, Forskningsbasert undervisning, Scaffolding og Prosjektbasert tilegnelse av kompetanse * Q & A
Tor-Morten Grønli er for tiden PhD stipendiat ved Brunel University, U.K og foreleser i programmering ved NITH. I tillegg arbeider han som Systemkonsulent hos Mesan AS. Gjennom forskning, undervisning og konsulentarbeid kommer han daglig i kontakt med varierte kompetanserelaterte problemstillinger innen Java, mobile og distribuerte systemer

Thomas J. Watson (sjef for IBM ) skal ha sagt: "I think there is a world market for maybe five computers”. I tiår har folk ledd av dette utsagnet. Amazon lanserte i 2006 en løsning for ”Elastic Compute Cloud (EC2)”, dvs. virtuelle maskiner til leie. Fortsetter utviklingen med stadig mer bruk av EC2 er det ikke sikkert at Watson tok så feil…
Mange løsninger basert på moderne Java-arkitektur har behov for å lage skalere ytelse takt med at behovet vokser. Dersom man har et høy ytelseskrav (100 eller 1.000 vis av transaksjoner pr. sekund) krever dette avansert og kostbar infrastruktur med mange servere og gjerne eget lagringsnett (SAN). Som Java utvikler gir dette en utfordring i forhold til hvordan man skal få utviklet og testet en slik applikasjon. Hvordan vet jeg at valgt arkitektur skalerer utover et par testservere? Hvordan vet jeg at løsningen skalerer i produksjonsmiljø over tid når volumene vokser? Dette foredraget gir et praktisk eksempel på hvordan man kan bruke Amazon EC2 som skalerbar infrastruktur for en Java Servlet basert applikasjon. Foredraget forutsetter ingen forkunnskap om EC2 og vil gi en kort introduksjon på hva EC2 er, hvordan det virker og hva man kan bruke det til.
Morten har jobbet som utvikler og arkitekt i over 15 år på ulike plattformer (Java, Microsoft .NET, MVS/Cobol). Han har tidligere hatt arkitektrollen i utviklingsprosjekter basert på både Java/JSP/Servlet og full J2EE stack. De tre siste årene har han jobbet som arkitekt og utvikler i et Java-prosjekt basert på Java SE, Spring, Hibernate og Maven2. Etter lang og tro tjeneste i amerikanske konsulentselskaper jobber han nå som selvstendig konsulent i Udnæs Consulting. Øverst på listen over faglige interesser er Java og Ruby programmering, testdreven utvikling og metodikk for systemfornyelse.

Alternative språk til Java som kjører på VMen er i vinden om dagen. Groovy, Jython og JRuby er eksempler på populære språk som fler og fler eksperimenterer med, og som bransjen er iferd med å ta i bruk. Felles for disse språkene er at kildekoden blir kompilert til Java Bytecode før den kan eksekveres på JVMen. Målet med dette foredraget er å gi en oversikt over veien fra kildekode til kjørende bytecode. Dette foredraget starter med en rask gjennomgang av kompilatorteknikk, etterfulgt av en gjennomgang av den fullstendige implementasjonen av et enkelt eget-utviklet språk - som kjører på JVMen. Vi vil forklare hvordan vi parser kildekoden og sjekker syntaktisk korrekthet. Neste steg blir å vise hvordan man genererer Java assembly-kode, som vi deretter bruker for generering av eksekverbar bytecode. Foredraget vil være en teknisk sesjon, med live-demoer av kjernekonseptene. Vi vil runde av foredraget med en kort diskusjon av mulige motiver for å ville utvikle egne språk for VMen.
* Kompilatorteori * Fra kildekode til bytecode ** Lexing ** Bygging av AST ** Semantikk ** Generering av bytecode * Motivasjon * Oppsummering Language: Norsk Level: Intermediate/Advanced Required Experience: Deltakerne vil ha en fordel av god forståelse av JVM-plattformen. Expected Audience: Utviklere som er nysgjerrige på hvordan språkene til plattformen vi jobber på til daglig fungerer.
Trygve Laugstøl er daglig leder i Arktekk og er i tillegg utvikler, arkitekt med mange års erfaring med Java-utvikling. Han har lang erfaring med utvikling og bruk av åpen kildekode som kjerneutvikler av Maven 2 og Continuum. Trygve har jobbet lenge med utvikling av plugins som støtter opp om smidig utvikling og som rådgiver innenfor disse områdene.
Kristian Nordal jobber til daglig hos Arktekk, som Java-utvikler med hovedfokus på open source og smidig utvikling. Han er commiter på Codehaus sitt prosjekt for Maven-plugins og har i flere år deltatt i utviklingen av Maven 2-plugins, som for eksempel den første pluginen for Jetty5 og appassembler- pluginen.

Mario Aparicio og Eirik R. Larsen fra Ciber presenterer erfaringer med bruk av webrammeverket Seam og prosessmotoren jBPM. VRVask er et system utviklet av CIBER Norge for validering, manuell korrigering, og rapportering av store antall banktransaksjoner. Systemet er todelt og består av en batch-applikasjon og en web-applikasjon som kommuniserer gjennom en felles database. For utvikling av web-applikasjonen ble webrammeverket Seam valgt. Bakgrunnen for dette valget er Seams abstraksjon av request / response modellen og støtte for lange brukerinteraksjoner, conversations. Batch-delen av løsningen ble utviklet som en standard Java-applikasjon med Spring og Hibernate. Vi opplevde Seam som et godt valg av rammeverk for web-løsningen da det gav enkel integrasjon mellom webgrensesnitt, domene og database. På enkelte områder støtte vi imidlertid på utfordringer som muligens kunne vært løst bedre med andre rammeverk. I utviklingen av batch-løsningen var Spring og Hibernate velegnede rammeverk for håndtering av database og dependency-injection. Derimot fikk vi problemer med håndtering av tilstandslogikk i batch-prosessen. Kompleksiteten ble undervurdert, og vi endte opp med å lagre tilstand i databasen og håndtere all tilstandslogikk programmatisk. Løsningen ble derfor vanskelig å utvikle og vedlikeholde. Etter å ha analysert problemene i batch-løsningen så vi at en prosessmotor med fordel kunne brukes for å håndtere tilstand. Vi valgte å se på prosessverktøyet jBPM da dette er et mye utprøvd verktøy som fungerer bra i et Java-miljø. jBPM er i tillegg godt integrert med andre JBoss-produkter som Hibernate og Seam. I presentasjonen beskriver vi positive og negative erfaringer med Seam i prosjektet og drøfter når det er fornuftig å bruke dette rammeverket fremfor andre web-rammeverk. Videre presenterer vi hvilke fordeler vi kan oppnå ved å bruke jBPM, og hvilke alternativer man har når man skal innføre et slikt verktøy i tilstandsfulle applikasjoner. Til slutt vil vi fremføre eksempler fra opprinnelig løsning og løsning med jBPM.
* Introduksjon * Presentasjon av nåværende løsning ** Forklare applikasjon og arkitektur ** Forklare hvordan Seam brukes i web-applikasjonen *** Hva fungerte og hva fungerte ikke ** Forklare hvordan batch-applikasjonen er implementert *** Problemer med applikasjonen * Presentasjon av utvidelse: jBPM ** Hvilke fordeler gir et prosessverktøy som jBPM gir ** Alternative strategier ved bruk av et prosessverktøy ** Forklare hvordan jBPM integreres med applikasjonen * Eksempel: ** Vise demo av opprinnelig applikasjon ** Vise eksempler med jBPM Required experience: Grunnleggende forståelse av Java EE utvikling. Expected audience: Utviklere med interesse for enterprise- utvikling og arkitektur.
Eirik R. Larsen works as a software engineer in Ciber Norway, an Oslo-based IT consultancy. He graduated as Master of Computer Science from the Norwegian University of Science and Technology in 2005. Eiriks main focus is Java Enterprise-related technologies such as JSF, Hibernate, Seam and EJB.
Mario is an experienced developer and architect currently working with SOA and Java development at CIBER Norway. Ciber is an acknowledged consulting company, delivering mission critical solutions with strong focus on Java, and related technologies. Mario holds a Master of Computer Science from Norwegian University of Science and Technology. His main interests are SOA Governance, Process engines, Scrum and software development on the Java platform. This is the second year Mario holds a presentation at JavaZone.

Det utarbeides flere og flere selvadministrasjonsløsninger og det er et sterkt behov for å lage løsninger som gjør det mulig å tilby selvadministrasjon også får svært sensitive opplysninger, for eksempel helse opplysninger eller lignende. Data lagres ikke lenger i siloer slik som før og slik som Datatilsynet gjerne skulle ønske det. Denne presentasjonen gir deg konkrete råd om hvordan du kan lage et system som vil bli godkjent av Datatilsynet. Foredaget vil ikke bare ha hovedfokus på java men den omkringliggende infrastrukturen som er nødvendig. Utviklere vil få forståelse av hva som bør være deres ansvar i en applikasjon og hva infrastrukturen bør støtte dem med for at systemet skal håndtere alle risikoer.
* Innledning * Typisk oppsett for en SOA løsning * De mest aktuelle problemstillingene en SOA løsning står ovenfor * Hvilke krav stilles igjennom lover og forskrifter? * Datatilsynets råd og anbefalinger til løsning * Løsningsalternativ * Oppsummering Required experience Erfaring fra systemer med kompleks infrastruktur eller erfaring fra større utviklingsprosjekter Expected audience Software Architects, Senior developers
Senior konsulent i Team Identity hos Software Innovation Interesser: * Sikkerhets- og Software- arkitektur * Sikring av web applikasjoner * Hvordan riktig utviklingsprosess kan brukes i en sikkerhetssammenheng Erfaring: Flere år som utvikler og arkitekt for nettbanksikkerheten i større nordisk bank Flere års erfaring med BankID og andre PKI løsninger Sikkerhetsarkitekt i et SOA prosjekt for en stor offentlig etat som håndterer sensitive personopplysninger

Stadig flere applikasjoner finner veien til mobiltelefonen. Kundene forventer lik (eller bedre) sikkerhet på applikasjonen når den er på en mobiltelefon som når den er på en vanlig PC. Java ME er kjent for ha en svært strikt sikkerhetspolitikk med høy grad av ”sandboxing”, men er dette nok for å lage en sikker applikasjon? Hva er det egentlig som skal til for å lage en sikker applikasjon, og har Java ME det som trengs? Hva med "write once, run everywhere”? Foredraget vil gi en oversikt over hvordan man lager sikre applikasjoner i Java ME med innslag av nyttige erfaringer og fallgruver.
* Introduksjon: * Signering av MIDlet * Sikker kommunikasjon i Java ME * Sikker lagring * Spørsmål og svar
Henrik Dæhli er Software Engineer og har 3 års erfaring fra utvikling av mobile applikasjoner i Java Micro Edition. Han har ansvar for spesifikasjon og implementering av sikkerhetsprotokoller i mBricks, et software bibliotek for utvikling av applikasjoner for mobilen.

Foredraget presenterer de vanligste sårbarheter i webapplikasjoner og trekker frem noen illustrerende skrekkeksempler hentet fra sikkerhetstester av norske webapplikasjoner. Vi vil så ta for oss hvordan Java-utviklere kan unngå å gjøre de samme feilene i sine utviklingsprosjekt.
summary Foredraget presenterer de vanligste sårbarheter i webapplikasjoner og trekker frem noen illustrerende skrekkeksempler hentet fra sikkerhetstester av norske webapplikasjoner. Vi vil så ta for oss hvordan Java-utviklere kan unngå å gjøre de samme feilene i sine utviklingsprosjekt. Required experience: Erfaring med utvikling av webapplikasjoner Expected audience: Utviklere som føler de kan for lite om webapplikasjonssikkerhet
Erlend Oftedal (Bekk) Senior utvikler og leder av faggruppen for sikkerhet.
Markus Harboe (mnemonic) Avdelingsleder for profesional services. Startet javaBin i 1996/98. :-) Lang erfaring med sikkerhetstesting av webapplikasjoner.

Med lang fartstid fra store smidige prosjekter vil Thomas, Anders, Geir Magne, Kristoffer, Benjamin og Steinar dele sine erfaringer - på godt og vindt - med publikum. Først innleder de med korte lyntaler før paneldebatten bryter løs.
* 3 innledende lyntaler (10min) om smidige metoder i store prosjekter * + paneldebatt (30-40min)
Steinar Årdal is a Managing Consultant at Capgemini and Certified ScrumMasters. For the last two years he has been working on a large project in Public Sector as Solution Architect and Technical Project Manager, where he has has been responsible for introducing Scrum. Steinar has an MSc (Siv.ing) from NTNU/UCSB and has 6 years experience on various development and integration projects in Norway and UK, mainly as a Developer and Architect.
Geir Magne Trengereid is a Managing Consultant at Capgemini and Certified ScrumMasters. For the last two years he has been working on a large project in Public Sector as Solution Architect and Technical Project Manager, where he has has been responsible for introducing Scrum. Geir Magne has an MSc (Siv.ing) form NTNU and has 16 years of experience from a wide range of projects and in the later years mostly as a Technical Project Manager or Project Manager.
Kristoffer Moum is a senior developer with more than seven years of experience in developing enterprise Java. He has experience as a developer, architect, lead developer and scrum master in various projects. Also, he has done mentoring and architecture reviews and has previously held various presentations for javaBin and JavaZone. Kristoffer regularly works as a course instructor with Spring and Maven.
Sommer holds an MBA from Agder College with specialization in internationalisation and project management. He is Ph.D candidate at NTNU, Institute for Industrial Economics and Technology Management in the area of business development. Sommer has over 10 years experience as project manager and consultant from IT-projects in public and private sector. He is certified Scrum Practitioner and certified Scrum master with experience from several project methodologies such as PMI, ValueSAP, Stepping Up, and agile/lean mangement.
Anders Magnus har erfaring fra flere utviklingsprosjekter i offentlig sektor, og har det siste 1,5 året jobbet som utvikler og sertifisert ScrumMaster i NAVs pensjonsprosjekt. Han er engasjert i praktisk implementering av smidig metodikk og bruk av smidige utviklingsverktøy.
Thomas har flere års erfaring fra utviklingsprosjekter i offentlig sektor, og har det siste 1,5 året jobbet som utvikler og sertifisert ScrumMaster i NAVs pensjonsprosjekt. Han er interessert i smidig utvikling, både når det gjelder teknologi, metodikk og sammenhengen mellom disse.

I sammenheng med utbygging av et kraftanlegg i Amazonas ble en indianer fra lokalbefolkningen trukket inn som vitne i rettsaken og stilt ovenfor den klassiske eden; "Do you swear to tell the truth, the whole truth and nothing but the truth so help you God?". Han svarer; "No, I can only tell you what I know". Vi som jobber med teknologi er alle meningsprodusenter idet vi lager en slags virkelighet som brukerne må forholde seg til. Vi har derfor på mange måter stor innflytelse i det å konstruere en virkelighet, en sannhet som mange brukere ikke setter spørsmålstegn ved. All teknologi handler mye om klassifikasjon av objekter og relasjoner mellom objekter, kategorier etc. Klassifikasjon vil si å dele inn objekter, personer, dyr eller andre fenomener etter kategorier eller typer. Et klassifikasjonssystem er en type kunnskap og kunnskap vil alltid ha et ideologisk aspekt. Men hvor bevisste er vi dette ansvaret? Gjennom en kort introduksjon av de tidligste sosialantropologiske studier av matklassifikasjon og totempæler vil jeg forsøke å vise at dagens semantiske web på mange måter er i tråd med disse tidligste fagteorienes hovedtanker, som for eksempel det å se det enkelte system som avgrensede enheter, som kan studeres alene. Avleggere fra tidlige forsøk på å se kunnskap i lys av klassifikasjonssystemer skinner i dag gjennom hos flere teoretiske tilnærminger som det til stadighet refereres til og jeg vil argumentere for at det er dags for å trekke inn verktøy koblet mot en metodikk som både er i tråd med tida vi lever i og som løfter blikket fra studier av avgrensende enheter og som retter blikket mer mot brukerens egenartede og unike forståelse av det samme fenomenet. Jeg er opptatt av å formidle tungt stoff på enkle måter – og vil bruke konkrete eksempler for å få publikum med på det som kan kalles en faghistorisk charterreise med konkrete eksempler hele veien for å illustrere poengene. De fleste vil nok sitte igjen med noen aha‐opplevelser samt få ett innblikk i en fagverden man har mye til felles med til tross for at man sjelden kobler fag som teknologi og antropologi sammen. Jeg vil anta at folk vil gjøre seg en og annen tanke – og trekke litt på smilebåndet!
* Innledning med tanker fra klassifikasjon av tidlig kannibalismestudie knyttet mot stekt/kokt mat og binære opposisjoner * Gjøre kort greie for hovedteorier innenfor klassifikasjon og kategorisering som vi kan dra/drar nytte av i teknologisk øyesmed. * Representasjon av virkelighet – eksempler på innhold vi tar for gitt å representere ’sannhet’ * Makt: definisjon, utvalg, navngivning, begreper, språk. * Subjektive fortellergrep * Søken etter det autentiske og egne funn om at innhold oppleves objektivt gjennom subjektive fortellergrep pga identifikasjon. Trekke ut noen gjennomgående trekk ved forståelse som identifikasjon, nær‐ og likhet og assosiasjon i menneskets tenkning. Lydklipp fra egne informanter som eksempel. Trekke tråden til eksempler på subjektive. fortellergrep formidlet gjennom www (twitter, facebook) og TV (reality, nyheter) * Avslutte med å presentere tall for mengden av elektronisk informasjon som distribueres på verdensbasis og (u)muligheten for deltakelse i den elektroniske verden på den ene siden og www som demokratiserende og deltakende på kryss av landegrenser på den andre.
Lene Pettersen arbeider som informasjonsarkitekt, usability‐ og interaksjonsdesigner hos Bouvet. Hun er utdannet sosialantropolog innenfor området kognitiv antropologi og holder jevnlig fordrag om menneskets klassifikasjonsprosesser, tenkning og representasjoner av virkeligheter (javaBin, WebSphere User group, BouvetOne, mfl) og har tidligere blant annet arbeidet som foreleser i/ansvarlig for etnografisk film ved Universitet i Oslo. Hun har også studert film‐ og medievitenskap ved Universitetet i København og hypermedia ved Universitetet i Oslo.

Ved hjelp av rollespill vil Rasmus og Vidar dele sine erfaringer fra et smidig prosjekt. Sesjonen kommer til å bli delt i to: * I første del vil Rasmus og Vidar kronologisk fremføre prosjektets historie fra unnfangelse til realisering. De kommer til å demonstrere teknikker som er blitt brukt og hvordan disse passer inn i et smidig tankesett. * Tilhørerne oppfordres til å notere seg emner som ønskes diskutert under del 1. Dette kan være emner man lurer på, ønsker videre utdypet, er skeptiske til eller forslag til andre teknikker. I del 2 diskuterer vi disse temaene i plenum. Noen stikkord: Kommunikasjon, brukerhistorier, estimering, prioritering, risikohåndtering, leveranseplanlegging, retrospektiv med mer.
Rasmus er konsulent og utvikler i Know IT Objectnet og har jobbet med smidig prosjektstyring i flere prosjekter de siste årene, noe han også har holdt innlegg om i regi av Javabin. Hans hovedbudskap er at man ikke skal binde seg til en arbeidsmetode, men forsøke seg fram med ulike teknikker og verktøy. Ved å ha et kritisk blikk til hva som virker og ikke virker kan man stadig forbedre måten man jobber på.
Vidar har bosatt seg i sørlandsidyllen Risør og er prosjektleder og utvikler i Know IT Objectnet - Arendal. Han har 13års erfaring innen systemutvikling og har hatt ledende roller innenfor en rekke prosjekter. Han trives best med 'glad-programmering' i team som sammarbeider tett med engasjerte brukere som gir ris og ros.

Alle er enige om at dokumentasjon i systemutviklingsprosjekter er nødvendig. De fleste synes det er et kjedelig arbeid og vil heller gjøre andre ting, som f.eks. programmering. Mange skriver lange dokumenter som blir liggende bortgjemt i skuffer og kott uten å bli lest. Kanskje heldigvis, siden dokumentene ofte blir utdaterte over tid og dermed blir både ganske verdiløse og direkte skadelige. Dokumentasjonsarbeid er tradisjonelt både kostnadskrevende og lite lystbetont arbeid. Hvilken type dokumentasjon er den viktigste? Hvordan kan vi gjøre det både enklere, billigere og mer motiverende - og ikke minst, mer anvendelig? Dette foredraget gir noen refleksjoner rundt temaet med konkrete eksempler på hvordan dokumentasjonen kan gjøres mer levende gjennom en wiki integrert med andre utbredte støtteverktøy som Subversion og Maven. Vi ser også litt på modellbasert dokumentasjon med UML, hvordan krav beskrives i brukstilfellemodeller, og hvordan arkitektur kan dokumenteres.
* Presentasjon av meg selv og foredraget * Litt om hva trenger vi å dokumentere i systemutviklingsprosjekter, og nytteverdien av dette * Noen erfaringer med wiki-basert doumentasjon * Noen praktiske eksempler på wiki-basert dokumentasjonsstruktur fra et prosjektteam, bl.a. for krav og arkitektur * Noen gode råd for sunn dokumentasjon * Spørsmål og kommentarer Required experience None. However, some experience with participating in software development projects is helpful to understand the real-life challenges in this part of the work. Who should attend this session? Project managers, architects and other participants in software development projects How will the participants benefit from attending? Get some concrete examples of how to manage, communicate and maintain vital doumentation in software development projects. Get experience reports and reflections around the theme.
Ellen D. Varsi er utdannet fra Høgskolen i Østfold og Universitetet i Oslo, og er idag ansatt som konsulent i javaavdelingen hos Bouvet ASA. Hun har arbeidet i IT-bransjen siden 1988, fortrinnsvis med objekt-orientert systemutvikling på ulike teknologiplattformer. Hun har arbeidet både som utvikler, rådgiver og prosjektleder i både større og mindre prosjekter, og hun har i perioder hatt spesielt fokus på metodikk, kravhåndtering, arkitektur og objektorientert analyse og design med UML. Hun programmerer fremdeles og helst med java.

Mange smidige prosjekter opplever problemer med å holde oversikt over et stadig voksende antall brukerhistorier. Dette medfører ofte at prioritering og planlegging blir vanskelig og frustrerende, noe som kan føre til at vi tar feil beslutninger ift hva som bør inngå i hver leveranse. User story mapping er en enkel måte å samle og organisere brukerhistorier på. Teknikken fokuserer på hva brukerne forsøker å oppnå og hjelper oss å forstå hvordan vi kan skape leveranser som gir umiddelbar effekt. Brukerhistoriekart er et kraftig kommunikasjonsverktøy som sprer forståelse for hvilket problem som løses, hvordan og i hvilken rekkefølge.
* Intro * Et vanlig problem i (smidige) prosjekter * Tre strategier for å håndtere problemet * Realisering av strategiene med user story mapping * Oppsummering * Q&A FORKUNNSKAPER Ingen PUBLIKUM Alle som jobber med eller i smidige team
Nils Christian trives best når han kan være med å skape produkter som gleder både brukerne og sponsorene. Han har lang erfaring med smidig systemutvikling som programmerer, arkitekt, prosjektleder og coach, blant annet fra ThoughtWorks og som CTO i Know IT Objectnet. I dag er Nils Christian konsulent i sitt eget firma, Wasteless. Nils Christian holder ofte foredrag og kurs for bedrifter og brukerforeninger, og han har presentert på konferanser som Agile, XP Day London, SPA, JavaZone og DND Software. Nils Christian er aktiv i det norske smidig-miljøet og er en av entusiastene bak Smidig-konferansen.

Spekulative markeder (slik som aksjemarkedet og oddsen) har i mange tilfeller vist seg å være bedre enn eksperter når det gjelder å forutsi hendelser. Dette har vært tilfelle innen en rekke områder - innen alt fra estimering av oljepris fem år frem i tid til å tippe hvem som vinner årets cupfinale. I dette foredraget vil vi gå gjennom teori og praksis for å vise hvordan slike marked fungerer, og vi vil vise hvordan teknikken kan brukes til estimering i systemutviklingsprosjekter. Foredraget er basert på aktuell forskning og våre egne erfaringer fra et systemutviklingsprosjekt hvor vi innførte denne teknikken.
* Introduksjon, 5 min * Hvordan virker et Prediction Market (PM), 10 min * PM som teknikk for å estimere systemutvikling, 20 min * Erfaringer fra innføring av PM i et prosjekt, 15 min Required experience: None Expected audience: Anyone interested in software cost estimation
Frode currently works as a consultant at Know IT Objectnet AS. He has been working as a developer, architect, advisor and project manager in defense, oil & energy, telecom and public sector since 1995. Frode has a wide range of professional interests, but enjoys in particular working with the customer to identify their needs and creating the good solution.
Stein has more than 10 years’ industry experience as software developer and solution architect. His professional interests cover many areas of software development, but are particularly related to the interaction between clients and vendors. He received a phd from UiO in 2006, and is a member of the estimation project at Simula Research Laboratory. As a co-founder of Wasteless, Stein work closely with their industrial partners. He frequently talks at international conferences, give courses, and is the author of several papers published in international journals and magazines. Topics include expert estimation, process improvement and evaluation of software technology.

Deltakerne på denne sesjonen vil få innsikt i praksiser for effektivt å kommunisere og prioritere krav, estimere kostnader og gjennomføre utviklingsprosjekter. Ettersom dette er temaer uten fasitsvar legges det opp til mye diskusjon og interaksjon. Programvareprosjekter mislykkes ofte med å levere lovede resultater, og kostnadsoverskridelser er en stor og hyppig utfordring. Mangelfull kravhåndtering er ofte en underliggende årsak til disse utfordringene. Det finnes imidlertid en rekke indikasjoner på at gode samarbeidspraksiser kan redusere omfanget på problemet. Det har vært anslått at samarbeid og kommunikasjon utgjør opptil 70% av den totale tidsbruken i programvareprosjekter, og å anbefale en høy andel av samarbeid og kundeinvolvering er derfor ikke noe nytt. Utfordringen er imidlertid å identifisere hva som utgjør et godt samarbeid, og hvordan dette kan oppnås. Mange utviklingsorganisasjoner benytter seg i økende grad av iterative og inkrementelle prosesser, for eksempel Scrum. Imidlertid har også de smidige prosessene, og andre prosesser slik som RUP, mangler når det gjelder å involvere sentrale aktører som kunder, interaksjonseksperter og brukertestere. De iterative og inkrementelle prosessene er unektelig bedre utrustet enn de sekvensielle prosessene (fossefall) når det kommer til å håndtere disse behovene, men de er samtidig også langt mer innstilt på å tilfredsstille behovene til utviklingsteamet. Denne sesjonen skisserer samarbeidspraksiser vi mener øker sjansen for verdiskapning i utviklingsprosjekter. Hovedfokuset er praksiser for å: * Definere en prosess som forbedrer prosjektgjennomføring * Kommunisere og samarbeide om kravhåndtering og forretningsprioritering * Samarbeide om estimering og planlegging Et overordnet prinsipp for diskusjonen vil være å skissere et rammeverk for kravhåndtering som illustreres gjennom en kommunikasjonspyramide. Denne pyramiden skiller mellom fem generiske nivåer for kommunikasjon om krav, som er nyttig i de fleste prosjekter. Disse er: * Forretningsmål * Overordnede krav * Detaljerte krav (f.eks. brukerhistorier) * Utviklingsoppgaver * Kildekode (f.eks. konkrete funksjoner) For hvert nivå presenterer vi en oversikt over hvilke roller som typisk bør være involvert i kommunikasjon og samarbeid. Rollene som diskuteres inkluderer sluttbrukere, kunder, interaksjonsdesignere, utviklere, testere og prosjektledere. Det blir også presentert erfaringer fra et pågående forskning- og utviklingsprosjekt innenfor området.
* Introduksjon – samarbeid og kommunikasjon i utviklingsprosjekter * Effektive praksiser for å definere en prosjektprosess * Effektive praksiser for kravhåndtering og forretningsprioritering * Effektive praksiser for å samarbeide om estimering og planlegging * Hvordan binde det sammen – praktiske erfaringer * Diskusjon Required Experience Deltakere bør ha erfaring fra programvareprosjekter, enten som del av utviklingsteam, kunde, forsker, student eller lignende. Expected Audience Hovedmålgruppe er ledere, prosjektledere, kunderepresentanter, utviklingsteam og lignende. Vi ønsker deltakelse fra kunde og utviklingsside enten man er involvert i intern produktutvikling, skreddersøm eller produktutvikling for massemarkedet.
Dr. Kjetil Moløkken-Østvold is a Senior Partner at Conceptos IT Development (www.conceptos.no). He has previous experience as Assistant Director and Postdoctoral researcher at Simula Research Laboratory, and as founder of Project Economics. Moløkken-Østvold received his Masters degree (Sivilingeniør) in Informatics from the University of Oslo in June 2002. In December 2004 he received the PhD-degree in Informatics from the University of Oslo and Simula Research Laboratory. He has been the author and co-author of over 2o scientific papers published internationally. Topics include cost estimation, agile software development, project management, public software projects, collaboration and communication, group processes and research ethics. An updated list of publications can be found at http://simula.no/people/kjetilmo/bibliography. In addition to these publications, Moløkken-Østvold has extensive experience as a speaker. He has presented popularized talks for various parties including Abelia, Sintef, ICT-Norway, Steria and Government department officials, as well as on venues such as Agile 2007, Agile 2008, JavaZone 2006 and Smidig 2007.
Hans Gallis is the manager of Symphonical AS (www.symphonical.com), a company he founded in 2005. Symphonical is developing a highly flexible web based platform for collaboration and communication within teams and projects. He has previous experience as a researcher at Simula Research Laboratory and various experiences as an IT consultant. Gallis received his Masters degree in informatics from the University of Oslo in February 2002. He has been the author and co-author of several scientific papers published internationally mainly within the field of Software Engineering and agile software development. An updated list of publications can be found at www.simula.no/people/hansga/bibliography. In addition to these publications, Gallis has presented at several national and international conferences, seminars as well as company-internal and local meetups.

I HTTP-protokollen er det i utgangpunktet alltid klienten som initierer forespørsler. Men hva gjør du hvis en hendelse oppstår på serveren og du trenger å informere en eller mange klienter om dette så fort som mulig?
En vanlig løsning er å spørre serveren med jevne mellomrom ved å bruke Ajax. Slik polling gir dårlig responstid og fører til et unødvendig høyt antall forspørsler. Ved å trikse litt med HTTP kan vi imidlertid holde en forespørsel åpen over lang tid og la serveren sende data når det passer. Denne asynkrone push-arkitekturen kalles gjerne "Comet". Dette foredraget forklarer teknologien bak Comet, de nye mulighetene den tilbyr og utfordringene vi får på kjøpet. Foredraget tar utgangspunkt i servletcontaineren Jetty og Javascript-biblioteket Dojo. Sammen gjør disse det svært enkelt å utvikle Comet-baserte applikasjoner. Vi viser hvordan man kommer i gang med Comet og hvordan vi ved hjelp av Jetty og Dojo kan lage en webbasert chatapplikasjon på få minutter. Vi ser på flere eksempler der Comet er i produksjonskode og diskuterer ytelse og skalerbarhet i Jetty sin implementasjon. Vi viser også hvordan Comet støttes i forslaget til den kommende versjon 3.0 av Java Servlets-spesifikasjonen. * Why Comet? ** Increasing need for low latency, "always current" services ** Limitations of Polling, Ajax * What is Comet? ** Comet transports, long poll vs. streaming ** Comet is HTTP ** Asynchronuous IO (it's hard) ** Bayeux protocol * Some Comet examples (Screensshots / live demos / screencasts) ** SVNSearch real-time commits ** live.chess.com ** GMail ** Distributed Paint clone implemented with Javascript and Comet. * About Jetty ** Small, fast, testable, embeddable, and enjoyable open source servlet container. * About Dojo ** Javascript toolkit ** DOM manipulation, Effects, Widgets ** Plugin based ** Client side of Bayeux protocol implemented as a Dojo plugin * Chat example with Jetty and Dojo. (probably a mix of live coding and slides) ** Create Maven project ** Add Jetty, Dojo, Comet dependencies ** Add ContinuationCometdServlet to web.xml ** Adding a main method for Jetty with a SelectChannelConnector ** Creating a simple chat application with Dojo * Comet performance and scalability ** Greg's numbers? ** 20.000 concurrent users ** Comparison with polling * Comet limitations ** Container support ** OS/Container tuning (file descriptors, ) ** Firewalls ** Proxying (Apache mod_proxy?) * The future ** Servlet 3.0 ** Bayeux on Tomcat, Glassfish Required experience: Deltakere bør ha kjennskap til web-progammering i Java og ha grunnleggende kunnskap om HTTP. Erfaring med Javascript er en fordel.
Eirik Bjørsnøs er en uavhengig konsulent og gründer som holder til i Trondheim. Mye av tiden hans går med til produktutvikling og oppdrag, men han setter også av rikelig med tid til å prøve ut nye teknologier. Spesielt gøy synes han det er å finne nye måter å gjøre komplekse ting enklere på. Eirik er hovedutvikler for Maven-pluginen for OS X-applikasjoner på Codehaus, han har laget verdens raskeste søkemotor for versjonskontoll og skriver av og til på bloggen sin simplericity.com

Åpne standarder, felles offentlig IT-arkitektur og fri programvare er begreper som du etter hvert har blitt en del av ordforrådet til regjeringen. Politisk rådgiver i Fornyings- og administrasjonsdepartementet Jørund Leknes vil i foredraget gå gjennom sentrale deler av regjeringens IT-politikk, forklare hvorfor valg av programvare nå står høyt på den IT-politiske agendaen og hvordan du som utvikler kan lage løsninger som forholder seg til dette.
Jørund Berg Leknes, født 24. januar 1982, er en norsk politiker som representerer SV. For tiden er han politisk rådgiver for Heidi Grande Røys, som er statsråd i Fornyings- og administrasjonsdepartementet. Til tross for sin unge alder, har han allerede betydelig erfaring fra rikspolitikken. Han ble valgt inn på Stortinget som vararepresentant for SV fra Sør-Trøndelag i perioden 2001-2005 og igjen i perioden 2005-2009. Han møtte i Stortingets finanskomité første gang som 20-åring (som vara for Øystein Djupedal). Selv om han ikke vil puttes i bås som sektorpolitiker, er det innenfor IKT-politikk han har bemerket seg sterkest. Jørund Leknes har bl.a stilt flere spørsmål om åpen kildekode og fri programvare i Stortingets spørretime, og han har også ledet IKT-utvalget i SV som skisserte tiltak for å gjøre Norge til en ledende IKT-nasjon. Grunnen til fokuset på IKT, er at han er en av få SV-politikere som behersker dette fagfeltet[trenger referanse]. Han har programmert siden han var 14 år, og behersker bl.a programmeringsspråkene C, Java og C++. Leknes har havnet blant de ti beste i NM i programmering fire ganger.

Dette er en erfaringsrapport fra MATS-prosjektet hos Mattilsynet, der Computas implementerer og integrerer en kartklient i webklienten og SWING-klienten. Rammebetingelsene for prosjektet var at kartserveren skulle være Java-basert og åpen kilde, slik at det ville være mulig å gjøre tilpasninger dersom det skulle være nødvendig. Videre var bare rene serverløsninger relevant siden klienten kom til å være egenutviklet. Valgmulighetene var derfor veldig begrenset; i praksis kun GeoServer. Selve klienten bruker OpenLayers, et åpen kilde JavaScript-bibliotek som støtter de viktigste protokollene. Det ble vurdert å utvikle en egen kartklient i SWING, men dette ble forkastet på grunn av begrensningene for minneforbruk i kjøremiljøet. Dette førte på sin tur til et behov for å kunne sende kartdata fra web-basert kartklient til SWING-klient, som ble løst ved å la kartklienten gjøre et HTTP-kall til SWING-klienten via en skjult IFRAME. Dermed var det heller ikke lenger nødvendig å bruke WFS-T- protokollen for å kjøre transaksjoner med geodataene direkte mellom klient og server, slik at vi kunne begrense løsningen til WMS. Det er mulig at det senere vil dukke opp krav som gjør det likevel nødvendig å utvide løsningen med støtte for WFS-T, men dette vil ikke være et stort problem siden også WFS-T støttes av GeoServer. Til slutt noen ord om plasseringen av GeoServer i vår arkitektur. I og med at den står ved siden av integrasjonsplattformen og er koblet direkte mot databasen bryter den med alle SOA-prinsipper, men alternativene viste seg å ikke fungere. En mulighet hadde vært å sette GeoServer foran integrasjonsplattformen, men dette hadde ført til økt risiko og mye merarbeid i prosjektet siden GeoServer er bygget opp slik at den forventer direkte tilgang til databasen. Å inkludere GeoServer i integrasjonsplattformen var heller ikke en god løsning da dette hadde ført til ekstra arbeid for å kunne deploye GeoServer i plattformen.
* Kort innledning 5 minutter * Behovene og bruksområdene for kart i MATS-prosjektet * Hva er OpenLayers, GeoServer og WMS? * Utfordringer og erfaringer i MATS rundt kartklienten * En liten demo Required Experience * Basiskunnskap om Java, webprogrammering og SWING. * Basiskunnskap om arkitektur Expected Audience * Utviklere og arkitekter som ønsker å implementere en kartløsning med web-basert kartklient integrert mot en eksisterende webklient og/eller java-applikasjon
Filip van Laenen har vært ansatt i Computas i 11 år og har vært involvert i Java-prosjekter stort sett hele tiden. For tiden er han teknisk prosjektleder for MATS-prosjektet hos Mattilsynet og leder for Computas’ fagnettverk for Software Engineering.
Anders Sandberg Nordbø har vært ansatt i Computas i 1 år, og har vært en del av MATS-prosjektet siden han startet. Han hadde ansvaret for kartklienten i MATS fra planleggingen til implementasjonen.

Kansellert pga sykdom Datamaskinprogrammer regnes som litterære verk og vernes etter åndsverkloven. Det betyr i utgangspunktet at de reguleres av de samme bestemmelsene som f eks norsk lyrikk. Hvordan har det seg egentlig at dette ble resultatet – og er det lurt?
I et program er funksjoner viktig, mens formen kan være sentral i poesi – og opphavsretten verner bare uttrykket. Opphavsmannen får en enerett til å utnytte verket – både poesi og program. Men til gjengjeld skal hvem som helst kunne lese lyrikken, skjønne den, bli klokere og dikte videre selv. Et program i objektkode lar seg i praksis ikke lese – er dette en slags bristende forutsetning for å gi det vern? Noen av disse spørsmålene besvares, samtidig som det gis en kort innføring i det opphavsrettslige vernet av datamaskinprogrammer, overgang av rettigheter i arbeids- og oppdragsforhold, og forholdet til patentering av programmer. Det forutsettes ingen forkunnskaper, så foredraget innledes med en presentasjon av opphavsmann, åndsverk og enerettene til å råde over programmet.
Jon Bing (født Tønsberg, Norge 1944), cand jur (Oslo) 1969, dr juris (Oslo) 1982, professor, Senter for rettsinformatikk, Det juridiske fakultet, Universitetet i Oslo. Dr juris hon causae (Stockholm 1997 og København 1998), Computer Law Pioneer Award (San Diego 1993), Visiting Professor, King's College (London) 1998-2000. Telenor nordiske forskningspris for “information technology and society” 2001, den nordiske juristprisen (2002), Rosing ærespris fra Den norske dataforening (2006). Ridder av første klasse, St Olavs orden (1999). Doktoravhandling om rettslige informasjonssystemer og kommunikasjonsprosesser. Andre forskningsområder omfatter personvern, immaterialrett, interlegal rett og styring av Internettet, alt i forbindelse med informasjonsteknologi. Mange publikasjoner, nasjonalt og internasjonalt. Medlem av Det Norske Vitenskaps-Akademi og Svenska Ingeniörvetenskapliga Akademien. Tidligere verv omfatter Council of Europe Committee on Legal Data Processing (leder), Norsk filmråd (leder), Norsk kulturråd (leder), National Organising Committee World Library and Information Congress 2005 Oslo (leder), Hovedstyret i Norges Forskningsråd (medlem) og Board of Governors, European Cultural Foundation (medlem). Aktuelle verv omfatter Personvernnemnda (leder), Programkomiteen for Samfunnssikkerhet og risiko (SAMRISK), Norges forskningsråd (leder), og Generic Name Support Organization (GNSO), Internet Corporation For Assigned Names and Numbers (ICANN) (medlem). Skjønnlitterær debut 1967 (med Tor Åge Bringsværd), har siden utgitt romaner, noveller, essays, oversettelser, dramatikk for scene, radio og fjernsyn, libretti for operaer, redigert antologier mv. Priser for beste ungdomsroman (1975), Rivertonprisen (1979), beste tegneserie (1980), Skolebibliotekarforeningens pris (1985), NKS undervisningspris for en fjernsynsserie om hverdagsjus (1990), Brages ærespris for bidrag til norsk litteratur (2001), Bibliotekforeningens ærespris (2004).

Etter mange tiår med programvareutvikling skulle man tro at de fleste applikasjoner håndterer feil på en god måte. I realiteten blir exceptions slukt, kastet på nytt, innpakket, ignorert og tilfeldig logget - om de i det hele tatt er tenkt på. Denne sesjonen viser tilnærminger som fungerer og noen tommelfingerregler for feilhåndtering, samt fallgruver og grusomme eksempler. Vi diskuterer også checked exceptions - et eksperiment i Java - og forklarer hvorfor de bør unngås.
* Feilhåndtering generelt og i Java spesielt * Overordnede tilnærminger ** Distribuert - Lettvekts exception-hierarki ** Sentralisert - Få felles exception-typer ** Exception-typer - Applikasjonsfeil og systemfeil * Feilhåndtering er viktigere enn feilretting * Checked exceptions er skadelig og bør unngås * "Sånn, ikke sånn" ** Bruk eksisterende exceptions ** Ikke sluk exceptions ** Fallgruver med try-catch-finally ** Deklarasjon av exceptions i metodesignaturen ** Russisk kone-exceptions ** Håndtering av stacktrace ** Unngå både logging og kasting ** Logging for overvåkning, drift og forvaltning ** Exception kontekst, feilkoder og instans-ID ** Navngiving, moduler og pakking ** Testing av exceptions Required experience Only Java programming knowledge is required. Expected audience This will be a techy session targeting developers and architects.
Trond Arve Wasskog is a developer and CTO at Bekk Consulting. He has been working with Java and Java EE application development for more than ten years, focusing on agile software development, testing and maintainability.

Begrepet "smidig" har blitt så hypet de siste årene at de faktiske verdiene i begrepet er i ferd med å bli utvannet. "Smidig" er tatt i bruk mange steder, men mange har opplevd å ikke få den ønskede effekten. I dette foredraget vil vi ikke ha noen grunnleggende gjennomgang av smidig prosjektledelse, men heller dykke dypere ned i utvalgte aspekter hvor vi ofte har sett eller begått feil, eller har sett stort forbedringspotensiale. Foredraget vil i stor grad ta utgangspunkt i eksempler fra forskjellige prosjekter vi har vært involvert i de siste årene, og belyse praktiske aspekter som vi har sett folk sliter med. I tillegg vil vi se på en grunn til å kjøre smidig som ofte ikke er godt nok belyst: *Den økonomiske*. Trond har bakgrunn som siviløkonom. Christian har bakgrunn som utvikler. Begge har endt opp som prosjektledere med sterkt fokus på smidig prosjektmetodikk og ledelsesfilosofi. Til sammen har de ca 20 års erfaring fra bransjen, men de gjør fortsatt feil, lærer fortsatt nye ting og ser stadig forbedringspotensialer.
* Intro - Bakgrunn * Problemområder og forbedringspotensialer ** Cargo cult ** Synlighet ** Hindringer fungerer som strikk - tilbake til gamle synder ** Smidige team: Felles mål - hver vår båt? ** Skape felles forståelse ** "Hvordan kommunisere med teknologer" * Prosjektøkonomi ** Hvorfor smidig lønner seg ** Økonomisjefens case for smidig ** Hva koster egentlig en forsinkelse * Oppsummering * Q & A Required experience Grunnleggende kunnskap om smidig prosjektmetodikk er en forutsetning. Praktisk erfaring er en fordel. Expected audience Prosjektledere og utviklere vil få en dypere forståelse, inspirasjon og konkrete tips til å forbedre prosessene de er en del av. Kunder og prosjektinteressenter vil få større forståelse av hvorfor de bør kjøre smidig, og konkrete innspill til hva de bør fokusere på.
Christian er godt over middels interessert i kommunikasjon og prosessforberinger. Han har i flere år jobbet i konsulentbransjen som prosjektleder og utvikler før det. Han har lenge hatt sterkt fokus på smidige metoder og ledelsesfilosofi, testing og kvalitet i prosjekter. Han er styremedlem i Norsk Forum for Smidig Systemutvikling og en av arrangørene av Smidig200X-konferansene.
Trond er siviløkonom av utdannelse, utvikler av hjerte, prosjektleder av yrke. Han har alltid vært opptatt av å få til gode ting i team, og fra XP dukket opp i 1999 har han konsentrert seg om smidige metoder som prosjektstyringsfilosofi. Han er styremedlem i Norsk Forum for Smidig Systemutvikling, styremedlem i DNDs faggruppe for Effektiv Programvareutvikling, og en av grunnleggerne av Steria Smidig Forum.

Uten læring av egen og andres erfaring er det vanskelig å bli særlig god i programmering, prosjektledelse, estimering, kommunikasjon med kunde og andre viktige gjøremål. Gjennom flere empiriske studier har vi funnet vi at både "on-the-job" læring og tradisjonelle prosjektgjennomganger (post-mortem reviews, retrospectives, erfaringsrapportering m.m.) i mange sammenhenger har store svakheter og ofte gir feillæring og overreaksjoner i stedet for økt innsikt og bedre prestasjoner. Ønske om å lære noe fra en smertefull erfaring er for eksempel ofte større enn mulighetene og evnene, og det er derfor også viktig å vite når man ikke bør prøve å lære av erfaring! I denne presentasjonen går vi gjennom en del feilkilder og hvordan disse kan unngås for å forbedre evnen til læring av erfaring i systemutviklings. Avslutningsvis avholdes det 3. norgesmesterskapet i estimering (Tidligere vinnere er: Sindre Mehus og Tore Engvig). Som tidligere vil finalistene i estimerings-NM kunne glede seg over gavekort fra en av byens bedre restauranter.
* En interaktiv oppgave som illustrerer hvor lett man feillærer i en systemutviklingskontekst. * Evidensbaserte anbefalinger for å bli bedre til å lære av erfaring. Presentasjonen vil bygge på flere av våre egne studier om læring og på kjente læringsskjevheter (som å se mønster der ingen finnes, å vektlegge direkte men overse "systemtiske" årsaker, forskjell i type årsaksanalyse som gjøres i når man lykkes ("vi lykkes"), og mislykkes ("utenforstående hendelser gjorde slike at vi ..."), m.m. * Norgesmesterskap i estimerings Required experience: Ingen spesiell. Expected audience: Alle med interesse i bedre læring av erfaring
Magne Jørgensen er utdannet sivilingeniør fra Universitetet i Karlsruhe og har en doktorgrad i informatikk fra Universitetet i Oslo. Han har tidligere jobbet som programmerer, prosjektleder og prosessforbedringsleder i Telenor og Storebrand, og er nå professor ved Simula Research Laboratory.

I brukerinteraksjon må tilstand håndteres for å styre funksjonaliteten til applikasjonen. Tilstand i deler av applikasjoner visualiseres og uttrykkes enkelt med tilstandsmaskiner. Det vises en meldingsbasert arkitektur der tilstandsmaskiner håndterer tilstanden til en applikasjon og der kommunikasjonen består av asynkrone meldinger. Scala og Java benyttes i eksempelapplikasjoner.
Interaksjon mellom en bruker og en datamaskin utføres i applikasjoner som kjører på ulike mange ulike platformer, som for eksempel en PC eller en mobiltelefon. Men brukerinteraksjon finner også sted i tjenester som svarer på SMS-meldinger, der meldingene kan sees på som kommandoer. Applikasjoner med brukerinteraksjon endrer oppførsel når brukeren utfører handlinger i applikasjonen. Hvis en bruker for eksempel navigerer eller utfører en annen handling endres tilstanden applikasjonen er i, og den nye tilstanden kan tilby annen funksjonalitet enn den opprinnelige. Tilstand er ofte vanskelig å håndtere på en god og helhetlig måte i applikasjoner. Det er dessuten vanskelig å at sikre at kun den lovlige funksjonaliteten er tilgjengelig i hver tilstand. Det er også en utfordring å håndtere handlinger som er tidkrevende og kan låse applikasjonen. Handlinger som utføres i Event Dispatch Thread, som brukes til å tegne GUI, gjør at applikasjonen ikke kan håndtere brukerforespørsler før handlingen er avsluttet. Tilstand i deler av en applikasjon kan enkelt uttrykkes ved hjelp av tilstandsmaskiner. De er lar seg lett illustrere visuelt, og kan enkelt realiseres i kode. I presentasjonen beskrives det hvordan brukerinteraksjon kan ses på som hierarkiske strukturer av tilstandsmaskiner som utveksler meldinger. I en Proof of Concept demonstreres hvordan en slik arkitektur kan implementeres der tilstandsmaskiner styrer oppførselen, og asynkrone meldinger brukes til kommunikasjon. Actor-modellen brukes både til å håndtere den asynkrone meldingsutvekslingen, og for kommunikasjonen mellom tilstandsmaskinene som styrer oppførselen i applikasjonen. Dette løser problemet med låsing av applikasjonen som kan oppstå når for mye skal utføres av Event Dispatch Thread. Modellen gir også en klar separasjon mellom brukergrensesnittet og implementasjon av hendelsene som trigges fra brukergrensesnittet. Eksempel på implementasjon og bruk vises i Java og Scala. Det vises hvordan Scalas Actor-modell forenkler trådhåndtering, og hvordan den gir en god abstraksjon over trådhåndtering i Java, som ofte er kompleks å jobbe med.
Jonas Lindholm har jobbet i Accenture siden 1998 og har jobbet med forskjellige teknologier på både backend og frontend. De siste 6 årene har han i stort sett jobbet med utvikling og arkitektur på Java plattformen. Jonas har hovedfag i informatikk fra Universitetet i Oslo.

En introduksjon til entitets versjonering med Hibernate Envers
Hvis endringer på entiteter er en problemstilling i din domenemodell kan Hibernate Envers biblioteket være en mulig løsning. Envers er et bibliotek som forenkler lagring og gjenfinning av historiske data. Med kun én enkelt annotering - "@Audited" - er det mulig å logge endringer i entiteter (egenskaper og/eller relasjonIer). Presentasjonen forklarer hvordan Envers virker, viser hvordan Envers introduseres i en eksisterende domenemodell, og hvordan spørringer mot historiske versjoner av entiteter kan gjøres.
Sten Aksel er blant Know IT Objectnets mest erfarne konsulenter. Han stiller gjerne opp som scrum master, arkitekt, teknisk ansvarlig, funksjonelt ansvarlig og utvikler. Sten Aksel trives best i smidige team og er tilhenger av smidig og testdrevet utvikling.

I Know IT Objectnet har vi jobbet lenge med intern prosessforbedring og kunnskapsdeling. I dette foredraget ønsker vi å dele våre erfaringer fra dette arbeidet.
Know IT Objectnet legger til rette for faglig utvikling for de ansatte via deltagelse i fagprosjekter på tvers av de daglige kundeprosjektene. Fagprosjektene kommer i stand på de ansattes initiativ og tar for seg ulike teknologier eller områder man interesserer seg spesielt for. De har varighet fra noen uker opp til et halvt år, og skal resultere i leveranser i form av foredrag, kurs eller workshops for kolleger. De siste årene har man hatt flere ulike prosjekter innenfor smidige utviklingsprosesser. I tillegg til interne fagprosjekter, engasjerer Know IT Objectnet seg også i forskningsprosjekter innenfor området. Foredraget tar for seg disse interne og eksterne prosjektene, og vil redegjøre for hvordan vi holder oversikt over prosjektene våre ved hjelp av løpende prosjekt-"barometre", erfaringsutveksling og kontinuerlig vedlikehold av retningslinjer / best practices.
Konsulentsjef i Know IT Objectnet
Seniorkonsulent i Know IT Objectnet

Vi vil snakke om og vise eksempler på løsninger av konkrete problemstillinger knyttet til å kjøre applikasjoner på en sky.
"Cloud computing" er en av de varmeste potetene i IT-verdenen i dag. Man har flere typer skyer, flere leverandører og mange forskjellige måter å sette sammen sine systemer. For å kunne kjøre systemer i en sky så vil man ofte trenge en del endringer i applikasjonene som skal kjøres. Sammensettingen av applikasjonene som utgjør et system endrer seg også ofte. I dette foredraget vil vi gi en oppsummering av de relevante utfordingene og vise hvordan disse typisk kan løses. Foredraget vil dekke et system som kjøres på en sky, og med eksempler vil vi vise hvordan vi har håndtert utfordringer som skalerbarhet, deployment, oppgradering og tilgjengelighet. Emner som dekkes: * Oppsummering av dagens virtualiseringsteknologier * REST * Monitorering og overvåkning av applikasjoner * Hva er en sky i forhold til et klassisk cluster? Foredraget vil være praktisk orientert og inneholde mange spennende demoer!
Trygve Laugstøl jobber i Arktekk som utvikler, arkitekt og har mange års erfaring med Java-utvikling. Han har lang erfaring med utvikling og bruk av åpen kildekode som kjerneutvikler av Maven 2 og Continuum. Trygve har jobbet lenge med utvikling av plugins som støtter opp om smidig utvikling og som rådgiver innenfor disse områdene.
Kristian Nordal jobber til daglig hos Arktekk, som Java-utvikler med hovedfokus på open source og smidig utvikling. Han er commiter på Codehaus sitt prosjekt for Maven-plugins og har i flere år deltatt i utviklingen av Maven 2-plugins, som for eksempel den første pluginen for Jetty5 og appassembler-pluginen.

Er det vanskelig å få ting gjort? Har kompeksiteten i programutvikling blitt for stor? Gjør det vondt? Prøv Pomodoro-teknikken og øk produktiviteten din!
Vi utviklere har mye kompleksitet vi må håndtere, og alle verktøy som gjør oss mer fokuserte og effektive er et verktøy som bør prøves. Pomodoro-teknikken hjelper oss med å håndtere samtidige oppgaver og sørger for å holde hjernen vår fokusert gjennom hele dagen og bruke tiden vår effektivt!
Trond Marius er seniorkonsultent hos Mesan. Han har jobbet som ScrumMaster i flere prosjekter og har slåss mot kompleksitet i prosess, produkt, mennesker, kunder og oppgaver. Han jobber for å hjelpe teamet til å holde sin fokus på det viktigste og dermed levere verdi så hurtig og med så høy kvalitet som mulig.

Å ta over forvaltningen av gamle applikasjoner kan være et mareritt. Hvordan skal man innføre kvalitet og være i stand til å feilrette og videreutvikle disse gamle lappeteppene?
Ingen applikasjoner er "bruk og kast". De fleste lever over flere år, og i løpet av levetiden blir de lappet på av ulike mennesker. Det som var "hot og trendy" da applikasjonene ble laget er sannsynligvis heller ikke det som ansees som "good practice" i dag. Så hva i all verden gjør man når man skal ta over forvaltningen av slike applikasjoner? Hvordan skal man restaurere og innføre kvalitet i gamle applikasjoner?
Vegard Hartmann er fagleder for Kvalitet og testing i Bekk Consulting. Han har siden 2005 jobbet både med nyutvikling og forvaltning av en rekke applikasjoner.

Lurer du på hvorfor det er så mye hype rundt alternativer til relasjonsdatabaser. Hva er egentlig problemet med dem sier du? Her er en introduksjon til noen av utfordringene med relasjonsdatabase.
Lurer du på hvorfor det er så mye hype rundt alternativer til relasjonsdatabaser. Hva er egentlig problemet med dem sier du? Her er en introduksjon til noen av utfordringene med relasjonsdatabase, kjenner du deg ikke igjen i dem er kanskje din bruk av relasjonsdatabasen grei likevel. Det er mange meninger om relasjonsdatabasen, jeg vil gi en ryddig oversikt over ting som CAP, ACID, 2PC etc slik at man enklere kan argumentere for og i mot forskjellige løsninger til forskjellige problemer. Dette er ikke et korstog mot relasjonsdatabaser, men enkelte ganger er det greit å vite om begrensningene, hvorfor de er der, og hvilke alternativer man har.
My main goal with programming and system development is to make things simpler and more managable. I try to make systems with less dependencies that are more self contained.

[Til komiteen: Takk for tilbakemelding! Har tatt med mer om JCR, og utvidet eksempelet. Siden OSGi fort vil bli relevant når man utvikler for Sling, vil jeg nødig fjerne den delen helt, men har i stedet fokusert på hvordan man bruker OSGi og Sling sammen.] Apache Sling er et innovativt, REST-basert webrammeverk, og utgjør et HTTP-grensesnitt til et Java Content Repository. Sling-applikasjoner støtter scripts for enkle funksjoner, samtidig støttes avanserte komponenter med OSGi. For mange webutviklingsprosjekter vil Sling være plattformen som gir deg kortest utviklingstid. Sling er også et godt Java-basert alternativ til f.eks. Ruby on Rails.
Tags: Web as a Platform, Java Frameworks JSR-170/283 er standarden for «Java Content Repositories» (JCR). Et JCR er et hierarkisk datalager. I motsetning til relasjonsdatabaser tillater JCR svært fleksible datastrukturer, slik at applikasjonen din lett kan endres etterhvert som du ser behovene. JCR kan også lagre filer og strukturerte data side om side, og er dermed et slags filsystem på steroider. I tillegg får man verdifulle funksjoner som observasjon (eventlisteners), tilgangskontroll, kryssreferanser, fulltekst-søk, versjonering, XPath- og SQL-spørringer, rike attributter og mye annet. Presentasjonen vil vi gi en innføring i JCR-implementasjonen Apache Jackrabbit. Det finnes mange kommersielle content management-systemer som bruker et JCR som datalager, men så langt har det vært få muligheter for rask JCR-applikasjonsutvikling med fritt tilgjengelige rammeverk. Formålet med Sling er å gjøre det enklere å utvikle webapplikasjoner som drar nytte av JCR. Sling-applikasjoner bruker script og servlet'er, som velges ut fra en enkel navnekonvensjon, til å behandle HTTP-requester etter REST-prinsippene. Av scriptspråk støttes bl.a. Ruby, EcmaScript, Groovy, Velocity, eller Cocoon pipelines. Man kan også plugge inn sin egen skriptmotor. Samtidig støttes enterprise-behov via OSGi, noe som gjør plattformen svært utvidbar. Med OSGi-komponenter («bundles») kan man utvikle pakker for egen funksjonalitet. Bundler kan også inneholde servlets, servlet-filtre, og JCR-innhold. Presentasjonen viser hvordan man bruker OSGi-komponenter med Sling. Sling og JCR er et bra valg om man utvikler et system hvor *innhold* er i fokus. Siden REST-prinsippet er sentralt i Sling, får man automatisk pene URLer til innholdet, og det er lett å lage CRUD-applikasjoner (create/read/update/delete) bare ved hjelp av vanlige HTML-skjemaer. Som en del av presentasjonen skal vi utvikle en blogg-applikasjon med bare noen få linjer kode, og dra nytte av Slings innebygde JSON-støtte.
Utvikler i Idium AS, som bruker Sling som plattform i et webpubliseringsprodukt. Committer til Apache Sling, og medlem av Sling PPMC.

Mange av de beslutningene som tas i løpet av et systemutviklingsprosjekt kan få store konsekvenser. I denne presentasjonen går vi gjennom noen gode og noen mindre gode fremgangsmåter for å fremskaffe et beslutningsgrunnlag.
Hvordan ta bedre beslutninger i systemuviklingsprosjekter? - en praktisk tilnærming. Valg av utviklingsmetode, arkitektur og teknologi er eksempel på viktige beslutninger som tas i de fleste systemutviklingsprosjekter. Gode valg medfører at utviklingstiden reduseres, kvaliteten forbedres og at både utviklere, kunder og brukere blir fornøyde. På den annen side, så kan et enkelt dårlig valg føre til at hele prosjektet blir en fiasko. Det er derfor bekymringsfullt at slike viktige beslutninger ofte tas på sviktende grunnlag. Viktige beslutninger baseres ofte på hype, salgspresentasjoner, evangelisering fra "guruer", eller egne erfaringer som ikke er representative for problemet man står ovenfor. Det er følgelig et stort behov for teknikker som hjelper oss til å ta bedre beslutninger. Forskere har foreslått flere teknikker som adresserer problemet, feks basert på systematiske litteraturgjennomganger og oppbygging av erfaringsdatabaser. Desverre opplever mange at det kan være svært vanskelig å bruke disse teknikkene i praksis. I denne presentasjonen skal vi se på gode og dårlige fremgangsmåter for å fremskaffe og evaluere informasjon slik at man kan fremskaffe et så godt beslutningsgrunnlag som mulig.
Stein Grimstad er avdelingsleder for Software Engineering-avdelingen ved Simula Research Laboratory i Oslo, og rådgiver i Wasteless AS. Han er også sentral i Cantara. Hovedinteressen er software engineering med et spesielt fokus på kravhåndtering og kostnadsestimering.

Applikasjonsforvaltning er ofte vanskelig og tidkrevende, Aslak ser i denne lyntalen på noen av grunnene til hvorfor og forklarer forklarer samtidig hvordan man kan utvikle for lykkelig forvaltning. Slik kan forvaltningsprosjekter opprettholder momentum og verdiskapning som i utviklingsfasen.
I denne lyntalen vil Aslak forklare hvorfor det koster 8000kr (8 timer) å implementere en avkrysningsboks ("check box"), som normalt burde koste 1000kr (1 time). Dette er en helt unødvendig ekstrakostnad dersom vi hadde vært mer bevisst på årsaken til hvorfor denne oppstår. Om man aldri har jobbet med applikasjonsforvaltning er det ikke så lett å se dette. Han vil forklare hvilke krav som BEKK forvaltning stiller til utviklingsprosjekter som gjør systemene forvaltbare - altså reduserer kostnaden i forvaltningsfasen. Dette gjør han gjennom se på hva som gjør at ting tar tid i forvaltning og hvorfor man ikke ser disse problemene i rene utviklingsprosjekter.
Aslak er medlem av BEKK forvaltning og jobber der med å assistere nyutvikling og videreutvikle forvaltningsapplikasjoner. Gjennom dette arbeidet har han erfart hva som avgjør momentum i forvaltningsfasen og hvordan dette kan endres.

Google Android er neste generasjons mobilplattform, og flere nye Android-telefoner ventes i år. Se hvordan vi utvikler en applikasjon for Android som bruker sanntidsdata fra Trafikanten. Plukk også opp tips om hvordan din gamle telefon kan oppgraderes med Android!
Google Android er neste generasjons mobilplattform, og flere nye telefoner ventes i år. Android kan bli en viktig plattform for utviklere av mobile applikasjoner. Vi tar for oss Android sin arkitektur med fokus på applikasjonslaget. Applikasjoner for Android skrives i en variant av Java, og kjøres i en virtuell maskin som heter Dalvik. Android har et rikt API som tilgjengeliggjør alt av telefonens funksjonalitet og har ingen "skjulte" API-er. Vi skal se hvordan vi lager en applikasjon som benytter Trafikantens sanntidsdata, og vil gi en liten innføring i hvordan applikasjoner i Android er bygget opp. Kjernen til Android er basert på Linux 2.6 og hele Android er lisensiert under frie lisenser. Android har også blitt "portet" til flere telefoner, og vi skal se hvordan man kan oppgradere en HTC TyTN II med Android.
Baard er ansatt som konsulent i Java-avdelingen hos Bouvet. Han har jobbet med Java de siste 5 årene med fokus på smidige metoder og testdrevet utvikling. Baard er en ivrig tilhenger av fri programvare.

Skihopp omtales ofte som verdens vanskeligste idrett, fordi suksess i denne idretten avhenger av svært mange faktorer. Et vellykket IT-prosjekt avhenger av faktorer som økonomi, psykologi, informasjonsflyt, intern politikk, menneskelig motstand, tekniske løsninger, prosjektledelse og prosjektdeltagernes evne til samarbeid. IT-prosjekter kan neppe omtales som idrett, men vi hevder at suksess i et IT-prosjekt avhenger av minst like mange faktorer som et godt skihopp. Således kan kanskje IT-prosjekter betegnes som verdens vanskeligste arbeidsplass?
Vinnerne, både i næringslivet og i hoppsporten, vet at bak et godt svev ligger langvarig trening og nitidige forberedelser. Tør du å satse som en skihopper i ditt neste prosjekt? Våger du å bruke tid på å konsentrere deg skikkelig før start, trykke til på hoppkanten og legge deg i flytestilling? Hvis du gjør det kan DU bli en Wirkola som det blir veldig vanskelig å hoppe etter!
Rune F. Åsprang er utdannet sivilingeniør i kommunikasjonsteknologi ved Norges Teknisk-Naturvitenskapelige Universitet (NTNU). Som IT-rådgiver i BEKK Management Consulting fyller Rune rådgivningsroller som ligger i skjæringspunktet mellom forretning og teknologi, og har et særlig fokus på strategiutvikling og –realisering, prosesskartlegging og analyse.

Få en rask innføring i iPhoneutvikling.
Dette foredraget vil gi en rask innføring i programmering på iPhone. Foredraget bruker en enkel applikasjon som eksempel og viser hvordan man kan bruke iPhone-ens innebygde GPS sammen med alment tilgjengelige tjenester til å lage kul liten iPhone app. Foredraget går gjennom Xcode, utviklingsmiljøet som Apple tilbyr for utvikling på iPhone, og gir en rask introduksjon til Objective C, vanlige API-er og programeringsmodeller man kommer i kontakt med som fersk iPhoneutvikler.
Tobias er fagsjef i Know IT Objectnet. Han har 11 års erfaring fra konsulentbransjen hvor han stort sett har jobbet med utvikling av store mellomvareløsninger implementert i Java. Tobias er tidligere styremedlem i javaBin og satt i JavaZones programkomite fra 2004-2009. Tre av disse årene fungerte han som leder.

Smidig handler om å levere forretningsverdi – i teorien. I praksis leverer vi funksjonalitet, og har ikke filla peiling på hvor mye verdi vi har levert og skal levere. Vil du høre om et team og en kunde som går fra mainstream smidig til å levere målbar forretningsverdi? Kom.
- Vi har levert 28 poeng denne sprinten! - Flott, det kaller jeg valuta for pengene! Vi sier at smidig handler om å levere høy forretningsverdi tidlig og hyppig. Og vi sier gjerne at vi leverer det som gir mest verdi først. Men det er teorien. I praksis - for eksempel i Scrum - gjør vi ikke annet enn å levere funksjonalitet, og vi aner ikke hvor mye verdi funksjonaliteten innebærer – bare hvor mange abstrakte poeng den er estimert til. Vi overlater til kunden / produkteieren å prioritere rekkefølgen på funksjonaliteten og håper at det da gir høyest mulig verdi først. Det stemmer kanskje, eller kanskje ikke. Hvem vet? Det er mulig å bryte ut av mainstream smidig til å levere målbar forretningsverdi. Kom og hør historien om en kunde og et team som tar ”verdi” alvorlig og sammen lærer å definere, planlegge, levere og måle verdi. Det er en annerledes presentasjon - en levende, underholdende og inspirerende historie. Underveis får du også ulike innfallsvinkler og verktøy som kan hjelpe deg til å foreta det samme spranget.
Trond er siviløkonom av utdannelse, utvikler av hjerte og prosjektleder av yrke. Han har alltid vært opptatt av å få til gode ting i teams, og fra de første smidig-bøkene dukket opp i 1999, har han konsentrert seg om smidige metoder som prosjektstyringsmetodikk. Han er opptatt av prosjektøkonomi og ønsker å gi prosjekter et tydeligere økonomisk fundament. Trond var medarrangør av Smidig 2007 og Smidig 2008 og er en av grunnleggerne av Steria Smidig Forum. Han arbeider som senior prosjektleder i Steria AS

Er du ferdig? Tør du sette systemet i produksjon, eller er det bare et sammensurium av kode du er usikker på om er klar til å brukes? Det er på tide å heve standarden og lage programvare som gir verdi for bedriften på både kort og lang sikt.
Den beste måten å måle fremgang på er programvare som er i bruk og skaper verdier. Kode som er klar for produksjon, men som bare ligger og venter på å bli produksjonssatt, er noe som ikke genererer verdi. Eller som man i Lean ville kalt det: Waste. Hvorfor kan vi ikke få programvaren i produksjon idet en funksjonalitet er implementert? Dette foredraget hjelper deg på veien mot å kunne endre dette. "Push button deployment" er noe Jeff Sutherland snakker om som en forutsetning for smidige prosesser hos Patient Keeper. Patient Keeper er selskapet han jobber for, og hvor han drar ut mange av sine erfaringer rundt Scrum. Andre bedrifter som har gjort det bra med hyppig produksjonssetting og sin evne til å tilpasse seg marked og kunder er eBay, Flicker og Amazon. For å kunne gjøre disse hyppige endringene og tilpasningene kan ikke produksjonssetting være en stor og farlig operasjon som skal gjøres så sjelden som mulig. Det må rett og slett være en enkel, sikker og rask operasjon. Det må være smidig utrulling. Dette foredraget tar for seg hvilke verktøy og metoder man kan ta i bruk i Java for å komme nærmere smidig utrulling og oppsett av nye miljø. Verktøyene og metodene er basert på konkrete erfaringer, og håndterer ting som pakking, oppgradering av database og testing. Gjennom kodeeksempler viser jeg hvordan man kan bruke verktøy som Maven, Hudson, DBDeploy, Jetty og litt scripting for å få til effektiv, fleksibel og enkel deploy av en standard Java EE webapplikasjon. Det vil ikke være mulig for alle bedrifter eller systemer å ha hyppig produksjonssetting, men i det minste bør man kunne rulle ut ofte og kjapt til test-, beta- og preprodukjons-miljøer. Bare å få dette til i testmiljøene vil gjøre deg bedre i stand til å få hyppige tilbakemeldinger fra brukere, og dermed kunne korrigere kursen oftere. Dette foredraget er holdt for javaBin i komprimert form. Denne utvidede utgaven vil bygge på tilbakemeldingene fra tidligere, og spesielt gi mer detaljer og eksempler i forhold til hva som skal til av kode og oppsett for å få det til i Java. Topic: Agile and Software Engineering, Tools and Techniques, Experience Reports
Anders er Managing Consultant og teknologileder for Java hos Capgemini Norge. Han har over 5 års erfaring med utvikling i Java som utvikler og arkitekt. Han er engasjert i smidig utvikling og open source, og har jobbet med smidige metoder i flere år. Han mener at prosess og teknologi må møtes og spille på lag hvis vi skal nå målet om effektiv, god og bærekraftig systemutvikling.

Cloud computing og Web 2.0 driver en ny tilnærming til lagring med fokus på fortløpende endringer, lave kostnader samt ekstrem skalerbarhet. Samtidig betyr dette begrensede muligheter sammenliknet med en tradisjonell RDBMS. Er det på tide å kaste ut relasjonsdatabasen?
I mange år har relasjonsdatabasen vært et udiskutabelt valg for de fleste applikasjoner. Imidlertid ser vi nå flere alternative databasetilnærminger, drevet av høye krav til skalerbarhet i nettskyen og Web 2.0. Denne sesjonen tar for seg bakgrunnen for denne endringen og ser på de mest interessante lagringsmekanismene som Google BigTable, Amazon SimpleDB og Yahoo PNUTS samt dokumentdatabasen CouchDB. Fokus for disse tilnærmingene er primært mulighet for fortløpende endringer, lave kostnader samt ekstrem skalerbarhet. Samtidig betyr dette begrensede muligheter sammenliknet med en RDBMS. Er det på tide å kaste ut relasjonsdatabasen?
Trond Arve Wasskog er utvikler og CTO i Bekk Consulting. Han har jobbet med Java og Java EE applikasjonsutvikling i mer enn ti år, med fokus på smidig utvikling, kvalitet og vedlikeholdbarhet.

Med Java EE 6 er JSR 318 -- Enterprise JavaBeans 3.1 ferdigstilt. I denne sesjonen ser vi på dei viktigaste nyheitene i den siste EJB-spesifikasjonen og diskuterer korleis desse endringane kan vidare forenkle og forbedre EJB-arkitekturen.
Med lanseringa av Java Enterprise Edition 6 er Enterprise JavaBeans 3.1-arkitekturen klar for massene. I EJB 3.1-spesifikasjonen har forenklingane som vart introdusert i EJB 3.0 blitt vidareutvikla, og i tillegg har ny funksjonalitet blitt lagt til. Denne sesjonen gir eit oversyn over både endringane og den nye funksjonaliteten i EJB 3.1-spesifikasjonen. Emner: * Valgfrie local business interfaces * Portable globale JNDI-navn for session beans * Embedded Enterprise JavaBeans i webapplikasjonar * Singleton-beans og singleton concurrency management * Asynkron metodeinvokasjon på session beans * Applikasjonsvide livssyklusnotifikasjonar * Forenkla orkestrering med EJB TimerService EJB 3.0 tok eit stort steg i retning av ein forenkla EJB-arkitektur og reduserte drastisk på utviklingsinnsatsen som krevdes for å implementere Enterprise JavaBeans. EJB 3.1-spesifikasjonen vidarefører denne forenklingsprosessen ved å gjere local business interfaces valgfrie, globale JNDI-navn blir endelig standardiserte og EJBar kan no instansierast direkte i webapplikasjonar utan behov for ein separat ejb-jar. Fokuset i overgangen fr† EJB 2.1 til 3.0 var å forenkle spesifikasjonen, heller enn å skulle introdusere ny funksjonalitet. Med EJB 3.1 er denne funksjonalitetsfrysen over og mykje ny funksjonalitet har blitt introdusert. Singleton beans og applikasjonsvide livssyklusnotifikasjonar for session beans er heilt nye konsept, men også eksisterande API har fått ei ansiktsløfting med ny funksjonalitet som cron-aktig spesifisering av tidsuttrykk til EJB TimerService og asynkron metodeinvokasjon på session beans.
Oddbjørn Kvalsund er Accenture Technology Solutions i Oslo sin Subject Matter Expert (SME) på Core Java Programming. Han er utdanna master i informatikk frå Høgskolen i Østfold og Newcastle University og er aktiv i javaBin-miljøet i Oslo.

Med smidig metodikk har automatisert test fått vind i seilene som aldri før. Fra å være noe som aldri ble gjort skal plutselig alt testes automatisert. Uheldigvis kan dette være å gå fra en grøftekant til en annen. Dette foredraget er for deg som ønsker å lære om effektiv testing, og hvilken effekt ulike verktøy og teknikker gir.
TDD blir trukket fram som noe av det viktigste innen smidig utviklingsmetodikk, men noe har gått galt i den smidige verden. Plutselig skal enhver if-then-else-setning testes med FitNesse og ethvert scenario i brukergrensesnittet skal verifiseres med Watir, Selenium, FunFx, etc. BDoc er en motvekt til denne trenden, et verktøy for å dokumentere spesifikasjoner og funksjonelle tester skrevet i JUnit. Foredragsholderen er hovedutvikler av BDoc og vil gjennom dette foredraget presentere eksempler på effektiv og mindre effektiv testing innenfor ulike områder av automatisert test. BDoc vil bli demonstrert som et lettvektsverktøy for automatisk akseptansetest og dokumentasjon, hvor applikasjonen som testes skal beregne alderspensjon fra folketrygden.
Per Otto er selvstendig konsulent og har jobbet med utviklingsprosjekter på JEE siden 2000, som utvikler, teamleder og arkitekt. Per Otto praktiserer testdrevet utvikling i sin hverdag og jobber for at alle rundt han også skal gjøre det, blant annet gjennom prosjektet BDoc (bdoc.googlecode.com), som lager dokumentasjon fra tester. De siste 6 årene har Per Otto hatt sentrale utviklingsroller på store smidige prosjekter, og gjennom dette også fått mye erfaring med hva som fungerer og ikke fungerer når prosjekter skal benytte automatisert test i stor skala.

Dette foredraget vil sette fingeren på to hovedelementer som kan være med på å skape mye mer verdi i softwareprosjekter.
Softwarebransjen har i den senere tid vært fokusert på å øke produktiviteten. Vi tar stadig ibruk ny teknologi og moderne systemutviklingsmetoder for å optimalisere produktiviteten i gjennomføringen av softwareutvikling. Likevel så stanger vi hodet i veggen dersom vi betrakter mange softwareprosjekter fra et "verdiskapning over livsløpet" perspektiv. Dette foredraget vil sette fingeren på to hovedelementer som kan være med på å endre dette bildet. Del 1. Valg. Tar vi de riktige valgene? Vi begynner med å se på prosessene og resultatene rundt nøkkelbeslutninger for implementasjon, hvor vi eksemplifiserer hvor tilfeldig viktige valg faktisk blir tatt. Vi vil også se på hvordan et fokus på teknologi-egenskaper kan gi oss et rammeverk for å ta valg som kan gi betydelig større verdi i softwareprosjekter. Del 2. Arkitektur. Arkitektur er en brannfakkel om dagen, og det ikke uten grunn. Det skrives opp og i mente om arkitektur og anti-arkitektur. Vi vil i denne delen av presentasjonen undersøke og sette spørsmålstegnet på om vi kanskje i 2009 begynner å se konturene av gode mulige arkitekturelle byggesteiner som faktisk er forutsetningen for å investere i arkitekturen i et system og hvordan disse kombinert med å ta bedre valg kan være en måte å skape mye mere verdi enn dagens norm i softwareprosjekter.
Principal Consultant at Webstep, Sun Java Champion, president of IASA Norway, founder of Cantara AS and stiftelsen for fremme av programvareutvikling i Norge. Former president of the very successful Norwegian JUG javaBin and JavaZone. Member of the Advisory Board of java.net. Speaker on several conferences including JavaZone, JavaONE, CommunityONE, Microsoft Application Platform, Smidig, Go Open, OMG Information Days, the Software conference and various others. With over 30 years of professional programming experience spanning quite a few programming languages he has contributed in both international and domestic projects in various roles, including project leader, technology mentor, software architect, lead developer, technology strategist and trainer.

Erfaringer fra utvikling av en solid og konfigurerbar plattform for meldingsbehandling og integrasjon. Systemet knytter sammen tusenvis av kunder, behandler ti-tusenvis av utvekslinger hver dag og støtter viktige formater og protokoller.
Etter en runde med produktevalueringinger valgte vi å utvikle vår egen plattform for integrasjon og meldingsbehandling basert på Java og J2EE. Lyntalen tar for seg valgene vi gjorde, hvilke teknologier som benyttes, hva som fungerte i praksis, litt rundt ytelse og hva vi ville gjort annerledes. Stikkord er JEE, MDB, XML, EDI, WS, SMS, SMTP/POP, FTP/SFTP.
Thore Johnsen jobber i dag som system- og løsningsarkitekt i MeldingsTjenester hos ErgoGroup AS. Han har bred erfaring innen design og utvikling av software og har jobbet med mange ulike teknologier og systemer siden midten av 90-tallet. Fra tidlige løsninger basert på Microsoft teknologi, C++ og CORBA jobber han i dag stort sett med løsninger basert på Java og JEE teknologi.

Har du skrevet ditt eget ORM-rammeverk? Eller brukt integrasjonsplattformen din som dokumentdatabase? Har du kjørt alle metodekall over webservices? Det har vi! Dette erfaringsforedraget tar for seg et knippe arkitekturtabber og beskriver hvordan og hvorfor vi havnet i gjørma... og hvordan det føltes.
Etter mange år i bransjen har foredragsholderne samlet på grove arkitekturtabber fra sine prosjekter. Har du skrevet ditt eget ORM-rammeverk? Eller brukt integrasjonsplattformen din som dokumentdatabase? Har du kjørt alle metodekall over webservices? Det har vi! Dette erfaringsforedraget tar for seg et knippe arkitekturtabber og beskriver hvordan og hvorfor vi havnet i gjørma... og hvordan det føltes.
Knut Erik Borgen er utdannet Cand Scient i år 2000 har bred erfaring fra serverside, web 2.0 og Swing utvikling. Jobber i dag for Know IT Objectnet som arkitekt, teknisk ansvarlig, funksjonelt ansvarlig og utvikler. På hobbyfronten utvikler han open source software i PHP og Java og trives svært godt når det står utviklingsoppgaver i kø. Stor tilhenger av smidig og testdrevet utvikling.
Jan Henrik Gundelsby er utdannet Cand Scient og har over 10 års erfaring med serverside Java-teknologi, både J2EE og lettvektsrammeverk. Han jobber i dag for Know IT Objectnet som teknisk prosjektleder, arkitekt og utvikler for et større offentlig IT-prosjekt. Jan Henrik er en ivrig lettvekts-fantast som forsøker å jobbe mot smidige arkitekturer og løsninger som gir økt produktivitet for utvikleren.

Foredraget vil ta for seg praktisk bruk av Compass mot JPA og eksempler på hvordan sammspillet mellom disse er løst.
I et av Mesans prosjekter - Arkivportalen.no, har kunden et stort behov for å kunne gjennomføre fritekstsøk mot Java objekter som er persistert i en database ved hjelp av JPA. Vi har dermed implementert en løsning der du kan utføre fritekstsøk mot disse Java objektene. Løsningen benytter Open Source rammeverket Compass som bygger på Apache Lucene. Compass har gjort oss i stand til å levere fritekstsøk sammen med og inkludert i en standard JPA applikasjon kjørende på Suns Glassfish applikasjonsserver. Foredraget vil ta for seg praktisk bruk av Compass over Lucene mot JPA og eksempler på hvordan samspillet mellom disse er løst, gjennom erfaringer fra prosjektet arkivportalen.no. Bakgrunnen for løsningen vil være introduksjon til presentasjonen. I hoveddelen vil det fokuseres på krav til løsningen og hvorfor man ønsket å bruke fritekst søk mot databasen og hvilke krav som ble stilt til løsningen i forhold til søkemuligheter. Videre tar vi for oss bruken av Compass og Lucene sammen med JPA og hvordan dette har blitt løst og konfigurert, for å oppnå best mulig resultat. Arkivportalen.no er delvis et nyutviklingsprosjekt samt en web utvidelse av en eksisterende løsning. Vi kommer derfor også til å vise hvordan man kan innføre bruk av Compass og Lucene mot eksisterende løsninger. Avslutningsvis vil vi ta for oss våre erfaringer så langt, og belyse både positive og utfordrende egenskaper med bruk av Compass og Lucene som fritekst søkeverktøy i en JEE applikasjon.
Arnfinn Sandnes har jobbet som utvikler og arkitekt i over 20 år. Han har jobbet mye med spesifikasjoner, valg av arkitektur, design, integrasjon og implementasjon på JEE plattformen.

Har du sett: "person.getAdresse().getGateAdresse().getHusnummer()" før? Har du skrevet den? Hvorfor?
Java er et objektorientert språk. Hva vil dette egentlig si? "Objekter, abstraksjon, innkapsling, SOLID prinsipper". Når vi har all denne kunnskapen, hvorfor ender vi opp med domenemodeller uten logikk og enkapsulering - og person.getAdresse().getGateAdresse().getHusnummer(); Er domain driven design noe mer enn en måte å belyse disse prinsippene for oss enda en gang? Denne sesjonen vil gjennomgå hva domain driven design gir deg ut over de objektorienterte prinsippene, og vise hvordan konsepter som et felles domenespråk kan hjelpe oss med å håndtere kompleksitet i applikasjonene våre.
Janniche har 5 års erfaring med utvikling av mer eller mindre domenedrevne Java applikasjoner. Hun er for tiden fagleder for Java i Bekk og har høy fokus på utvikling av god Java kode. Favoritt sitat: "Expert programmers are those who write code even idiot programmers can understand. Idiot programmers are those who write code not even expert programmers can understand."

Mange sier de har en ekte Scrum, men egentlig har de fått en ScrumBut i huset. Få ett grunnkurs i ScrumButtens anatomi; lær å gjenkjenne, håndtere og akseptere Scrum sin ofte misforståtte artsfrende.
En ScrumBut er en mindre kjent, men ganske utbredt art av familien Scrum. Arten ble først kjent på begynnelsen av det 21 århundre, og har nylig blitt lagt til i det smidige artsregisteret. Kjennetegn inkluderer burndowns som aldri når null, ufokuserte standupmøter og sprinter med liten betydning. Nyere forskning viser at mange tidligere rapporterte observasjoner av Scrums, egentlig har vært observasjoner av ScrumButs. Denne lyntalen vil illustrere de mest synlige kjennetegnene til en ScrumBut. Deretter forklares hvorfor ScrumButten kan være ett nyttig innslag i den lokale fauna, og hvordan man kan gå frem om man finner en i hagen. Det er vanskelig å kjøre Scrum etter boka; mange sliter med å gjøre det "riktig". Husk at boka og guruen bare er brostein på veien til lykke. Adopter en ScrumBut idag!
Øyvind Kvangardsnes er konsulent i BEKK. Han tjener til sitt daglige brød ved å skrive Javakode, og har nylig fullført sin mastergrad som omhandlet om bruk av Scrum.

Vi vil oppsummere hva "cloud computing" er, fortelle om utfordringer med å bruke klassisk java-arkitektur på systemer som skal kjøres i en sky, og vise hvordan problemene kan løses.
"Cloud computing" er en av de varmeste potetene i IT-verdenen i dag. Man har flere typer skyer, flere leverandører og mange forskjellige måter å sette sammen sine systemer. En forutsetning for å vurdere utvikling av en cloud-basert løsning er at man har et problem som går utover en maskin. Dette kan være problemer knyttet til skalering, tilgjengelighet, replikering, backup, mm. Man har behov for å skalere horisontalt. Slike krav kan i stor grad påvirke systemets arkitektur og valg av teknologier. I dette foredraget vil vi systematisere problemstillinger til arkitekturer for systemer som kjører i en sky, og komme med konkrete forslag til arkitekturer og løsninger. Noen av emnene vi vil dekke er: * Feature-orienterte applikasjoner * Utviklingsprosessen * Tilstand * REST * Versjonering * Rullende oppgradering * Skalering * Tilgjengelighet * Dokumentdrevne databaser * Replikering * Økonomi Dette er en oppbygning til foredraget "En Praktisk guide til Høytsvevende Arkitekturer".
Trygve Laugstøl jobber i Arktekk som utvikler, arkitekt og har mange års erfaring med Java-utvikling. Han har lang erfaring med utvikling og bruk av åpen kildekode som kjerneutvikler av Maven 2 og Continuum. Trygve har jobbet lenge med utvikling av plugins som støtter opp om smidig utvikling og som rådgiver innenfor disse områdene.
Kristian Nordal jobber til daglig hos Arktekk, som Java-utvikler med hovedfokus på open source og smidig utvikling. Han er commiter på Codehaus sitt prosjekt for Maven-plugins og har i flere år deltatt i utviklingen av Maven 2-plugins, som for eksempel den første pluginen for Jetty5 og appassembler-pluginen.

Smidig metodikk er som skapt for god interaksjonsdesign! Jeg forteller hvorfør og hvordan man får det til!
Hvordan kan og bør interaksjonsdesigner jobbe i smidige prosjekter for å oppnå best mulig resultat og samarbeid sammen med teamet og kunden. Jeg tar utgangspunkt i egen erfaring som interaksjonsdesigner i smidige prosjekter og forteller om hvilke metoder og prosjektkonstellasjoner som jeg syns har fungert best.
Klara Vatn jobber som senior interaksjonsdesigner og funksjonell rådgiver i BEKK. Hun er medlem av BEKKs faggruppe for samhandling og sosial programvare, Virksomhet 2.0 Klara har lang erfaring med smidig utvikling i prosjekter for større organisasjoners løsninger for selvbetjening og samhandling. Hennes bidrag er å finne hos bl.a. NAV, Posten Norge og Statens Vegvesen.

En erfaringspresentasjon fra et Ruby on Rails prosjekt.
Ruby on Rails applikasjoner går for å være mer effektive å utvikle enn tilsvarende applikasjoner i Java. Dette fikk vi også erfare da vi utviklet en funksjonsrik Ruby on Rails applikasjon klar for produksjon på 3 måneder. Applikasjonen erstattet en eksisterende Oracle Forms applikasjon med over 200 skjermbilder med CRUD funksjonalitet. JRuby ble valgt for å støtte integrasjon mot eksisterende Java kode, samt krav om deployment på JBoss.
Nils Christian trives best når han kan hjelpe til med å skape applikasjoner som gleder både brukerne og sponsorene. Han har lang erfaring med smidig systemutvikling som programmerer, arkitekt, prosjektleder og coach, blant annet fra ThoughtWorks og som CTO i Know IT Objectnet. I dag jobber Nils Christian som selvstendig konsulent fra sitt eget firma, Wasteless AS. Han holder ofte foredrag og kurs for bedrifter og brukerforeninger og har presentert på mange konferanser både nasjonalt og internasjonalt. Nils Christian er også medforfatter av læreboken "Innføring i informasjonsteknologi".
Roy jobber som konsulent i Know IT Objectnet og har over 13 års erfaring innen systemutvikling. Java og J2EE har vært hans spesialområde de siste 10 årene, med spesielt fokus på web løsninger. I tillegg har han bred kompetanse innen databasemodellering og SQL programmering etter mange år i Sybase Norge as. I den senere tid har han bygd solid kompetanse på Ruby og Rails med deltagelse i fagarbeid og prosjekt for Know IT Objectnet.

Prosjektet FriKomPort har vært gjennom flere faser med forskjellige finansieringsmodeller. Foredraget er en oppsummering av disse og en presentasjon av dagens modell og hvorfor vi har valgt nettopp denne.
FriKomPort er en løsning for å administrere kurs/arrangement og påmeldinger til disse. Finansieringmodellene vi har benyttet oss av er Stafettfinansiering og Dugnadfinansiering. Løsninga var i første omgang betalt av kunden Kongsbergregionen, som er et kommunalt samarbeidsorgan for 8 kommuner i Buskerud og Telermark. I etterkant har andre kunder betalt for egen funksjonalitet som har komt alle brukerene til gode. Etterhvert har brukergruppen blitt så stor at vi har innført et utviklingsabonnement som gir brukerene tilgang til å være med å påvirke i hvilken retning prosjektet skal bevege seg med hensyn til funksjonalitet og videreutvikling. Tanken er at jo flere som har interesse av at løsningen lever, desto flere vil være med på finansieringen og dermed dele på kostnaden ved utviklingen.
Gunnar Velle er seniorkonsulent hos Know IT Objectnet og har vore ansatt der sidan 2001. I løpet av denne tida har han jobba med fleire virksomhetskritiske systemer, blandt annet for Statens Vegvesen, Norsk Hydro og siste åra NSB. Siden 2007 har han hatt ansvar for FriKomPort og har også tidligere hold foredrag om prosjektet og finansieringsmodellen.

Data er viktigere enn kildekode på grunn av normalt lengre levetid. Åpne data er fritt å bruke og utvide, og skaper merverdi for både opphavsmenn og brukere. Åpne data har gitt stor verdi til de som har våget å gripe muligheten, og du selv kan gjøre det i dag!
Data er viktige, og i stor grad mye viktigere enn kildekoden til programmene som skaper dataene. Dette er fordi data og ikke minst dataformater ofte har mye lengre levetid enn den koden de opprinnelig stammer fra. Bruk av åpne data kan derfor gi mange fordeler, både på mange områder innenfor egen virksomhet og for fellesskapet utenfor. Selskapet GoldCorp gjorde i 2001 sine familiejuveler, nemlig geologiske data for den gamle gullgruven Red Lake, tilgjengelig for alle på Internett. Deretter utlyste de pengepremier for å finne nye gullårer i datasettet, noe som tiltrakk seg hundrevis av forslag fra hele verden hvor også svært mange førte til nye gullfunn. Både slik crowdsourcing og annen bruk av åpne data viser hvordan man kan sikre god organisering, håndtering, tilgjengelighet og optimal utnyttelse av viktige data, langt inn i framtiden! Gjennom denne introduksjonen til åpne data vil dette foredraget gi tilhørerne et utgangspunkt for å lære mer og ta i bruk åpne data på egen hånd.
Svein-Magnus er sivilingeniør i kommunikasjonsteknologi fra NTNU, og er ansatt som forretningsanalytiker i avdelingen for Digital Forretningsutvikling hos Objectware AS. Hans primære faginteresser omfatter webteknologi, innovasjon, sosiale medier, informasjonsarkitektur og brukeropplevelser, og han har arbeidet med disse fagområdene siden 2006. Svein-Magnus skriver jevnlig om faglige emner i sin weblog på http://blog.menneske.org og på Twitter som @SveinMagnus.

Datamaskinprogrammer egnes som litterære verk og vernes etter åndsverkloven. Det betyr i utgangspunktet at de reguleres av de samme bestemmelsene som f eks norsk lyrikk. Hvordan har det seg egentlig at dette ble resultatet – og er det lurt? I et program er funksjoner viktig, mens formen kan være sentral i poesi – og opphavsretten verner bare uttrykket. Opphavsmannen får en enerett til å utnytte verket – både poesi og program. Men til gjengjeld skal hvem som helst kunne lese lyrikken, skjønne den, bli klokere og dikte videre selv. Et program i objektkode lar seg i praksis ikke lese – er dette en slags bristende forutsetning for å gi det vern?
Datamaskinprogrammer egnes som litterære verk og vernes etter åndsverkloven. Det betyr i utgangspunktet at de reguleres av de samme bestemmelsene som f eks norsk lyrikk. Hvordan har det seg egentlig at dette ble resultatet – og er det lurt? I et program er funksjoner viktig, mens formen kan være sentral i poesi – og opphavsretten verner bare uttrykket. Opphavsmannen får en enerett til å utnytte verket – både poesi og program. Men til gjengjeld skal hvem som helst kunne lese lyrikken, skjønne den, bli klokere og dikte videre selv. Et program i objektkode lar seg i praksis ikke lese – er dette en slags bristende forutsetning for å gi det vern? Noen av disse spørsmålene besvares, samtidig som det gis en kort innføring i det opphavsrettslige vernet av datamaskinprogrammer, overgang av rettigheter i arbeids- og oppdragsforhold, og forholdet til patentering av programmer. Det forutsettes ingen forkunnskaper, så foredraget innledes med en presentasjon av opphavsmann, åndsverk og enerettene til å råde over programmet.
Jon Bing er forfatter og jusprofessor ved Senter for rettsinformatikk ved Universitetet i Oslo. Han er også prisbelønt for sine bidrag som romanforfatter, dramatiker, forsker og regnes som en foregangsmann innenfor internasjonal rettsinformatikk og opphavsrett. Han har ledet og deltatt i utallige råd, tillitsverv og utvalg både nasjonalt og internasjonalt.

En innføring i utvikling av et eksternt domenespesifikt språk i Scala. Med fokus på det praktiske, vil veien fra tekst til et fungerende språk presenteres
I blant har man behov for et lite domenespesifikt språk, for eksempel for konfigurasjon. Der en intern dsl av forskjellige grunner ikke strekker til, velger man gjerne enten svake property filer, eller verbos og vanskelig xml. En bedre løsning kan være å skrive et eget språk, spesialisert for oppgaven. Combinatory parsing, kjent fra funksjonell programmering baserer seg på å kombinere små enkle parsere for å bygge en komplett og mer kompleks parser. Scala, et moderne og kraftig språk for java plattformen, kommer med parser combinator bibliotek som en del av standard distribusjonen. Foredraget vil presentere hvordan man kan implementere et lite programmeringsspråk i Scala. Fokuset vil være på det praktiske mer enn det teoretiske, der det blir gitt en innføring i alle stegene nødvendig for å skrive et eget lite programmeringsspråk som kan benyttes fra Java.
Jon-Anders Teigen er en Scala entusiast med interesse for programmeringsspråk generelt. Han er en av grunnleggerne av scalaBin (Scala brukergruppen i Norge) i tillegg til å være en aktiv medlem av javaBin. Om dagen jobber han som Javakonsulent i JPro, og om natten hacker han Scala :-)

Fordi de fleste applikasjoner har forretningsregler mener enkelte at man trenger en regelmotor. Imidlertid medfører regelmotoren ofte høy kompleksitet og kostnader, i tillegg til at salgsargumentene er en illusjon. De fleste applikasjoner er tjent med håndtering av regler i kode eller en DSL.
Fordi de fleste applikasjoner har forretningsregler mener enkelte at man trenger en regelmotor. De besnærende argumentene er enkel regelutvikling og -forvaltning utført av forretningssiden og fortløpende endringer helt ut i det kjørende systemet. Når man starter utviklingen oppdager man at regelmotoren medfører høye kostnader innenfor utvikling, integrasjon og utrulling, dårlig støtte for automatisert testing samt spesielle krav til kompetanse og lisensbehov. Illusjonen om at forretningssiden skal skrive og vedlikeholde reglene blir etterhvert smertelig tydelig, og reglene må inngå i test- og utviklingsregimet som all annen applikasjonslogikk. Langt de fleste applikasjoner er tjent med å håndtere reglene i vanlig kode, alternativt med et enkelt DSL.
Trond Arve Wasskog er utvikler og CTO i Bekk Consulting. Han har jobbet med Java og Java EE applikasjonsutvikling i mer enn ti år, med fokus på smidig utvikling, kvalitet og vedlikeholdbarhet.

Utivkling av parallelle systemer blir stadig viktigere. Hvor mange utviklere behersker egentlig dette? Vi går igjennom noen enkle caser for å belyse problemstillingen.
Høyere ytelse oppnås ikke lenger ved å øke klokkehastigheten, men ved å kaste flere prosessorkjerner på problemet. Allerede i dag er det vanlig med 4 kjerner på skrivebordet, og denne trenden vil bare fortsette fremover. Hvis en ikke makter å utnytte parallelliteten, vil man om ikke lenge utnytte kun få prosent av ytelsen i systemet. For å kunne utnytte systemet fullt ut, må man få et bevisst forhold til parallellitet. Hvor mange utviklere behersker egentlig dette? Vi vil belyse denne problemstillingen gjennom noen enkle caser basert på bruk av tråd-mekanismer som finnes i Java i dag.
Fredrik Vraalsen is a Java developer/consultant at Know IT Objectnet, doing design and development on a large sales back-end system and client application for NSB. He is also a Scala enthusiast and co-founder of scalaBin as well as member of the JavaZone programme committee for the past two years. Fredrik received an M.Sc. degree from the University of Illinois at Urbana-Champaign in 2001 and has over 10 years of experience as a software developer working with J2EE, Swing client applications and Java/C++ on mobile devices. After graduating he was as a researcher and developer at SINTEF for 5 years with a focus on software development methodology, mobile systems and model-based security analysis.
Jon Marius Håkedal er utdannet Sivilingeniør fra NTNU (2004) og har siden 2005 jobbet som utvilker/konsulent for Know IT Objectnet. Han har vært med på å utvikle både klient- og serverside løsninger, og har erfaring med en bråte forskjellige teknologier. For tiden jobber han med en av norges største selvbetjeningsløsninger for bedriftsmarkedet.

I mange år har SOA vært ”det neste store” og mange har prøvd å innføre dette i små og store prosjekter. Foredraget omhandler erfaringene fra innføringen av SOA i et av Norges mest komplekse IT-prosjekter og forsøker å gi svar på hvordan SOA virker i stor skala og om det faktisk gir de gevinster man ønsket.
I mange år har SOA vært ”det neste store” og mange har prøvd å innføre dette i små og store prosjekter. Mange har feilet og dermed har begrepet SOA mistet mye av sin glans. Foredraget omhandler erfaringene fra et prosjekt som innførte SOA i en av Norges mest komplekse IT-prosjekter og som har oppnådd gode resultater. I prosjektet har man fått etablert en SOA plattform som eksponerer tjenester fra mange forskjellige baksystemer og lagd automatiserte prosesser som benytter disse tjenestene. Å benytte gjenbrukbare tjenester fra forskjellige systemer direkte i en fleksibel forretningsprosess har vært selve drømmen som SOA skal innfri. Gevinsten skal være mulighet for raskere endringer og billigere forvaltning. Foredraget prøver å svare på om SOA kan innfri dette og hvor svakhetene og styrkene i en tjenesteorientert arkitektur ligger.
Holger har vært konsulent i Accenture i 10 år og har lang erfaring som teknisk arkitekt på utviklingsprosjekter basert på Java. Han er nordisk leder for Accentures ”Execution Architecture” faggruppe som fokuserer på kjøretidsarkitektur for skreddersømsapplikasjoner. Han er nå sjefsarkitekt på et av Norges største IT-prosjekter hvor han har vært med å etablere en ny SOA-arkitektur og implementere en forretningskritisk applikasjon på denne arkitekturen.

Software Transactional Memory (STM) i Java the language
Nå som gratis vertikal skalering er ute av bildet og antallet kjerner øker, er samtidighetsproblematikk stadig mer aktuelt. Java støtter kun pessimistisk låsing, som mange mener ikke skalerer - verken kjøremessig eller kodevedlikeholdsmessig. Software Transactional Memory (STM) handler om optimistisk låsing som vi kjenner fra RDBMSene våre. Forskjellen er at STM håndteres internt i JVMen, uten å basere seg på en RDBMS.
Eirik Torske er utvikler hos BBS og har over 10 år i Java-land.

Hva må man tenke på før man begynner med webtesting, og hvordan unngår man en skjør test-suite som er vanskelig å vedlikeholde?
Webtesting er en testmetode hvor man tester applikasjonen gjennom brukergrensesnittet. Ved å gjøre dette simulerer testene faktisk bruk av systemet. Webtesting kan virke som en åpenlys og enkel strategi for å teste webapplikasjoner, men som mange har erfart er det ikke så enkelt. Å starte med webtesting uten en gjennomtenkt strategi fører i de fleste tilfeller til en test-suite som er skjør, treg og vanskelig å vedlikeholde. Slike test-suiter mister ofte verdien fordi de ignoreres av prosjektdeltagerene. Basert på erfaring med webtesting på flere prosjekter vil jeg gi tips og råd for hvordan man kan oppnå en webtest-suite som gir verdi for prosjektet og dets deltagere over tid.
Vegard Hartmann er fagleder for Kvalitet og testing i Bekk Consulting. Han har siden 2005 jobbet både med nyutvikling og forvaltning av en rekke applikasjoner.

Har du laget mange web services de siste 5 årene? Hvor mange av dem er blitt gjenbrukt? Har de vært lette å endre? Vi ser på hva vi har erfart, sant og usant i oppfattninger om integrasjon.
Integrasjon mellom systemer blir en stadig større del av budsjettene til IT-prosjekter. Over tid har en virksomhet gjerne mange systemer bygget på ulike teknologier. Derfor er det ofte kvaliteten på integrasjonen som avgjør om migrasjon til et nytt system lønner seg på sikt. Denne presentasjonen peker på noen vanlige fallgruver innen integrasjon, og dekker hva vi har hatt gode erfaringer med av retningslinjer når integrasjoner skal designes og bygges.
Tor Magne Lindeberg and Irene Blesvik both work as integration architects at ErgoGroup AS, one of the largest Norwegian software companies offering operations, solutions and consultancy services. They are part of the company's Java technology group. They studied together at NTNU and have 5 years experience in the software industry. They have been working with various technologies and environments, including J2EE/JEE, but primarily focused on integration.
Tor Magne Lindeberg and Irene Blesvik both work as integration architects at ErgoGroup AS, one of the largest Norwegian software companies offering operations, solutions and consultancy services. They are part of the company's Java technology group. They studied together at NTNU and have 5 years experience in the software industry. They have been working with various technologies and environments, including J2EE/JEE, but primarily focused on integration.

"Brent barn skyr ilden" sies det. Skyr du kodebasen din?
Hvordan kan man snu uleselig kode, lite tester og frustrasjon til noe positivt? Lær av det og aldri gjør det igjen!
Janniche har 5 års erfaring med utvikling av mer eller mindre domenedrevne Java applikasjoner. Hun er for tiden fagleder for Java i Bekk og har høy fokus på utvikling av god Java kode. Favoritt sitat: "Expert programmers are those who write code even idiot programmers can understand. Idiot programmers are those who write code not even expert programmers can understand."

Endring i bruk av systemutviklingsmetoder har mange likhetspunkter med endring av klesmoter. I denne presentasjonen viser jeg hvordan motesyklusene for systemutviklingsmetoder blir stadig kortere og hvilke mekanismer (retorikk) som fører til dette. Prinsippene for å lykkes med en ny utviklingsmetode anvendes på min egen, revolusjonerende metode ELASTIC.
De fleste utviklere vil i dag være "smidige" (agile), mens de tidligere kanskje ville være ”unified” (RUP) eller ”rapid” (RAD). For lenge siden var det til og med noen som ønsket å være strukturerte eller fossefalls. Er man ikke med på det siste sies det at man følger ”tradisjonelle” utviklingsmetoder, noe som neppe er positivt ment. I denne presentasjonen ser jeg på hva det er som styrer utviklingen av systemutviklingsmetoder. Særlig interessant er det å se på hvilken retorikk som brukes når nye utviklingsmetoder lykkes med å få store deler av systemutviklingsverden til å se lyset og mene at tidligere (tradisjonelle) utviklere og prosjektledere har vært mer eller mindre uopplyste og ineffektive. Jeg vil også presentere resultater fra en empirisk studie om utviklingsmetoder som demonstrere riktigheten av utsagnet ”jeg ser det, når jeg tror det”. Med andre ord at vi tolker observasjoner som mye mer positive dersom vi allerede tror på en positiv sammenheng. Erfaringer med smidige metoder blir altså mer positive fordi vi tror det er positive sammenhenger. Gjennomgangen av retorikken brukt i innføring og markedsføring av nye utviklingsmetoder oppsummeres i ti prinsipper for å lykkes med å lage en bestselger av en utviklingsmetode. Disse prinsippene demonstreres ved å beskrive hvordan jeg ville ha innført min egen, revolusjonerende (fiktive) systemutviklingsmetode ELASTIC (”Elastic development”). Denne metoden baseres på at dagens utviklingsmetoder tar alt for lite hensyn til variasjonene (elastisiteten) i kundens modenhet og usikkerheten i utviklingsarbeidet. Vi at denne elastisiteten gjør ELASTIC mye mer effektiv enn tradisjonelle utviklingsmetoder (agile, lean, RUP, RAD og fossefalls).
Tidligere jobbet som systemutvikler, prosjektleder og prosessforbedringsleder i Telenor og Storebrand. Professor ved Simula Research Laboratory og Universitetet i Oslo.

Spring Framework er et svært viktig verktøy for mange av oss, og de fleste har en grunnleggende kjennskap til rammeverket. Imidlertid er Spring et omfattende rammeverk, og det kan være en utfordring å holde oversikt over alt det kan gjøre. I denne lyntalen vil jeg presentere tre ting jeg mener det kan være fordelaktig å gjøre med Spring, men som mange kanskje ikke kjenner til.
Spring Framework er et svært viktig verktøy for mange av oss, og de fleste har en grunnleggende kjennskap til rammeverket. Imidlertid er Spring et omfattende rammeverk, og det kan være en utfordring å holde oversikt over alt det kan gjøre. I denne lyntalen vil jeg presentere tre ting jeg mener det kan være fordelaktig å gjøre med Spring, men som mange kanskje ikke kjenner til.
Karianne har en mastergrad i IKT fra Universitetet i Bergen, og er ansatt som konsulent i Javaavdelingen i Objectware. Hennes hovedinteresser er patterns, smidig utvikling og Spring Framework, som hun har jobbet med siden 2005. Karianne er svært aktiv i fagmiljøet, og er medarrangør av konferansene ROOTS og Smidig, samt Oslo XP Meetup.

Phidgets tilbyr en rekke sensorer og kontrollere som du kan styre fra PC-en din gjennom enkle API-er. Hardwaren er rimelig og API-ene er gode. Phidgets er perfekte for små hobbyprosjekter der du har lyst til å gjøre noe litt utover det vanlige.
Phidgets tilbyr en rekke sensorer og kontrollere som du kan styre fra PC-en din gjennom enkle API-er. Hardwaren er rimelig og API-ene er gode. Phidgets er perfekte for små hobbyprosjekter der du har lyst til å gjøre noe litt utover det vanlige. I dette foredraget presenterer vi hvilke sensorer og kontrollere som er tilgjengelig og dykker ned i kode for å se hvor enkelt det er å programmere mot phidgets API-ene. Vi gir en kort demonstrasjon av en applikasjon som benytter en RFID-leser til å løse utfordringer rundt tidtagning for mosjonsløp. Etter foredraget vil du ha fått ny inspirasjon og er klar for å ta fatt på nye spennende hobbyprosjekter.
Hågen jobber som konsulent hos Know IT Objectnet og har kompetanse på en rekke av dagens mest moderne buzzwords. Som ung var han en ivrig deltager i nulløp i det lokale idrettslaget, og han vil gjerne bringe det gode budskap om nulløpets fortreffelighet til de store masser.
Jan Eivind jobber som seniorkonsulent hos Know IT Objectnet. Han har 15 års erfaring med ulike teknologier, og har de siste 8 årene jobbet som arkitekt og utvikler i prosjekter med Java som plattform. Dette har gitt han bred erfaring innen J2EE (EJB2.0/3.0, JSP, WebServices), Spring, Hibernate, JPA og Swing.

Foredraget vil ta for seg erfaringer knyttet til Java arkitekturen som ble etablert for NAV Pensjonsprosjektet, et av de største Java prosjektene i Norge. Fokus vil ikke være på presentasjon av selve arkitekturen, men heller et utvalg av subjektive erfaringer som er gjort før, under og etter at arkitekturen ble tatt i bruk.
Pensjonsprosjektet i NAV har sannsynligvis vært det største Javaprosjektet som har foregått i Norge i de senere år. Flere hundre personer har vært involvert, bl.a. Javautviklere fra flere store konsulenthus. Foredraget vil ta for seg erfaringer knyttet til Java arkitekturen som ble etablert for dette prosjektet. I et prosjekt av denne størrelsen møter man på mengder av utfordringer og forventninger til arkitekturrollen fra ulike hold. Hvordan går man fram for å etablere en Java arkitektur, hva skjer typisk når arkitekturen tas i bruk, og hvilke erfaringer står man igjen med etter at prosjektet er levert. Fokus vil være på et utvalg av subjektive erfaringer sett fra innsiden fra en arkitekts perspektiv. Av temaer som omhandles kan nevnes tyvstarting, bygging av jernbaner og skip, UML - Unknown Modelling Language, De fordømte sjekklistene, White Tower arkitekter, Nei-generaler, Zen og kunsten å vedlikeholde en arkitektur, Lucky Luke og Don Quijote.
Kjetil Kristiansen er utdannet siv.ing fra NTNU, og er Senior Technology Architect i Accenture. Han har over 10 års erfaring fra større utviklingsprosjekter basert på Java, hovedsaklig som teknisk arkitekt/teknisk prosjektleder. Kjetil har de siste årene vært leder for applikasjonsarkitekturgruppen i NAV Pensjonsprosjektet, et av de største IT-prosjektene som har vært gjennomført i Norge, hvor han har vært ansvarlig for å etablere og vedlikeholde Java arkitekturen i prosjektet.

Erfaringsrapport fra hvordan teknikker fra Scrum kan fungere i ikke-utviklingsprosjekter.
Scrum er primært rettet mot programvareutviklingsprosjekter. Men metodikken er egentlig en samling av generelle teknikker for samarbeid i team. Mange av teknikkene fungerer derfor godt i ikke-utviklingsprosjekter, f.eks utredninger, kravspesifisering og andre aktiviteter. Det viser seg at bruk av tavle med ”user stories” og aktivitetslapper fungerer bra for å måle progresjon og holde fokus på oppgavene man ønsker å gjøre i neste periode. Derimot kan det være problematisk å vite hvordan man definerer ”user stories” som ferdige da de ofter løper over flere iterasjoner, og mange oppgaver avhenger av arbeid som skal gjøres av andre. I presentasjonen vil jeg drøfte disse problemstillingene og gi flere eksempler på hva som fungerer og ikke fungerer, fra et prosjekt hvor vi gjør IT-arkitekturbistand og SOA-governance utvikling.
Mario is an experienced developer and architect currently working with SOA, integration and IT-architecture at CIBER Norway. Ciber is an acknowledged consulting company, delivering mission critical solutions with strong focus on Java, and related technologies. Mario holds a Master of Computer Science from Norwegian University of Science and Technology. His main interests are SOA Governance, Enterprice Architecture, Scrum and software development on the Java platform.

Har du høye krav til ytelse? Dette foredraget viser deg hvordan du kan gjøre koden din raskere.
De fleste Javautviklere er i sin daglige jobb ikke spesielt opptatt av ytelse. Vi flytter stor sett data fra en database til en annen og er fornøyd hvis tallene stemmer. Men større datamengder og høyere krav til responstid har de siste årene gjort ytelse til et stadig viktigere tema. Dette foredraget viser konkrete eksempler på ytelsesforbedringer i en Java-applikasjon som tilbyr søk og analyse i store datamengder. Applikasjonen skal gjennom et webgrensesnitt levere beregninger i sanntid og dette stiller høye krav til ytelse. Gjennom stegvise optimaliseringer viser vi hvordan utregninger som først tok minutter endte opp med å ta millisekunder. For å få til dette måtte vi bruke ekstremt effektive datastrukturer, forstå hvordan Java allokerer minne, hvordan moderne CPU-arkitekturer fungerer, og ikke minst bruke noen lure triks der det trengs. Foredraget viser også ytelseforebedringer i HTML, CSS og Javascript, et område som blir stadig viktigere i ytelsessammenheng.
Eirik Bjørsnøs jobber som Chief Scientist hos Kantega i Trondheim. Der prøver han å finne teknologier og teknikker som kan hjelpe Kantegas utviklere til å jobbe bedre. Når han ikke jobber for Kantega utvikler Eirik SVNSearch, et endringsanalyseverktøy for versjonskontroll. Eirik har tidligere holdt foredrag på JavaZone og Smidig.

Hvordan lage java applikasjoner på embedded plattform med Java SE for Embedded på Single Board Computer. * Gjennomgang av Java SE for Embedded. * Introduksjon til JNI. * Oversikt over Single Board Computer. * Demo på EmbeddedArm TS-7800 med web-applikasjon med tilgang til analog og digital IO.
Å skrive applikasjoner for embedded plattform har lenge vært forbeholdt C og C++ utviklere. I dette foredraget vil jeg gi en oversikt over Java SE for Embedded og hvordan en med dette sammen med standard bibliotek kan lage web-applikasjoner på Single Board Computers (SBC). Foredraget vil gi en oversikt over Java SE for Embedded, hvordan dette skiller seg fra J2SE og J2ME samt distribusjon og lisensiering. Jeg vil videre gi en kort introduksjon til Java Native Interface for tilgang til maskinvare og drivere. Det vil også bli gitt en demo på EmbeddedArm TS-7800 SBC. Demoen vil vil gi innblikk i hvordan en fra webapplikasjon på en SBC kan få tilgang til analog og digital IO og demonstrere hvilken ytelse en kan forvente fra en slik applikasjon.
Kristian Berg er utdannet ved Høgskolen i Bergen og jobber som utvikler for InteliNet AS. Han har mer enn ti års erfaring med utvikling av network management løsninger for telekom industrien. Det siste året har han jobbet med å utvikle styring og overvåking av telekom-systemer på embedded plattform.

En dyp titt på hvordan håndtere kompliserte konfigurasjonsutfordringer i større Java applikasjoner ved hjelp av Constretto.
I dette foredraget vil jeg sette fokus noen av de mer komplekse utfordringene vi kan møte når det gjelder konfigurasjon av større Java applikasjoner. Hvordan skal vi kunne forberede våre applikasjoner for utrulling på et stort antall servere, på et mangfold av operativsystemer, i forskjellige stadier av utviklingsprosjektet. Dette på samme tid som vi ikke ønsker kompliserte installerings- og konfigurasjonsrutiner. For å hjelpe oss med å håndtere disse utfordringene har jeg utviklet Constretto, et rammeverk for avansert konfigurasjonsstyring. Jeg vil ta en dyp titt på hvordan Constretto kan tas i bruk, samt hvilke muligheter som finnes for tilpassing av rammeverket Til slutt vil jeg gå gjennom erfaringene vi fikk med bruk av Constretto i en forsikringsportal for Nemi forsikring. Hvordan vi der fikk et etterhvert meget godt forhold til drifterene.
Kaare Nilsen jobber til daglig som sjefskonsulent i Arktekk AS som utvikler og teknisk arkitekt. Han har over 10 års erfaring som programmerer og har lenge fokusert på åpen kildekode produkter, samt lettvekts-arkitektur og containere. Kaare er en velkjent foredragsholder innen mange Java og åpen kildekode emner, og er et aktivt medlem i miljøet rundt Maven.

Git er et distribuert versjonskontroll system. Github er gratis git repository med mye snacks!
Bruker du SVN enda? Lei av at ingenting funker når repositoriet ditt går ned? Lei av at det er tungt å branche? Lei av ikke å kunne gjøre lokale endringer? Sjekk ut git. Det løser disse problemene for deg. Bruk github for å komme enkelt igang.
Utvilker som liker å holde meg oppdatert innen nye språk, teknikker og utviklings metodikker. Hatt fulgt scala miljøet i 1.5 år. Har utvikler applikasjoner i lift blandt annet scala.java.no. Har også i den siste tiden begynt å bruke git til personlige prosjekter. Bloggen min er blandt annet på github pages.

Automatisering gjort riktig, intet mindre. Eller hvordan fullføre det siste skrittet som ivaretar (ikke bare) utviklernes krav, drifternes, testernes og prosjektledelsens. Foredraget er basert på praktisk erfaring i prosjekter.
Smidig utvikling er noe som de aller fleste organisasjoner holder på med, men det begrenser seg typisk til planlegging, rapportering og utvikling. Vi som er utviklere ønsker å bruke minst mulig tid på oppgaver som tar bort fokuset fra utvikling. Testerne ønsker å kunne få en ny versjon av applikasjonen vår så fort som mulig og ikke minst akkurat når de ønsker det selv. Drifterne ønsker at de binære artefaktene som rulles ut i produksjon er identiske med dem vi har benyttet i utviklernære miljøer og i systemtest. Alle har fått til automatisert bygging og kanskje testing. Flere og flere har fått til periodisk deployment av applikasjoner. Hvorfor stoppe her? Det vi trenger er et komplett regime for automatisert deployment og utrulling, der de samme binære pakkene brukes i alle miljøer, også produksjon. Vi vil spille på lag med operativsystemets egne pakker og versjonsstyring og vi ønsker full fleksibilitet for å rulle opp og ned mellom ulike versjoner. For at en prosjektgruppe skal kunne fungere og for at produksjonssettingen skal være knirkefri, er vi avhengig av at alle ledd fungerer sammen. Dette foredraget er en praktisk innføring til hvordan vi tar det siste steget - og ikke minst hvordan vi plasserer oss selv øverst på skrytelisten til testerne og samtidig blir drifternes gullunger. Testerne vil elske oss fordi vi kan levere så raskt, mens drifterne vil sette stor pris på enkle rutiner uten unødvendige manuelle steg. Dessuten får de ikke testerne på nakken fordi alt bare fungerer! Foredraget er basert på praktisk erfaring i utviklingsprosjekter.
Kristoffer Moum er sjefskonsulent i Arktekk og jobber som utvikler, kursholder, scrum-master og teknisk arkitekt. Han har åtte års erfaring med utvikling av Java-løsninger. I tilegg har han ramlet innom stort sett det som finnes av produkter for kontinuerlig bygging og vet hva som virker. Kristoffer arbeider for tiden i et prosjekt hvis produkt shippes ferdig kjørbart nærmest per commit av kildekode.

Det har vært en til tider opphetet offentlig debatt om DLD en god stund nå. Siden dette er et tema som opptar mange i Java fagmiljøet så ønsker vi å la JavaZone publikumet ta del i debatten også. Hvis du lurer på hva DLD egentlig går ut på og hva du skal mene om det så bør du få med deg denne debatten!
Det har vært en til tider opphetet offentlig debatt om DLD en god stund nå. Siden dette er et tema som opptar mange i Java fagmiljøet så ønsker vi å la JavaZone publikumet ta del i debatten også. Hvis du lurer på hva DLD egentlig går ut på og hva du skal mene om det så bør du få med deg denne debatten! Paneldebatten avholdes 8 september, 10:15 til 11:15, i sal 1. Fra for-DLD-siden stiller: Reidar Brusgaard og Rune Utne Reitan (begge fra Kripos). Fra mot-DLD-siden stiller: Martin Bekkelund (Friprogsenteret) og Torgeir Waterhouse (IKT-Norge). Debattleder er Christer Gundersen fra Friprogsenteret Det vil være 2 innledende presentasjoner, og deretter blir det debatt. Publikum vil ha mulighet til å stille spørsmål. Vi håper at dette vil være med på å øke faktanivået i debatten og gi Java fagmiljøet en mulighet til å komme med sine synspunkter på DLD.
Konstituert direktør Friprogsenteret.
- Jurist, jobbet i politiet siden 1997 - 12/13 års tung(!) erfaring med organisert kriminalitet og utradisjonelle metoder - Bakgrunn som politijurist, statsadvokat, etterforskningsleder, teamleder i spesialenheten Catch - Er i dag seksjonsleder på Kripos (dvs leder for alle etterforskerne på Kripos), har ansvar for prioriteringer og veivalg i alvorlige straffesaker. - Har hatt prinsippsaker om politiets "metoder" i Høyesterett, har deltatt i høringer, underviser på PHS og har holdt mange foredrag om emnet, har skrevet Master og har levert PhD-skisse vedr Orgkrim (Handelshøjskolen i København, CBS). - Deltatt i DLD debatten de siste månedene.
- Politioverbetjent på Kripos. - Ble nylig tilsatt som taktisk etterforskningsleder på Orgkrim, hvilket innebærer at han har det daglige, taktiske ansvaret for ledelsen av store Orgkrimsaker som Kripos etterforsker. - Har lang erfaring med utradisjonelle etterforskningsmetoder (fra saker), og har også hatt utradisjonelle metoder som et særlig ansvarsområde på Kripos. - Har hatt en sentral rolle ifm høringssvaret til Kripos. - Har mye praktisk erfaring med KK, romavlytting og andre tilsvarende metoder som inngår i DLD-diskusjonen.
Torgeir Waterhouse begynte i IKT-Norge i mars 2008 og jobber som prosjektleder. Torgeir kommer fra Forbrukerrådet hvor han har vært ansvarlig for IKT og Media.
Martin har en høyere IT-utdannelse fra NITH og har arbeidet i IT-bransjen siden 1999, både i Norge og internasjonalt, hvor han har arbeidet med strategiske, virksomhetskritiske IT-løsninger. For tiden arbeider Martin som utviklingsleder ved Friprogsenteret, hvor han har det overordnede informasjonsansvaret.

An overview of functional programming and its benefits, with a focus on the possibilities offered by various languages on the JVM. Examples used are written in Scala, Clojure and Java.
Funksjonell programmering er et programmerings-paradigme eldre enn objektorientering, som har fått en økende popularitet de siste årene. Denne presentasjonen ser på hvilke fordeler man har med funksjonell programmering, og hvilke muligheter man har på JVM. Illustrert med eksempler skrevet i Scala, Clojure og Java.
Eivind er faggruppeleder for Java-gruppen i BEKK, og har over 10 års erfaring som konsulent på Java- og JEE-relaterte prosjekter. Det siste året har han skrevet en masteroppgave ved universitetet i Oslo, med fokus på domene-spesifikke språk på JVM og hvilke muligheter ulike programmeringsspråk tilbyr. Eivind har holdt presentasjoner på JavaZone i mange år.

Since JUnit 4.0 was released over 4 years ago several advanced features have been added to the framework. This presentation covers some of those features including assumptions, theories and rules.
Det er over 4 år siden JUnit 4 ble introdusert. JUnit 4.0 hadde allerede støtte for grunnleggende enhetstesting, så hva har skjedd i de neste versjonene? Jo, mer avansert og til dels eksperimentell funksjonalitet har blitt lagt til. Presentasjonen tar for seg noe av det som gjør at JUnit 4 er blitt et avansert og utvidbart testrammeverk: * assertThat * Assumptions * Theories * Rules
Thomas E. Bjørge er utdannet siv.ing fra NTNU, og jobber som utvikler i Sirius IT, hvor han også er ansvarlig for fagområdet java. Han er spesielt interessert i enterprise Java utvikling og smidige utviklingsmetoder. Thomas har 5 års erfaring fra utviklingsprosjekter i offentlig sektor og har jobbet 3 år som utvikler av virksomhetskritiske batcher og tjenester på Sirius IT sin del av Pensjonprogrammet i NAV.

Many web applications have some part of it that users want to use also when not connected to the internet. We will show how we enabled a part of our web-based system for offline usage by leveraging Google Gears and new APIs in HTML 5.
Har du noen gang tenkt at "Ja, dette vil jeg lage som en webapp" bare for å komme på at "jamen, systemet må også kunne brukes uten netttilgang"? I utviklingen av nytt system for vurdering av søknader om forskningsmidler for Norges Forskningsråd dukket dette behovet opp. Med dagens teknologi er det ikke lengre behov for å bruke tradisjonelle offline-formater og produkter som PDF, Word og Excel for å tilby funksjonalitet også når man er offline. Google Gears brøytet veien for offline web mens nye standarder i HTML 5 asfalterer veien videre. I dette foredraget går vi gjennom hvordan vi har løst utfordringen med offline tilgang ved å bruke Google Gears og veien videre med HTML 5. Vi vil vise hvordan arkitekturen settes opp, hvordan man tilgjengeliggjør websider og data offline, hvordan man sender disse tilbake til server og sørger for konsistens. Alt med kodeeksempler og live demo.
Trond Marius jobber som seniorkonsulent i Mesan. Han har jobbet som Scrummaster, teamleder og teknisk arkitekt i flere prosjekter bl.a hos Forskningsrådet. Han er opptatt av å lage gode løsninger som oppfyller behovene til brukerne og bruker helst ny og moderne teknologi for å gjøre dette. Trond Marius er medlem i programkomiteen i JavaZone.

What is SOA governance and why is it mandatory to succeed in larger SOA implementations. This lighting talk will give an example of a SOA governance reference model and explain SOA goals, principles and processes. It also gives examples on what part of SOA governance that can be automated with tools and what cannot.
Mange hevder at SOA governance er nødvendig for å lykkes med SOA, men hva er egenlig SOA governance? Denne lyntalen vil gi et innblikk i hva SOA governance er for noe, om det er nødvendig og når man trenger det. Det blir gitt et eksempel på en SOA governance referanse modell og forklaring på SOA governance- prosesser, målsetninger, prinsipper og organisering. Lyntalen kommer også inn på eksempler på områder innenfor SOA governance som kan automatiseres ved hjelp av verktøy.
Rune Wiik har jobbet applikasjonsarkitektur i 20 år og med SOA de siste 5 årene. Han har holdt en rekke foredrag innenfor område siden 2004. Rune har jobbet med innføring av SOA og SOA governance hos blant annet Posten Norge og Statens Vegvesen.

Ever had to restart your application server because of high load and abysmal response times? Let's investigate! We'll look into how you'd detect live locks, memory leaks and sub optimal garbage collector configurations.
Når måtte du sist restarte applikasjonsserveren fordi responstiden var råtten og lasten på server var høy? Vet du hvordan du kan finne ut om en kræsj ble forårsaket av garbage collection eller live lock? Denne presentasjonen vil vise deg de mest vanlige luktene du skal være på vakt mot, og demonstrere noen verktøy for å analysere problemet. Vi går mer i dybden rundt hvordan disse problemene oppstår når vi utvikler, og se på noen anti-patterns som bør unngås. Eksemplene er hentet og isolert fra fra ekte netttjenester med høy trafikk! Etterpå vet du hvordan du kan anvende VisualVM, YourKit og et antall nyttige kommandolinjeverktøy til å sjekke helsetilstanden på søppelhaugen (heap) og trådene.
Henning Spjelkavik is one of the chief architects behind Skiinfo.com and the map solution at FINN.no. He has 10 years of server side experience with java, and enjoys reading and testing new methods and methodologies, and analysing problems. You might have met him at JavaZone or Smidig talking about maps, lean, systems thinking or character encoding problems.

We have always said that re-inventing the wheel is stupid. We have made fun of people suffering from NIHS (Not Invented Here Syndrome). But sometimes I wonder if we where the stupid ones...
Det er en etablert sannhet at vi ikke skal lage egne rammeverk - når det allerede finnes etablerte rammeverk der ute. Web verdenen er et godt eksempel på et område hvor dette kanskje er spesielt aktuelt. Det er nå flere Java web-rammeverk enn vi kan telle, og nye dukker fortsatt opp med jevne mellomrom. Tanken på å lage sitt eget web-rammeverk virker nok rimelig søkt for de aller fleste. Dette hindret derimot ikke oss... to ganger. I de to siste prosjektene vi har vært med på er det nettopp dette vi gjorde. Dette skjedde litt på grunn av tilfeldighetenes spill, litt fordi vi rett og slett hadde lyst, men mest fordi vi syntes de tilgjengelige rammeverkene var for dårlige. Vi tenkte, som så mange før oss, at det burde være mulig å gjøre dette bedre selv. Med et fundament basert på rammeverk som Spring, Jersey og jQuery satt vi oss fore å lage et rammeverk som kunne gi oss raskest mulig time to market, samtidig som det skulle være vedlikeholdbart over tid. På tross av etablerte sannheter og "sunn fornuft", mener vi dette var et riktig valg. I dette foredraget ønsker jeg oppsumere erfaringene fra disse to prosjektene. Hva ble konsekvensene av valgene våre? Hva fungerte? Hva tok vi med videre i prosjekt nr. 2. Hva var det som ikke fungerte? Er vi fortsatt like fornøyd nå over 1 1/2 år etter produksjonsstart av prosjekt 1? Og ikke minst - hva skal vi ta med til neste prosjekt? Jeg vil også kort introdusere en åpent tilgjengelig showcase applikasjon, hvor dere selv kan studere prinsippene disse to applikasjonene er bygget på.
Kaare Nilsen jobber til daglig som sjefskonsulent i Arktekk AS som utvikler og teknisk arkitekt. Han har over 15 års erfaring som programmerer og har lenge fokusert på åpen kildekode produkter, samt lettvekts-arkitektur og containere. Kaare er en velkjent foredragsholder innen mange Java og åpen kildekode emner, og er et aktivt medlem i miljøet rundt Maven.

Writing clean code affects security. Here is how.
Det er vanskelig å legge sikkerhet til et system. Årsaken er at sikkerhet ikke er en ting som kan "legges til". Klarhet i kode gjør antagelser, misforståelser, og dermed feil, mindre sannsynlig. Tradisjonelle kodekonsepter som abstraksjon, innkapsling, kontrakter og navngivning er derfor viktige tema også når det gjelder sikkerhet. I denne lyntalen vil jeg gi utviklere kunnskap om hvordan de kan produsere sikrere kode.
Knut Vidar er sivilingeniør i datateknikk fra NTNU og arbeider som konsulent i Itera Consulting. Til daglig jobber han med systemutvikling i Java. Knut Vidars hovedinteresser er utvikling på web, programmeringsspråk, applikasjonssikkerhet og kodekvalitet. Han sitter i styret i OWASP Norway Chapter.

By utilizing dynamic subclasses, you can create APIs which taste as sweet as sugar, but that defies the understanding of most developers. This presentation will look at libraries which can make your code easier to grasp, but harder to grok.
Dynamiske subklasser gir deg kode søt som sukker og magisk som voodoo. Det siste årene har det kommet flere biblioteker til Java som utnytter generering av bytekode på kreative måter for å lage veldig elegante API'er. Resultatet er kode som uttrykker ting veldig godt og konsist, men som virker på måter som virker magisk for de fleste. Ved å forstå magien, kan du nyte det kraftige verktøyet uten å sove dårlig om natta. Dette foredraget viser noen eksempler på slike API'er og noen erfaringer fra å lage et slikt API.
Johannes har jobbet med Java i ti år. I en årrekke drømte han om at et nytt og bedre språk skulle ta over etter Java. Han har nå gitt opp drømmen, og interesserer seg i stedet for hvordan å gjøre Java til et bedre språk. Til daglig jobber Johannes som softwarearkitekt og Scrum master på prosjekter innen offentlig sektor. Han er chief scientist i Steria.

Good old silo applications combined with EDA-style messaging is the way out of the "SOA mess".
SOA-evangelistene har i mange år fortalt oss at siloapplikasjoner er noe vi må kvitte oss med så fort som mulig og erstatte med sammensatte applikasjoner basert på et "univers" av distribuerte (web)tjenester. En SOA-implementasjon ihht til en slik oppskrift går rett i mange av fallgruvene som er listet opp i "The Eight Fallacies of Distributed Computing", og skaper store problemer både ifm (videre)utvikling og drifting av slike løsninger. Siloapplikasjoner kombinert med asynkron meldingsutveksling (EDA) mellom applikasjonene løser mange av disse problemene. Dette gir en enklere applikasjonsarkitektur med løsere koblinger mellom systemer slik at det blir lettere å videreutvikle applikasjonene uavhengig av hverandre, det gir økt oppetid, og det forenkler applikasjonsdriften.
Per Spilling is a developer/architect/process mentor with 22 years experience in working with object technology (C++, Ada, Python, Actor, Concurrent C++, CORBA, Java). He is currently working as a principal consultant at Itera Consulting/Objectware in Oslo. His main work related interests are software architecture, software craftsmanship, DDD, agile methods and agile development tools. Per has been a member of the JavaZone program committee for the last 6 years.

HA-solution anno 2010. This lightning talk will highlight the problem areas and describe a set of practical cloud solutions.
Mange bedrifter betaler alt for mye for å være tilstede 24/7, og mange leverandører lever fett på å selge HA-løsninger kundene egentlig ikke trenger. Hva slags kriseløsning trenger man og hvilke krav stilles det til den? Hvordan løse dette i skyen trygt, raskt og billig? Denne lyntalen kategoriserer problemområdene og skisserer et sett med praktiske skyløsninger.
20 years experience as an IT-consultant and CTO, both in Norway and internationally. Expert resource for a lot of large java and open source products since 1995. Speaker at local (Norwegian Computer Society, various conferences) and international conferences (JavaZone in Norway, Component Computing in Finland), teacher and presenter at company-internal courses throughout Europa and an ambassador for sharing experiences and knowledge. Has experience with a lot of business domains through a lot of different projects. Currently working for Webstep in Norway with focus on enterprise- and solution architecture, coaching development teams and delivering solutions on open source and java platforms.

When complex matters become easy to configure, making mistakes becomes even easier than it used to. Spring transaction allows anyone to configure transactions with ease, but what happens when everyone does, even those with limited understanding of this complex matter?
Når det blir enkelt å konfigurere forholdsvis kompliserte aspekter, blir det samtidig lett å gjøre feil. Med Spring og @Transactional annotation har konfigurasjon av transaksjoner blitt noe hvem som helst kan gjøre. Men hva skjer når hvem som helst gjør det, også de med begrenset kunnskap om og erfaring med transaksjoner? Denne presentasjonen vil starte med å forklare hvordan transaksjoner settes opp i Spring, betydningen av en del transaksjonsinnstillinger. Videre vil den vise eksempler på svært uheldig transaksjonskonfigurasjon. Samtlige eksempler er tatt fra virkelige prosjekter. Avslutningsvis vil det komme anbefalinger på hvordan transaksjonene burde konfigureres. Presentasjonen vil forsøke å sette seg i utviklerens posisjon. Hva foregår i hodet på utvikleren når transaksjonen konfigureres hakkende galt? Hva i alle dager får for eksempel noen til å bruke REQUIRES_NEW? Hvorfor føler noen at NEVER er en god ide?? Og hva skjer når neste junior forsøker å "fikse" NEVER ved å slenge NOT_SUPPORTED foran...
Morten er en selvutnevnt Springevangelist. De siste årene har han jobbet med Spring og Spring Batch i forskjellige prosjekter i Norge og utlandet. Når folk sier at Spring er skyld i deres problemer pleier Morten å si "Spring doesn't kill people, people do".

Have you ever made your own client to monitor and administer your application? I will most likely show an awesome alternative way of doing that with SSH.
Har du noengang lagd egne klienter for å overvåke applikasjonen din? Eller bygd dashboards med JMX? Da har du kanskje gjort ting mere komplisert for deg enn du trenger. Jeg vil vise hvordan man kan bruke SSH for å lage lette terminalbaserte applikasjoner for å overvåke og administrere enhver Java-applikasjon. Implementasjonen som vises vil være basert på mitt 'termos'-prosjekt som er en implementasjon av readline/editline med sukker på.
Trygve Laugstøl jobber i Arktekk som utvikler, arkitekt og har mange års erfaring med Java-utvikling. Han har lang erfaring med utvikling og bruk av åpen kildekode som kjerneutvikler av Maven 2 og Continuum. Trygve har jobbet lenge med utvikling av plugins som støtter opp om smidig utvikling og som rådgiver innenfor disse områdene.

Explore and accomplish stuff with the interactive console! A discussion (with live demonstrations) of some uses and benefits of interactive ('REPL' - Read Eval Print Loop) programming. Livecoding demos in Java, JavaScript, Ruby and Clojure.
Noen ganger er det for tungvint å lagre kode! Iblandt ønsker du bare å leke og lære - ikke skrive produksjonskode. Eller kanskje du har noe seriøst å utrette... men oppgaven er så liten at det blir kostbart å lage og vedlikeholde ny funksjonalitet. Da bør du prøve litt "fri-programmering" i et interaktivt miljø! Dette foredraget tar for seg et vanlig verktøy i mange dynamiske språk: det interaktive konsollet, også kjent som 'REPL' - 'Read Eval Print Loop'. Slike verktøy og miljøer gir deg kortere feedback-løkker og økt produktivitet. Vi skal se nærmere på når, hvordan og hvorfor du bør benytte deg av dette. Foredraget består av praktiske demonstrasjoner, morsom programmering (JavaScript, Ruby og Clojure)... og minimal tørrprat. Vi starter med det nyttige og jordnære (webutvikling) og ender i mer eksotisk og gøyalt stoff (3d-grafikk og enkel spillutvikling). Ta med popcorn!
Thomas har over et tiårs bred erfaring fra en mengde teknologier og arbeidsroller. Han elsker høynivå programmeringsspråk, fleksible verktøy og lettvekt teknologi. Thomas lærer stadig nye ting, og setter stor pris på å dele erfaringer og meninger underveis.

The dreamapp project is a maven archetype to generate a selfcontained "application" server. The server can be run standalone as an executable war, inside your IDE, with maven jetty:run or deployed in an application server. The idea is that the "hard" parts are solved so you can start with the business code faster, and be able to show some real results after first iteration. I have hope that others fork my dreamapp and create their own, that way we can share ideas!
Min drømmeapplikasjon "dreamapp" er en maven archetype som genererer en bundled executable java jetty webapplication. Man kan kjøre applikasjonen på fire måter, med maven jetty:run, som en unit test i din IDE, som en executable war eller i en appserver som en normal war applikasjon. Uansett hvordan du velger å kjøre den skal den oppføre seg likt, og tilby et "komplett" miljø med konfigurasjonsmuligheter og database klart til å produksjonssettes. Jeg så nylig en tweet som sa: "@benrady: Starting a new project. Step #1: Deploy" Dreamapp gir deg en flying start. Dreamapp ligger på github som gir open source utvikling en ny dimensjon med "sosial" koding. Målet mitt med dreamapp er at det skal bli forket i mange "dreamapps". Jeg har allerede forket applikasjonen selv i dreamapp-batch som genererer et skjelett for en typisk batch applikasjon. Så kom igjen, vis meg din "drømmeapplikasjon"!
Bjørn Nordlund is head architect at BBS and his main goal with programming and system development is to make things simpler and more manageable. To achieve this it is important to understand, identify and solve the real problem, which is often concealed behind technical impediments.

Deportalization (d13n) is the process of porting from resource hungry portal framework to light weight frameworks and servers. This is an experience report on moving from WebLogic Portal to Spring MVC.
Avportalisering, eller deportalization (d13n), er prosessen med å frigjøre en applikasjon fra tunge portalrammeverk, og ta den over på lettvekts rammeverk og servere. Noen ganger blir en applikasjon spesifisert og utviklet med tyngre rammeverk enn det viser seg å være bruk for. Dette er en erfaringsrapport fra en vellykket slanking der vi har flyttet en applikasjon fra Oracle WebLogic Portal over til Spring MVC og Jetty uten synlige endringer for brukerne.
Håvard Wigtil er arkitekt og utvikler i Kantega AS, der han for det meste jobber med virksomhetskritiske løsninger innen bank og finans. Interesser inkluderer brukervennlige løsninger, åpne standarder og open source, men også nysnø og blå sjø.

Most projects sacrifice operational requirements on the alter of functionality. Consequently, both operations and development teams have to run from one critical situation to the other after going live. This session gives examples and advice how to handle operational requirements and behavior, providing example techniques and tools.
De fleste utviklingsprosjekter drives av funksjonalitet. De gode prosjektene fokuserer på vedlikeholdbarhet. Alt for få leveres med god driftbarhet. Tilrettelegging for drift bør prioriteres høyere i utviklingsprosjekter. Dessverre overskygges driftbarhet ofte av ensidig fokus på funksjonalitet. Resultatet er en kaotisk og uoversiktlig driftssituasjon med brannslokking og påfølgende etterarbeid. Denne sesjonen gir eksempler på hvordan man kan oppnå god driftbarhet med relativt enkle grep. Basert på positive og negative erfaringer fra flere prosjekter ser vi på hvordan applikasjoner kan tilrettelegges for drift samt konkrete teknikker og verktøy som kan benyttes.
Trond Arve Wasskog er utvikler og CTO i Bekk Consulting. Han har jobbet med Java og Java EE applikasjonsutvikling i mer enn ti år, med fokus på smidig utvikling, kvalitet og vedlikeholdbarhet.

10 steps towards robust batch processing is 10 easy steps based on years experience with batch processing of money transactions in BBS (banking, clearing and settlement).
Basert på mine 5 siste års erfaringer i BBS har jeg satt opp disse 10 enkle stegene for å lage stabile, enkle og driftbare batchsystemer. Etter dette foredraget vil du ha teknikker til selv å lage dønn stabile batchsystemer. Eksemplene baserer seg på ideer implementert i BBS som har kjørt i produksjon i flere år og som har vist seg svært stabile og driftbare. Eksemplene er implementert med Apache Camel ved å bruke komponentene i Camel, men også noen egenlagde komponenter. Det meste av det som blir presentert har sin bakgrunn i enterprise integration patterns. All implementasjonskode vil tilgjengeliggjøres. En viktig forutsetning for disse teknikkene og ideene er at ytelse ofte er ofret til fordel for enkelhet og robusthet, fordi kravene til batchsystemer ofte ikke er like harde på tid. Når det er sagt så har vi også kjørt nokså store transaksjonsvolum gjennom lignende arkitektur og den har vist seg å ha både tilfredstillende ytelse og tilfredstillende skalerbarhet. De 10 stegene kommer til å være outline på foredraget.
Bjørn Nordlund is head architect at BBS and his main goal with programming and system development is to make things simpler and more manageable. To achieve this it is important to understand, identify and solve the real problem, which is often concealed behind technical impediments.

Oslo has one of the strongest software development communities in the world. Is it possible to make it even better and make Oslo most important place in the world in regards to Software Development?
Oslo har et rikt fagmiljø. Til tross for at vi er kun 500 000, har vi har ett av de sterkeste Java-miljøene og den største Agile meetup-en i verden. I tillegg har vi ett tyvetalls mindre, men svært entusiastiske communities. Hvorfor har det blitt slik og er det mulig å gjøre Oslo til verdens IT hovedstad? I dette foredraget får du en oversikt over hvilke fagarrangementer som arrangerers jevnlig. Det blir rask diskutert hvorfor communities har så gode rammevilkår i Oslo. Avslutningsvis vil det blir diskutert hva som skal til for å ta ut hele potensialet og gjøre Oslo til verdens IT hovedstad.
Tobias er fagsjef i Know IT Objectnet. Han har 12 års erfaring fra konsulentbransjen hvor han stort sett har jobbet med utvikling av store mellomvareløsninger implementert i Java. Tobias er tidligere styremedlem i javaBin og satt i JavaZones programkomite fra 2004-2009. Tre av disse årene fungerte han som leder. Tobias har tidligere hold foredrag på javaBin, JavaZone, goOpen og rOOts.

Presentation of some of the not so obvious pitfalls when doing concurrent programming on Java
Det er et økende fokus på multitrådig i applikasjoner, og javaspråket tilbyr gode muligheter for å skrive multitrådete applikasjoner. Dessverre er ofte abstaksjonsnivået for lavt, og utviklernes kjennskap til minnemodell og JVM-optimaliseringer for dårlig. Dette kan føre til problemer og ytelsestap som ikke umiddelbart er lett å oppdage. Jeg ønsker å vise hvordan Java og JVM'en kan oppføre seg uintuitivt gitt visse problemer.
Øyvind er utdannet sivilingeniør fra NTNU og jobber hos Itera Consulting.

Real performance testing: Learn how to test your web application with WebDriver and Grinder.
Applikasjoner bør alltid testes grundig, og stadig flere begynner å sette opp en suite med automatiserte funksjonelle tester. Mange hopper imidlertid over testing av ikke-funksjonelle krav som ytelse fordi ytelsestesting har vært kostnadskrevende og vanskelig å få til. Vi vil vise hvordan dette lett kan gjøres ved å bruke funksjonelle webtester som ytelsestester, og demonstrere hvordan disse kan kjøres kontinuerlig.
Vegard Hartmann er Seniorkonsulent i Bekk Consulting. Han har siden 2005 jobbet både med nyutvikling og forvaltning av en rekke applikasjoner.
Øyvind er konsulent i BEKK. Han har siden 2008 jobbet med Java-utvikling i virksomhetskritiske applikasjoner, og innehar erfaring på automatisert testing. Han har også solid kompetanse på Smidige metoder, illustrert ved bl.a masteroppgave på NTNU, publisert artikkel, og foredrag om Scrum på både norske og internasjonale konferanser.

This lightning talk points out some pitfalls when implementing RESTful services and why REST is not always suited for the job.
REST-baserte tjenester er blitt populære og mange ønsker å bruke det i stedet for webtjenester og SOA. Men, REST egner seg ikke i alle situasjoner og utviklere får problemer når tjenestene skal implementere mer avanserte løsninger. Da må man ofte ty til løsninger som er tungvinte eller som bryter med prinsippene bak REST. Denne lyntalen diskuterer restriksjonene rundt REST og viser eksempler på hvordan man kan få problemer hvis man velger REST. Vit hva du gjør, kjenn restriksjonene rundt REST og ikke vær religiøs/fanatisk tilhenger!
André Wiik has made solutions based on Java for more than 10 years mainly in the telecom and banking industry where demands for high performance and availability is key requirements. He was part of Net4Call which was eventually acquired by Oracle. He has a pragmatic attitude towards challenges and is a promoter of open source software and agile methodology. Today André is Senior Consultant with Webstep AS in Oslo and serves as developer, architect or tech lead.

The talk examines the experience of conversion from CVS to Mercurial. What are the pitfalls one can encounter on, how the distributed model changes the workflow for developers, whether they like it or not, and my tips to others who are planning to switch to the distributed model of source code versioning.
Javaprosjektet jeg jobbet på hadde benyttet CVS i 6-7 år, CVS begynte å bli tungt og upålitelig, spesielt i bygge- og leveranseoppgaver. Vi måtte bytte det versjonskontrollsystemet og valget falt på Mercurial. Lyntalen tar for seg erfaringer med konvertering fra CVS til Mercurial. Hvilke fallgruver en kan møte på, hvordan den distribuerte modellen endrer arbeidsflyt til utviklere, enten de vil eller ikke, og mine tips til andre som har planer til å bytte til den distribuerte modellen av kildekodeversjonering.
Geir Andrè Lund is a senior knowledge engineer at Computas A/S, a norwegian based software services company. Currently a developer on a Java based project. Geir Andrè holds a Bsc. in Information Technology and Msc. in Information Systems, his main interest is Java-based technologies, agile software development practices and craftmanship.

We have all met requirements that are detestable. But do they need to be? This session will show that by restructuring your code and requirements and have testability in mind from the start, your tests will be simpler, faster and easier to maintain.
Testbarhet er et viktig kvalitetskriterie for kode. Det blir stadig mer fokus på automatisering av tester, og at større deler av kodebasen skal kunne testes ved hver innsjekk. Men, vi har alle møtt på krav som ikke lar seg teste like enkelt. Tester på slike krav blir ofte store med lang kjøretid og vanskelige å vedlikeholde. For å kunne lykkes med automatisering av tester er det viktig å bygge testbarhet inn i koden vår. For å mestre dette må vi tenke testbarhet både i arkitekturen vår og i arbeidet med kravene våre. Denne presentasjonen vil ta for seg konkrete eksempler på krav og typiske løsninger som kanskje ikke lar seg teste så lett. Gjennom omstrukturering av både krav og kode vil vi se at disse kravene kanskje ikke er så "detestable" allikevel.
Janniche Haugen har 6 års erfaring fra utviklingsprosjekter. Hun har høy fokus på testing og utvikling av god Java kode. Favoritt sitat: "Expert programmers are those who write code even idiot programmers can understand. Idiot programmers are those who write code not even expert programmers can understand."

This talk will show you how to make a runnable version of your web application.
Har du noen gang irritert deg over problemer med applikasjonservere? Har du revet av deg hår i ren frustrasjon mens du har lett etter mystiske problemer i produksjon? Denne lyntalen viser deg hvordan du kan lage en kjørbar versjon av en web applikasjon som kan være oppe å kjøre på en ny server på under 5 minutter.
Eirik jobber som java-utvikler hos Bekk Consulting. Han har det siste året jobbet på et større migreringsprosjekt som skal flytte en stormaskin-løsning over på java-plattformen.

A short introduction to the embedded database support in Spring 3.0 The introduction will cover: * Why use embedded database? * XML-based and programmatic configuration of the database. * Testing data access logic using embedded database.
Med Spring 3.0 har det nå kommet praktisk støtte for innebygde Java database motorer, inkludert HSQL, H2 og Derby. I dette foredraget vil jeg gi en rask innføring i: * EmbeddedDatabase og EmbeddedDatabaseBuilder. * Konfigurasjon av database i XML og programmatisk. * Praktisk demonstrasjon av EmbeddedDatabase for enhetstest av DAO.
Kristian Berg er utdannet ved Høgskolen i Bergen og jobber som utvikler for InteliNet AS. Har jobbet med utvikling av programvare siden 1997 og hovedsaklig med Java siden 2002. Hovedinteresse er styring og overvåking av telekom-systemer. Styremedlem i javaBin Bergen.

In this one hour presentation we will introduce you to the Android operating system. We will provide you with a brief history of the operating system, and give you an overview of the main concepts of Android development so that you can start developing your own Android applications. At last, we will introduce you to an application that make use of the concepts we have presented, and guide you all the way from development, to signing, and finally publishing the application on the Android Market. Welcome to Android 101!
Gartner har mobile applikasjoner på sin topp 10-liste over strategiske teknologier for 2010. Apple har med sin iPhone til nå vært nærmest enerådende i dette markedet, men har nå fått skarp konkurranse av Googles mobile operativsystem Android. Det selges mer enn 60.000 Android-enhter daglig, og Gartner spår at Android blir større enn iPhone i løpet av de neste to årene. Ikke bare er Android basert på Java, men utvilking er enkelt og ikke minst gratis å komme igang med. Dette foredraget vil fortelle deg hvordan. Android 101 gir en introduksjon til utvikling på Android. Etter en gjennomgang av Androids forhistorie, går vi gjennom de mest sentrale konseptene i Android SDK. Disse konseptene danner basis for å forstå hvordan man utvikler applikasjoner enkelt og effektivt. Vi avslutter foredraget med å gå gjennom et praktisk eksempel på utvikling av en applikasjon som nyttiggjør seg flere av disse konseptene. Vi viser hvordan applikasjonen kan debugges, før vi går gjennom hvordan applikasjonssigneringsprosessen fungerer. Etter å ha demonstrert dette, slipper vi den på Android Market!
Are er seniorkonsulent i Capgemini, og arbeider til daglig med utvikling og feilretting på NAV Pensjonsprogrammet. Stor entusiasme for internett, gadgets, programmering og åpne plattformer har smeltet sammen til et stort engasjement for Android i denne karen.
Truls er fagansvarlig for Java i Capgemini Norge, og har erfaring med utvikling, funksjonell design og teknisk arkitektur fra et av Norges største IT-prosjekter. Truls er opptatt av Open Source, og han lar seg begeistre av nye, åpne plattformer. Det var slik han møtte Android og ble en av initiativtagerne til Android-faggruppen i Capgemini.

How to practice unit testing and test driven development in JavaScript? This presentation walks you through challenges of unit testing JavaScript, a selection of available tools, specifically focusing on those suitable for TDD, and patterns for writing testable JavaScript. Finally, we take a look at tool integration, both for IDE's and continuous integration.
Enhetstesting og TDD/BDD er i dag fullt mulig også for JavaScript, men desverre ikke bredt praktisert. Hvilke verktøy er tilgjengelige for JavaScript-testing? Hva slags problemstillinger møter vi når vi enhetstester JavaScript? Hvordan kan JavaScript-testing jobbes inn i den øvrige utviklingsflyten? Det finnes konseptuelt forskjellige teknikker for å teste JavaScript - via nettlesere, emulering, eller i hybridmiljøer. Dette foredraget tar for seg fordelene og ulempene ved de ulike teknikkene samt gir eksempler med verktøy fra hver leir. Gitt et godt testeverktøy ser vi på noen patterns for testbar JavaScript og hvordan vi kan teste noen konkrete aspekter som er vanlige i JavaScript-programmering. Avslutningsvis ser vi på hvordan JavaScript-testing kan integreres med Maven og continuous integration-verktøy så som Hudson.
Christian Johansen jobber som programmerer i Shortcut, der han primært fokuserer på utvikling av løsninger for web og mobile platformer. Hans hovedfokus har i mange år vært frontend-utvikling med teknologier så som HTML, CSS og ikke minst JavaScript. Christian har jobbet med frontend for web for flere av Norges største selskaper, og har over en lengre periode vært spesielt opptatt av å gjenskape utviklingsmiljøet han kjenner og brenner for på server-siden for JavaScript. Dette inkluderer gode verktøy for testing som kan tilrettelegge for testdrevet utvikling. Erfaringen med slike verktøy for JavaScript summeres opp i boken "Test Driven JavaScript Development" som slippes via Addison-Wesley Professional høsten 2010.

Agility should be your means, not the goal itself.
Plans are worthless. Planning is essential. - Dwight D. Eisenhower, general and president (1890-1961) Sett det altfor mange ganger; smidighet er målet og ikke middelet. Hvor mange ganger har du ikke hørt: "Da blir det ikke smidig!" Hva er egentlig målet ditt da?
Senior consultant. Developer with more than 10 years experience of Java projects, some of them using agile methods.
Managing Consultant. Profet for Agile methods in Capgemini Norway, and an experienced user of agile methods.

Cloud, business value, decisions, psychology
Denne presentasjonen vil ta en case-orientert gjennomgang av de psykologiske barriærer som hindrer norske bedrifter i å realisere gevinstene ved cloud computing. Presentasjonen vil være praktisk rettet, hvor vi analyserer typiske personas og ser på de psykologiske hindringene disse har og geleider dialogen og prosessen rundt disse hindringene slik at man oppnår gode beslutningsgrunnlag. Siste del av presentasjonen vil være en en gjennomgang av typisk NEI-argumentasjon med relevante svar sett i IT anno 2010 perspektiv. Dette foredraget egner seg godt for utviklere og arkitekter som blir overkjørt hver gang de prøver å gjennomføre smarte løsninger.
20 years experience as an IT-consultant and CTO, both in Norway and internationally. Expert resource for a lot of large java and open source products since 1995. Speaker at local (Norwegian Computer Society, various conferences) and international conferences (JavaZone in Norway, Component Computing in Finland), teacher and presenter at company-internal courses throughout Europa and an ambassador for sharing experiences and knowledge. Has experience with a lot of business domains through a lot of different projects. Currently working for Webstep in Norway with focus on enterprise- and solution architecture, coaching development teams and delivering solutions on open source and java platforms.
Sun Java Champion and former president of the very successful Norwegian JUG javaBin and JavaZone. Member of the Advisory Board of java.net. Speaker on several conferences including JavaZone, JavaONE, CommunityONE, Microsoft Application Platform, Smidig, OMG Information Days, the Software conference and various others. With over 30 years of professional programming experience spanning quite a few programming languages he has contributed in both international and domestic projects in various roles, including project leader, technology mentor, software architect, lead developer, technology strategist and trainer.

This talk will present a way to fuse Model Based Development with web application framework Grails which is geared towards rapid development and prototyping. This is done using a plugin for the Eclipse Modeling Framework that is called "emf2gorm" to generate Grails domain classes from a EMF model.
Grails er på mange måter et glimrende vevapplikasjonsrammeverk, men det mangler fremdeles noen biter på å kunne kalle seg "Enterprisey", heldigvis. En av disse bitene er at rammeverket foreløpig ikke er godt støttet av de store modellbaserte utviklingsverktøyene. For å bøte på dette har det blitt utviklet en plugin til Eclipse som kalles emf2grails. Denne presentasjonen vil handle om hvordan man kan bruke Eclipse/EMF sammen med emf2grails for å gjøre modellbasert utvikling for veven med Grails.
Jeg jobber for tiden som utvikler i Machina AS. Det siste året eller så har jeg deltatt på et prosjekt der vi har hatt bruk for å samtidig ha fleksibiliteten og tryggheten som kommer med modellbasert utvikling og den raske utviklingstakten som er mulig med Grails. For å få til dette utviklet jeg emf2gorm og har brukt dette vertøyet igjennom hele utviklingen av det nevnte prosjektet.

This talk will describe a successful way to use development-, release-, bugfix- and topic-branches in Git and how the branching-strategy changes the way you work in your development process.
Git har de siste par årene tatt utviklere over hele verden med storm. Vi jobber mer fleksibelt, distribuert, offline, uavhengig og hvem-vet-hvordan. En av de store styrkene til git fremfor for eksempel subversion er måten branching og merging håndteres og mange strategier for hvordan dette brukes dag-til-dag finnes. I denne lyntalen vil jeg gå gjennom en fornuftig måte å bruke utviklings-, release-, feilretting- og topic-branches i git og hvordan disse spiller sammen i en utviklingsprosess.
Trond Marius jobber som seniorkonsulent i Mesan. Han har jobbet som Scrummaster, teamleder og teknisk arkitekt i flere prosjekter og har hatt ansvaret for bruk av versjonskontroll i disse. Git har etter en bratt læringskurve med mange feil valg gjort hverdagen enklere for hele teamet.

Writing concurrent software is complex, and there are many pitfalls and hazards to watch out for. However it is a lot easier to write threadsafe classes up front than to add concurrency later. What then should you do if you need to add concurrency to your existing system?
Vårt problem: fakturavolumet hadde vokst over hodet på vår Java batchapplikasjon. Etter iherdige forsøk for å øke ytelsen på vår serielle applikasjon, så parallellprosessering ut til å være eneste løsning. Vår første utfordring var å finne hvordan vi skulle parallellprosessere. Skulle vi bruke flere instanser av applikasjonen eller tråder? Valget falt på å bruke tråder, men hvor skulle vi benytte tråder, og var koden vi skulle parallellisere trådsikker? Kodebasen hadde vært utviklet over flere år, og ingen hadde dessverre fokusert nevneverdig på trådsikkehet. Neste steg på veien var derfor å analysere og dokumentere klassenes trådsikkerhet. Selve kodearbeidet gikk ut på å fjerne delt tilstand der det var mulig, og å dele opp og fyre i gang deloppgaver. Vår største utfordring var med en modul som måtte ha delt tilstand, og vi kommer til å presentere alle løsningene vi trodde ville virke, og den som til slutt fungerte. Implementasjonen vår brukte deler av Java 5 concurrency-APIet og vi kommer også til å demonstrere vår bruk og verifisering av denne koden. Vi hadde utviklet, verifisert, og ytelsestestet og valgte å produksjonssette. Dessverre oppstod mystiske feil i produksjon, og mistanken gikk straks til den nyinnførte trådingen. Vi fikk derfor også kost oss med den tidkrevende oppgaven med feilsøking av trådfeil. Gjennom presentasjonen ønsker vi å presentere steg for steg hvordan vi gikk fram, hvilke feil vi gjorde, og bakgrunn for de valgene vi tok. Vi vil også presentere noen generelle utfordringer innenfor parallellprosessering, inkludert implementasjon, testing, feilsøking, APIer og profilingverktøy.
Aleksander Blomskøld jobber til daglig som utvikler hos BBS. Han har erfaring både fra webutvikling og javabasert batchprosessering. Aleksander er generelt nysgjerrig på alt innenfor teknologi og programmering.
Rita Nordtug jobber til daglig som arkitekt og utvikler hos BBS. Hun har 10 års erfaring med utvikling og design av java applikasjoner, med fokus på smidig utvikling, ryddige og klart forståelige design og vedlikeholdbar kode.

Appengine is Googles platform for cloud computing. The talk gives a short introduction to Appengine, and how to avoid limitations and constraints in the platform and the SDK.
Appengine er Googles plattform for cloud computing. Appengine er enkel å komme i gang med, men begrensinger i plattformen og SDK kan være utfordrende. I foredraget vil jeg fokusere på begrensningene og strategier for å styre klar av disse.
Lars Søraas er utdannet cand.scient. informatikk fra UiB, og jobber som utvikler for Intelinet AS. Han har jobbet med utvikling av programvare siden BASIC var hot. Hovedinteresse er styring og overvåking av telekom-systemer.

Hands on with four NoSQL databases.
I dette foredraget får du en rask innføring i fire alternativer til relasjonsdatabasen. Vi ser på tilgjengelige APIer samt går gjennom og kjører eksempelkode for vanlige operasjoner. Sweetspot og spesielle egenskaper ved de forskjellige teknologiene blir også diskutert. Etter at du har sett foredraget kan du sjekke ut eksempelkoden og gå hjem og eksprementere med spennende teknologi. Du får god forståelse for når du bør vurdere de forskjellige implementasjonene.
Tobias er fagsjef i Know IT Objectnet. Han har 12 års erfaring fra konsulentbransjen hvor han stort sett har jobbet med utvikling av store mellomvareløsninger implementert i Java. Tobias er tidligere styremedlem i javaBin og satt i JavaZones programkomite fra 2004-2009. Tre av disse årene fungerte han som leder. Tobias har tidligere hold foredrag på javaBin, JavaZone, goOpen og rOOts.

Computer programs fail from time to time and it can be difficult to find the reason for failure. Common issues are often the root cause for failures in a production environment. The following three problem areas will be presented: improper initialisation, the use of arrays and database related issues.
Feil i produksjon er ofte merkelige. De kommer og går, og de kan være vanskelig å oppdage. Hvor gjemmer slike feil seg i produksjon? Hvordan gjenkjenner man dem, og hvor skal man begynne å lete. Dette er feil som kommer fordi situasjoner oppstår som man ikke forventer, eller som man tror aldri kommer til å skje, fordi datasystemer brukes ikke som forventet, og brukerne kan være svært kreative.
Margaretha Miles har jobbet i 25 år i Steria Norge med utvikling, testing og forvaltning. Hun har fått en god intuisjon om hvilke feil som typisk oppstår i programmer etter at de er levert.

In this talk, you will be given all the inside info on how to learn Scala effectively.
Scala har det med å fremkalle de store følelsene. I de siste månedene har vi lært oss Scala, og hatt humørsvingninger som manisk-depressive kan misunne oss. Det er ofte bare fem minutter mellom "hurra!" og "helvete!", og av de mange fallgruvene man kan snuble nedi har vi sikkert ligget i bunnen av mesteparten. Scala er svært kraftfullt, men har kanskje en noe bratt læringskurve. I dette foredraget vil vi dele den erfaringen vi har opparbeidet oss, slik at du slipper å gjøre de samme feilene vi har gjort når du lærer deg Scala og kan forsere læringskurven uten blåmerker på knærne.
Nina har en sivilingeniørgrad i Kommunikasjonsteknologi fra NTNU, og er ansatt som konsulent i Javaavdelingen i Itera Consulting (tidligere Objectware). Hennes hovedinteresser er programmeringsspråk, smidige metoder og kodekvalitet. Hun er aktiv i Java-miljøet i Oslo med sin deltakelse i møtegruppen til javaBin.
Karianne har en mastergrad i IKT fra Universitetet i Bergen. Etter to år i Oslo har hun nå nylig flyttet tilbake til Bergen for å jobbe som konsulent for Miles. Hennes hovedinteresser er patterns, smidig utvikling og spennende teknologi. Karianne brenner for et aktivt fagmiljø, og er medarrangør av konferansene ROOTS og Smidig og inntil nylig den månedlige møteplassen Oslo XP Meetup. Hun er også en ivrig foredragsholder, og har tidligere holdt foredrag på konferansene Smidig, Javazone, XP og NDC, i tillegg til ulike brukergruppemøter. Karianne har også opparbeidet seg ekstensiv kunnskap om ninjaer, delvis gjennom å ha sett dokumentarfilmen "Ninja Assassin" fire ganger. Da hun var liten sparte hun penger til nunchakus.

Pojos + JAX-RS = Simple REST: "Jersey is the open source (under dual CDDL+GPL license), production quality, JAX-RS (JSR 311) Reference Implementation for building RESTful Web services."
Denne presentasjonen er en introduksjon til en meget lovende spesifikasjon, JSR 311 og dens referanseimplementasjon, Jersey: "Jersey is the open source (under dual CDDL+GPL license), production quality, JAX-RS (JSR 311) Reference Implementation for building RESTful Web services." Pojo + JAX-RS = enkel og testbar REST.
Yngvar is a senior consultant and user interface expert at Bouvet ASA with Java experience since 1997. His primary fields of interest are AOP, rich user interfaces and interaction design.

Lot's of presentations on Map/Reduce use examples that cannot be related to real world problems. In this presentation I will show how you can use Map/Reduce to implement a scalable Collaborative Filtering Algorithm.
Map/Reduce er en effektiv måte å implementere løsninger som skalerer. Det finnes mange tutorials på Map/Reduce, men alt for mange av dem viser ikke hvordan man kan bruke Map/Reduce til å løse virkelige verdensproblemer. I dette foredraget vil jeg gi en kort intro til Map/Reduce og deretter vil jeg vise hvordan man kan kombinere flere Map/Reduce tasker til å løse oppgaver som man kan relatere seg til. Til slutt i foredraget vil vi ende opp med en Collaborative Filtering Algoritme som skalerer. Foredraget vil basere seg på Apache Hadoop, og vi vil også kjøre algoritmene på Amazon Elastic MapReduce.
Ole-Martin Mørk har jobbet med personalisering og algoritmer i Open AdExchange i to år. Open AdExchange blir overlesset med data hver dag og vi er helt avhengig av algoritmer som skalerer godt for å håndtere disse mengdene. Ole-Martin er del av et team på fire utviklere som jobber med disse utfordringene hver dag. Han har jobbet med Java i 12 år og har i den seneste tiden fått veldig sterk interesse for skalering av både programvare og kjøretidsmiljøer.

During this talk we will examine the alternatives when defining an interface (API/SPI) in Java, and the limitation each choice imposes on the continued development of that interface.
"Ikke bli lurt av Javas interface – klasser er ofte best til å uttrykke grensesnitt" Hvis et grensesnitt (API/SPI) skal benyttes av flere enn en liten gruppe programmerere bør utviklingen skje på en kompatibel måte. Inkompatible endringer bør kun utføres hvis nytteverdien er høy. Men hva er en kompatibel endring? Og vil ikke kompatibel utvikling av APIer ødelegge smidigheten? Gjennom dette foredraget vil vi se på alternativene man har ved utforming av Javagrensesnitt og hvilke begrensninger hvert enkelt valg legger på videre utvikling av grensesnittet. Noen av temaene vi vil berøre er: * Design for enkel videreutvikling. * Ditt grensesnitt, ditt ansvar: Enkel mocking og testing. * Viktige forskjeller mellom Javas kildekodeformat og bytekode. * 100% bakoverkompatibilitet er umulig. Vi går gjennom ved hjelp av kode og eksempler.
Stian Grenborgen jobber som Javaprogrammerer og applikasjonsarkitekt i BBS, blant annet med å utvikle APIer som blir benyttet i store deler av bedriften. Gjennom dette arbeidet, samt engasjement i "free/open source"-prosjekter, har han jobbet med og brukt fritiden på utvikling av Java-APIer.

Integrating systems seems to be a complex endeavour in many organizations. It does not have to be that difficult. Join me for some integration basics that will enable you to integrate and maintain the integration over time.
På QCon tidligere i år lanserte Stefan Tilkov begrepet CSOA eller fullt ut: Common Sense Oriented Architecture. Det er på tide at vi slutter å forsøke å kjøpe oss ut av problemet med dyre, kompliserte løsninger og benytter intelligensen vår i stedet. "There is no silver bullet" skrev Fred Brooks i et paper i 1986 og siktet til at det ikke finnes noen teknologi som dramatisk vil forbedre effektivitet innenfor et tiår. Det virker som vi ofte vil tro på denne sølvkulen. Integrasjon er vanskelig. Og det hjelper ikke at vi forsøker å unngå problemet med produkter. Disse produktene kan gjøre ting litt enklere, men de gir også ekstra infrastruktur, bugs, ukjent software og lite transparens. Ved å holde seg til enkle prinsipper og rammeverk kommer man faktisk lenger på kort tid. I dette foredraget vil jeg ta for meg noen glemte fakta om integrasjon, og vise hvordan man kan bruke abstraksjon og enkle rammeverk for å gjøre integrasjon på en god måte. Kanskje du skulle bruke RMI? Hessian? Eller litt REST? Litt WS-* kanskje? Alle er forskjellige, det viktige er å finne ut hvordan du kan utnytte de best. Vær pragmatisk og jeg lover deg at du får en mye hyggeligere hverdag. Dette handler i bunn og grunn om enkle prinsipper og kontroll, men vi har alt for lenge forsøkt å unngå å lære oss disse tingene. Det er på tide å ta til fornuften igjen!
Anders Sveen jobber som teknologileder for Java hos Capgeminin Norge. Han har over 5 års erfaring som utvikler og arkitekt med skreddersydde systemløsninger i Java, og har jobbet med smidig utvikling de siste 4 av disse. Han har hatt roller som spenner fra systemutvikler til scrum master, og jobber for at prosess og teknologi skal spille sammen slik at man kan maksimere potensialet av en smidig prosess.

Results from my studies suggest that people produce more realistic effort estimate when asked to first estimate under ideal conditions and then under realistic conditions. The studies, the possible reasons for the effect and the implications for effort estimation are presented.
Estimater av arbeidsmengde er som oftest overoptimistiske. Gjennom flere studier har jeg funnet at det å starte med estimering under ideelle forutsetninger (for eksempel i form av ideelle timer) for deretter å estimere mest realistisk arbeidsmengde medfører at estimatene blir mer realistiske. Den samme effekten fremkommer ikke dersom man starter med å estimere minimum arbeidsmengde. Presentasjonen går gjennom disse resultatene og hvordan dette funnet kan brukes til å forbedre estimering (og andre prediksjoner) i systemutvikling. Avslutningsvis vil NM i estimering bli avholdt.
Erfaring som programmerer, prosjektleder og gruppe leder i Telenor og Storebrand. Forsker ved Simula Research Laboratory og professor ved Universitetet i Oslo.

How can we get the motivation back into pair programming when programmers "forget" to pair up?
I prosjektet hadde vi bestemt oss for at parprogrammering var noe vi skulle gjøre. Selv om alle hadde vært med på avgjørelsen, fikk vi allikevel problemer med å gjennomføre det. Etter kort tid satt vi alle hver for oss og programmerte. I oktober 2009 dro jeg over til Kent Beck i Oregon på Code Camp '09, Iterates satsning på seniorutviklere. En av de tingene jeg lærte var hvordan man implementerer parprogrammering på en god måte. Jeg vil i denne lyntalen fortelle om hvordan jeg gikk fram for å reintrodusere parprogrammering basert på tips fra Kent Beck, hva vi gjorde annerledes denne gangen og hvordan vi nå greier å holde det ved like.
Morten er utdannet sivilingeniør i datateknikk fra NTNU og jobber som systemutvikler i Iterate AS.

An overview of the NoSQL landscape in 10 minutes. What are the NoSQL alternatives and where are their sweetspots?
I denne lyntalen går Tobias gjennom alternativer til relasjonsdatabasen. Han ser på fire tilnærminger til NoSQL og gir eksempler implementasjoner samt forklarer når man bør vurdere hvilke alternativ. Etter foredraget har du oversikt over hva som skjer i NoSQL-verden og vet nok til at du skjønner når du bør vurdere hvilke NoSQL-teknologi.
Tobias er fagsjef i Know IT Objectnet. Han har 12 års erfaring fra konsulentbransjen hvor han stort sett har jobbet med utvikling av store mellomvareløsninger implementert i Java. Tobias er tidligere styremedlem i javaBin og satt i JavaZones programkomite fra 2004-2009. Tre av disse årene fungerte han som leder. Tobias har tidligere hold foredrag på javaBin, JavaZone, goOpen og rOOts.

Git is hot - everyone wants to use it! But how do you best migrate from your current VCS? Is the tooling good enough? Do you need super-developers on your team? What workflows should you use? I will go through our experiences moving from ClearCase to Git in a large Java-based project, covering transition, challenges and daily use.
Git er et kraftig open-source, distribuert versjonskontrollsystem som er stadig mer i vinden, og mange ønsker å ta det i bruk. Hvordan får man til en smidig overgang fra sitt trauste sentraliserte versjonskontrollsystem? Er verktøyene modne nok? Kreves det superutviklere eller kan alle ta det i bruk? Hva slags arbeidsflyt og prosesser skal man bruke? Vi har tatt i bruk Git i et større Java-prosjekt som omfatter forvaltning og videreutvikling av et salgssystem. Systemet har vært i drift siden 2002. Inntil i fjor benyttet vi ClearCase som versjonskontrollsystem, men valgte å gå over til Git. Motivasjonen var å få bedre ytelse, flere muligheter samt å spare penger. I dette foredraget ønsker jeg å dele våre erfaringer med Git. Jeg vil dekke både selve migreringen fra et versjonskontrollsystem til et annet, utfordringer vi har støtt på og "best practice" for daglig bruk av Git i prosjektet vårt. Jeg vil også komme inn på hvilke andre alternativer vi evaluerte og hvorfor vi valgte Git.
Fredrik Vraalsen received an M.Sc. degree from the University of Illinois at Urbana-Champaign in 2001 and has over 10 years of experience as a software developer working with J2EE, Swing client applications and Java/C++ on mobile devices. After graduating he was as a researcher and developer at SINTEF for 5 years with a focus on software development methodology, mobile systems and model-based security analysis. Currently he is a Java developer/consultant at Know IT Objectnet, where he does design and development on a large sales back-end system and client application for NSB. He is also a Scala enthusiast and co-founder of scalaBin and has also been a member of the JavaZone programme committee for two years.

Lessons from real life security problems transferred into the field of software security. How these lessons can improve how we apply and think about security.
Sikkerhet har vært en del av samfunnet i all tid. Være det seg vakthold, låsing, beskyttelse etc. Sikkerhet i informasjonsteknologi kan dra mange lærepenger fra gamle erfaringer. Hvorfor ikke lære av historien slik vi gjør i alle andre fagfelt? Applikasjonssikkerhet er et ungt fagfelt med mange nye ideer, tankesett og utfordringer. Dette har ført til en usikkerhet til hvordan man bør angripe sikkerhetsproblematikk og få løftet sikkerhet opp fra sin status som den plagsomme i vennegjengen.
Thomas Pronstad jobber til daglig som konsulent hos Itera Consulting, og er utdannet Sivilingeniør i datateknikk fra NTNU. Thomas arbeider til daglig som systemutvikler på et prosjekt som PCI-sertifiseres. Gjennom siste års spesialisering innen sikkerhet og PCI-sertifiseringen har han tilegnet seg kunnskap om teoretisk og praktisk sikkerhet innen for web applikasjoner. Thomas interesserer seg for systemer, sikkerhet og hvordan man mest effektivt kan sikre dem.

An introduction to testing data access layers, and how Jailer makes the process of generating test data from existing production data a breeze.
Jailer er et open-source verktøy for generering av testdata fra eksiterende databaser. Verktøyet forenkler uttrekk av testdata fra en eksisterende database, ved å la bruker definere hvilke data og avhengigheter som skal hentes ut. I tillegg er det mulig å eksport data til sql, xml og Dbunit format. I dette foredraget vil jeg demonstrere hvordan man bruker Jailer til å trekke ut en subset av produksjonsdata, og eksportere det til et format som kan konsumeres av dbunit. I tillegg brukes Dbunit og Spring 3.0 embedded database for å demonstrere integrasjonstesting av DAO-lag i en applikasjon.
Erik Bakstad er utdannet Master IKT ved Universitetet i Bergen, og jobber som konsulent i Miles AS. Han har jobbet med Java EE siden 2007 og har god erfaring med teknologien. Han er spesielt interessert i smidige metoder og praksiser, søk og open-source.

node.js is an event driven serverside javascript framework that uses google's v8. Attend this talk to get an introduction to this new exiting javascript framework and learn how to get started.
Introduksjon til javascript rammeverket node.js. Node.js er et eventdrevet javascript rammeverk som bruker google's V8 javascript motor for å lage fleksible og skalerbare servere. Javascript språket egner seg veldig godt til event drevet utvikling. Rammeverket er lett å utvide siden det følger CommonJS standarden. Du skriver allerede frontend kode i javascript, hvorfor ikke prøve det på serveren?
Bjarte er en engasjert og utadvent person som liker å leke med ny teknologi. For tiden er det Scala, Android og Node.js som er hovedinteressene. Bjarte jobber som seniorkonsulent hos Know IT Objectnet.

Using the combination of Webdriver, JRebel and Jetty is magic for TDD development of web applications. You can start with test first and develop new features with zero turnaround time for build and deploy.
Hva skjer når man kombinerer WebDriver, et rammeverk for automatisert testing av websider, med dynamisk klasselasting fra JRebel og kjører dette på Jetty? Foredragsholderen mener at man får en magisk opplevelse av ekte TDD for webutvikling. Årsaken er at WebDriver gir muligheten til å skille verifisering av kravet fra navigering av websiden. Testene blir langt mer robust for endringer og mye tydligere i forhold til å forstå kravet. JRebel er et verktøy som gjør at man kan endre javakode på en kjørende server uten hotdeploy eller andre teknikker. Når man lagrer en kodeendring i IDEet oppdateres denne automatisk i kjørende Jetty serveren uten deploy. Dette er både enklere og langt raskere enn tradisjonell hotdeploy funksjonalitet som man f.eks. finner i Tomcat. I tillegg får man automatiserte tester som enkelt kan inkluderes i automatisert test og byggeoppsett (CI) basert på Maven.
Morten har jobbet som utvikler og arkitekt i 18 år på ulike plattformer (Java, Microsoft .NET, MVS/Cobol) og jobber for konsulentselskapet Miles. De siste 6 årene har han jobbet som utvikler og arkitekt i Java-prosjekter basert på Java SE, Spring, Hibernate og Maven. Han mener at utvikling er et håndverk som må læres og vedlikeholdes, og at kompleksitet er et onde som bør bekjempes.

Hvilke tjenester kunne du ha utviklet om du hadde fri tilgang til all rådata hos Statistisk sentralbyrå og Statens kartverk? Eller hva med hele NRK's arkiv i digital form? Denne våren har den nye portalen data.norge.no og gründer-konkurransen Nettskap 2.0 økt fokus på åpne offentlige data i Norge. I denne paneldebatten setter vi søkelyset på hva som blir gjort for å frigi data i det offentlige og hvordan dette kan skape spennende muligheter for oss som utviklere!
Hvilke tjenester kunne du ha utviklet om du hadde fri tilgang til all rådata hos Statistisk sentralbyrå og Statens kartverk? Eller hva med hele NRK's arkiv i digital form? Denne våren har den nye portalen data.norge.no og gründer-konkurransen Nettskap 2.0 økt fokus på åpne offentlige data i Norge. I denne paneldebatten setter vi søkelyset på hva som blir gjort for å frigi data i det offentlige og hvordan dette kan skape spennende muligheter for oss som utviklere! Det hersker bred enighet om at åpne offentlige data er noe positivt, men hvorfor er det da så vanskelig for det offentlige å tilgjengeliggjøre sine data? Hva slags potensiale finnes det i disse dataene fra et nyskaping/gründer/demokrati-synspunkt? I denne debatten får både dataeierne (representert ved Difi og Teknologirådet) og konsumentene (representert ved Oslo Open Data Forum) komme med sine betraktninger. Målet for sesjonen er at du som tilhører skal få et inntrykk av hva åpne offentlige data innebærer, hva situasjonen er i Norge i dag og hva man kan få til av nyvinning med tilgang på slike data. Kanskje blir du inspirert til å basere fremtidige prosjekter på åpne offentlige data eller kanskje engasjerer du deg i bevegelsen for å tilgjengeliggjøre mer offentlige data?
Prosjektleder for data.norge.no, Fornyingsdepartementet.
NTO, Microsoft Norge.
Prosjektleder IKT, Teknologirådet.
Senior Consultant, Itera Consulting og initiativtaker til Oslo Open Data Forum.
Prosjektdirektør, IKT Norge.

Apples “App Store Gold Rush” is over. What should a developer with an iPhone idea think of. How difficult are App Store releases to handle. With experience from an iPhone project available at App Store, these and more questions will be answered.
Apples “App Store Gold Rush” er over. Hva bør en utvikler med en iPhone-idé tenke på? Hvor vanskelig er det å håndtere Apples regime over hvem og hva som får lov til å slippes inn på App Store? Med erfaring fra et enkelt iPhone prosjekt, tilgjengelig på App Store, blir disse og flere spørsmål besvart.
Markuz jobber til daglig som senior konsulent på Objectware innenfor Java avdelningen. Han har drevet med systemarkitektur for Volvo og bankvesenet. På fritiden driver han med iPhone OS og Mac OS X utvikling. Han har siden tidligere lang erfaring innenfor Apple-verden.

See how much better Clojure is at handling concurrency than Java with the classical account example.
Det klassiske kontoeksempelet demonstrerer hvor vanskelig samtidighet (concurrency) er i Java. Clojure tar en helt annen vinkling på samtidighet. Kontoeksempelet blir enkelt i et språk som er laget for å håndtere denne type problemer. I denne presentasjonen vil du få en introduksjon til hvordan Clojure håndterer samtidighet på en bedre måte enn Java.
Alf Kristian har 6 års praktisk erfaring med utvikling i store og små Java prosjekter. De siste årene har hovedinteressen vært nyere funksjonelle språk på JVM'en som Scala og Clojure, da han mener at Java som språk ikke er egnet til å møte framtidens utfordringer. Alf Kristian jobber som seniorkonsulent hos Know IT Objectnet.

This lightning talk gives a quick introduction to the various classes of cloud computing services that are available, who provides them, what they can be used for and how they can make your life easier as a developer.
Denne lyntalen tar for seg hvilke typer skyer som finnes der ute, hvordan de kan klassifiseres og hvordan de kan brukes. Det vil bli gitt en rask gjennomgang av de mest populære alternativene og hvilke fordeler de gir deg som utvikler eller tjenestetilbyder. Etter presentasjonen vil tilhøreren sitte igjen med en god oversikt over de forskjellige tilbudene skyen har, så man raskt kan se verdier i forhold til egen IT-strategi og systemportefølje.
Anders Sandvig er en pragmatisk programmerer og problemløser med sans for elegante og smidige løsninger. Med bred erfaring fra flere bransjer som teknisk prosjektleder, systemarkitekt og systemutvikler har han god kjennskap til ulike utfordringer ved utvikling av virksomhetskritiske, distribuerte systemer med høye krav til stabilitet, sikkerhet, ytelse og skalérbarhet. Anders har jobbet profesjonelt som utvikler i over ti år og er i dag ansatt som seniorkonsulent hos Webstep i Oslo.

Aesthetics in languages is discussed rarely during software implementation. What is the benefit from writing aesthetically pleasing software, and how can we achieve such a goal?
Estetikk er et begrep altfor få softwareutviklere tar hensyn til ved valg av språk. Dette fører til at applikasjoner blir planlagt på designavgjørelser som har utelatt å ta opp et essensielt spørsmål; vil denne applikasjonen tjene på å bli skrevet i et språk som fokuserer på skjønnhet i kildekode? I denne lyntalen beskriver jeg begrepet om estetikk ved å bevege presentasjonen gradvis fra den tradisjonelle betydningen over til hvordan estetikk også er like aktuelt og synlig i språk. I lys av dette viser jeg at kildekode også er påvirket som en direkte konsekvens. Målet med lyntalen er å vise at skjønnhet absolutt er tilstede i språk og kan være med på å heve kvaliteten på programvare. Samtidig ønsker jeg å inspirere utviklere til å strebe etter en estetisk perfekt uttrykkelse i kode ved å vise hvilke fordeler det gir.
While Kris-Mikael is primarily a java developer working at Objectware, he has a strong fascination for eliciting the strength of programming languages and their available derivations. He means that doing so makes us able to unleash the true power from the software we write. Kris-Mikael loves the Ruby programming language and is utilizing its beautiful design to point out the importance of aesthetics in source code.

An introduction to the joys and woes of developing Android applications in Scala.
Scala er et programmeringsspråk som kjører på JVMen uten å være Java. Android er en mobil applikasjonsplattform for Java-programmer uten å være en JVM. Snodig nok og heldigvis lar disse teknologiene seg utmerket vel kombinere. I dette foredraget vil jeg gå igjennom hvordan du kan gjør nettopp det. Vi vil se på hvilke verktøy du vil benytte og kommer til å gå litt utenfor de stiene Google har gått opp for oss. Av dette får vi endel fordeler, men noen kameler må også svelges underveis. Som eksempel vil vi bruke et JMX systemovervåkingsverktøy (LittleBro) skrevet i nettopp Scala på Android. Formålet med dette foredraget er å gi tilhørerne lyst og kunnskap til selv å skrive Android-applikasjoner i Scala.
Thor Åge Eldby jobber i Arktekk og har 15 års utviklererfaring. De siste ti av dem på Java med det meste fra front-ender på web og håndholdte enheter og bakover til store bakendesystem. Han har i løpet av årene fått en sterk forkjærlighet for åpen kildekode, lettvektsarkitekturer og smidige utviklingsmetoder.

* CAPEX idag: 5-15 mill og 12 mnd * CAPEX med cloud og nisje SaaS: 100-500k og 1 uke - 1 mnd * DV/BI realisert i skyer lat deg styre virksomheten/prosjektene etter et kart som stemmer med terrenget ? * Med bruk av DV/BI i skyene gir jeg deg "an give you an offer you can't refuse" * Denne lyntalen belyser problemstillingen og gir deg noen løsningsalternativer.
Hvor ofte har du ikke slitt med prosjektgjennomføringen pga Excel-mafiaen? Denne lyntalen vil ta livet av excel-mafian engang for alle og det med enkle midler. En del har gjort store økonomiske dv/bi løft. - så dyrt at ingen skal røre det eller gjøre tilpasninger. Mange tar seg ikke råd. Mange mener de har ikke råd. - Det koster milioner å få en DV/BI-løsning opp å stå, mens excel er jo "gratis". DV/BI har ikke noe i et prosjekt å gjøre. Tør du å styre skuta de etter et draft som ikke stemmer med farevannet ? Ingen har råd til å navigere etter FEIL styringsinformasjon. Med bruk av skyer blir DV/BI fort billigere enn "excel". Ved å beytte skyer kan man raskt, trykt og billig få opp en fullverdig DV/BI løsning, en DV/BI løsning som vil kunne dekke virksomhetens behov. Informasjon er ferskvare, mennskelig informasjonshåndtering introduserer en foringet datakvalitet Dårlig datakvalitet gir tap av kunder. Ta tilbake kontrollen i ditt prosjekt i din virksomhet. DV/BI til massene ! DV/BI realisert i skyere vil kunne tilgjengelig gjøre informasjonen 24*7 : Hvor som helst, når som helst.
Øyvind Thoresen er en rådgiver som er brennede opptatt av ny og morderne arkitektur samt at han besitter en solid bakgrunn fra realisering avarkitekturprosjekter og datavarehus og besitter sterk teknisk innsikt både på overordnet og detaljnivå, samt bred innsikt innen mange områder relatert til IT fra mange år i bransjen. Øyvind har en solid erfaring innen : • Databasearkitektur og databaseteknologi • Datakvalitet • Harmonisering • Standardisering • Konvertering • Migrering • Teknologianskaffelser • Drift outsourcing • Mobilteknologi • Sikkerhet

Unfortunately architecture may do more harm than good, in spite of the architect's well meaning intentions. We take a journey through more than ten years of architecture experiences, what works and what sucks. From this starting point we look at the Norwegian governmental architecture principles.
Arkitektur kan gjøre mer skade enn nytte, på tross av arkitektenes gode intensjoner. I etterpåklokskapens tildels pinlig klare lys presenteres arkitekturerfaringer fra over ti år med Java-prosjekter, og trekker slutninger om hva som har fungert eller vært en fiasko. Med dette som bakteppe ser vi med kritisk blikk på DIFIs arkitekturprinsipper som statlige virksomheter skal følge, og vurderer om dette er arkitektur på vondt eller godt. Ikke minst ser vi på hvilke prinsipper som glimrer med sitt fravær.
Trond Arve Wasskog er utvikler og CTO i Bekk Consulting. Han har jobbet med Java og Java EE applikasjonsutvikling i mer enn ti år, med fokus på smidig utvikling, kvalitet og vedlikeholdbarhet.

Modern programming conventions lead to cowardly writing of code. We will poke a hole in this abscess of cowardice, and look at the delightful code that crawls out.
h1. Feigheten rår. Allment adopterte konvensjoner for hvordan vi skriver kode er feige, og reduserer oss til et minste felles multiplum av hva vi tror andre programmerere kan. Vi skal sprekke hull på feighetsbyllen, og se hva slags deilig kode som kommer krypende ut.
Jeg er en Kodemaker som har programmert siden Sharp MZ-721 var den kuleste datamaskinen man kunne ha på et gutterom (for den kom med kassettspiller, og vi kunne kopiere spill med pappas dobbelkassettspiller). Det var da spill kom i form av lange listinger i blader, som vi tastet inn, og det fantes kommandoer som het PEEK og POKE. For tiden er jeg konsulent i et stort, skikkelig morsomt, norsk firma.

High Five Driven Development and other easy learning methods one can apply in any project to increase the motivation in it.
Lyst til at jobben skal være en lek? Dårlig motivasjon på jobben? Lyntalen kommer til å kort gå inn på hva High Five Driven Development er og hvordan den utføres, samt andre enkle metoder for å øke motivasjonen på jobb. Dette er enkel coaching for ikke-coachere.
Peder Søholt jobber i Miles og har 5 års erfaring fra konsulentbransjen, hovedsakelig fra stat, telekom og mediebransjen. Peder utvikler i både Java og .NET alt ettersom hva som passer prosjektet best og påtar seg rollen som scrummaster. Ellers påtar han seg rollen som coach, uten at noen vet det med sine egenlærte metoder.

Experience report describing advanced requirement techniques such as Innovation Games and User Story Mapping
De siste tiårene er det blitt gjort store forbedringer innen programmeringsspråk, testing, systemutviklingsmetoder, m.m. Likevel er restulatet av sytemutviklingsprosjekter ofte skuffende. Løsningene virker ikke som forventet, de er unødig dyre og noen ganger tilogmed farlige å bruke. Vitenskapelige studier viser at underliggende årsker til at prosjekter feiler ofte kan spores tilbake til kravene, dette trass i et stadig økende fokus på områder som smidig utvikling, prototyping, kommunikasjon med klienter og inkrementell utvikling. I dette foredraget ser vi på noen sentale problemstillinger innenfor kravspesifisering og går gjennom prinsipper og teknikker som er vi har funnet nyttige, blant annet innovation games og user story mapping. Foredraget er basert på egne erfaringer, “best practise” og forskningsresultater.
Nils Christian nyter å hjelpe team å levere software som gleder både brukere og sponsorer. Som konsulent er han å finne i ulike roller hvor han får praktisert dette gjennom coaching i smidig test- og utviklingsmetodikk, kravspesifisering, systemarkitektur og utvikling. Nils Christian er sivilingeniør fra NTNU og partner i Scienta AS.
Stein er en arkitekt/rådgiver som ønsker å bidra til at kunden får størst mulig avkastning på sine IT-investeringer. Hans fagområder inkluderer estimering/usikkerhetsanalyser, kravspesifisering, modellering og systemarkitektur. Stein har en doktorgrad i Software Engineering fra Universitetet i Oslo, og er partner i Scienta AS.

Strøm, nettverk og diskplass er "smør og brød" utviklere som primært har jobbet med serverside utvikling. Mobile klienter tar med seg en rekke uvante problemstillinger som jeg ønsker å sette fokus på i denne lyntalen.
Veien til mobilutvikling kan virke kort for Java "EE" utviklere. Java er jo bare Java, right? Når man kommer i gang, finner man fort ut at ting er snudd på hodet. Klienten betaler for datatrafikken, man har ikke ubegrenset med strøm og lagringsplass er blitt en begrenset ressurs. I denne lyntalen ønsker jeg å dele mine erfaringer med andre serversideutviklere som ønsker å komme i gang med Android. Fokuset vil være på de utfordringene kan vil støte på når man går inn i mobilutvikling med mest server-side erfaring.
Glenn Bech leder Inmeta Consulting sin Javaavdeling og jobber samtidig som konsulent, hands-on i utviklingsprosjekter. Han har jobbet med Java i over 10 år med fokus på serverside utvikling primært i prosjekter innen Bank og forsikring. Glenn tok entusiastisk opp Android utvikling i starten av 2011 og har flere publiserte Android applikasjoner.

Experience report from using the open source monitoring system Nagios in the project implementing the Pension reform -- the biggest SOA project in Norway. Over 3000 measurements were polled regularly, on over 150 servers, on about 20 separate test and development environments, with one Nagios server to control it all. Custom functionality was written to enable testing of web services and other kinds of services, both on the service bus and directly towards backend systems.
Mange organisasjoner bruker overvåkningsverkøyet Nagios fordi det er open source og lett å komme i gang med. Det har også blitt brukt for overvåkning av servere og tjenester i norges største SOA-prosjekt, Pensjonsprogrammet, og her presenteres noen erfaringer med Nagios i denne sammenhengen. Nagios har overvåket helsen til over 3000 målepunkter fordelt på over 150 servere, fordelt på rundt 20 separate test- og utviklingsmiljøer. Nagios har også blitt utvidet med egenutviklede plugins som gjør det mulig å teste webservices og andre typer tjenester, mot tjenestebuss eller direkte mot baksystemer.
Kenneth er konsulent hos Accenture og har jobbet i flere ulike roller i Pensjonsprogrammet i NAV, sist som leder for det teamet som vedlikeholder alle test- og utviklingsmiljøer for programmet. Med høy endringstakt og så mange miljøer, servere og applikasjoner å holde orden på har det vært essensielt å automatisere alt som kan automatiseres. Her har Nagios vært en nyttig brikke i puslespillet og gjort det mulig å drive hurtig feilsøking og holde brukerne oppdatert på status i miljøene. Før han kom til Accenture har Kenneth jobbet i over 6 år i et lite norsk selskap som utvikler løsninger for lagring over internett. Her ble også Nagios med stort hell brukt til overvåkning av alle test- og utviklingsmiljøer, i tillegg til selve produksjonsmiljøet.

Programming Java can be easier than most people realize. We'll show you some techniques that will reduce the amount of code you'll have to write, and create a system that will actually be able to change when you need it to. Sprinkle some TDD on top and we've finally found a way to work that makes Java fun again.
Java må ikke være vanskelig, tregt og kjipt å jobbe med! Ok, kanskje det ikke er et ekspresstog som Rails, men ihvertfall et lokaltog med fin utsikt. Til tross for mange nye spennende alternativer, er Java fortsatt språket og plattformen mange av oss må forholde seg til i en god stund fremover. Java kan være enklere og morsommere enn mange tror. I dette foredraget vil vi vise deg de elementene vi mener må på plass for å jobbe med Java på en enkel, effektiv og endringsdyktig måte. Vi vil demonstrere hvordan du kan gjøre TDD mot web, holde kontroll på testdata, sikre enhetlig validering og holde koden din objektorientert. 4 ting på en gang! Vi har vært så heldige å få teste teoriene våre i reelle systemer det siste året, og har kommet et godt stykke på vei med teknologier som Spring, Maven, JUnit, WebDriver og Spring MVC. Vi vil forklare konseptene som gjør utviklingen enklere, og jobbe med kode for å illustrere poengene. Det er mulig å skrive ren, enkel og endringsdyktig kode i Java uten at det må gjøre vondt. La oss vise deg noen av triksene våre.
Anders er seniorkonsulent hos Miles AS. Han har over 6 års erfaring fra store og små prosjekter innenfor mange bransjer. Gjennom forskjellige roller i prosjekter har han fått solid erfaring med smidige prosesser, Java EE, TDD, databaser, integrasjon og objektorientert design. Han brenner for smidige prosesser og enkel, endringsdyktig kode som gir maksimalt med verdi for organisasjonen.
Truls er fagansvarlig for Java i Capgemini Norge. Han har erfaring med utvikling, funksjonell design og teknisk arkitektur fra riktig store til ganske små prosjekter. Truls mener at smidig utviklingsmetodikk er den rette vei, at Domain Driven Design og Test Driven Development er mye mer enn fengende fraser med tilhørende kule forkortelser, at Pearl Jam er verdens beste band, at løsninger for mobile enheter vil være sentrale i mange bedrifters IT-planer fremover, og at Open Source kommer til å vinne til slutt.

There are other ways to get good user experince than touch technology! By incorporating physical sensor listeners, it is possible to introduce new intuitive behaviors. This speech is an introduction to Android sensor services and how this can enrich user experience.
Vi forventer i dag å få servert enkle og intuitive brukergrensesnitt. I løpet av de siste årene er dette ofte realisert ved å ta bruk av touch-teknologi. Ved å innlemme fysisk sensorlyttere, er det mulig å introdusere ny intuitiv atferd for å forbedre brukeropplevelsen enda mer. Androidtjenester gjør det svært enkelt å legge til denne funksjonaliteten. Denne talen er en introduksjon til Androids sensortjenester og hvordan man, ved å ta i bruk dette enkle verktøyet, kan berike brukeropplevelsen.
Har under de siste fem årene arbeidet med Javabaserte kontollsystemer for videokonferansesystem (telepresence) på Cisco (tidligere TANDBERG). Har tidligere utviklet kamerabasert maskin og programvare for geometriske målesystemer (Metronor).

Does your CI server give you all the feedback you need (and all it can deliver)? Or does it merely compile some code and run some tests? Unleash the full power of your CI server with deployment pipelines and spread the love outside the development teams too.
Utnytter du egentlig potensialet i CI-serveren? Eller bare sitter den der og kompilerer koden, kjører noen tester og en og annen metrikk? Er det bare utviklerne som har et forhold til den? I dette foredraget får du en innføring i konseptet deployment pipelines, og innføring i hvordan sette opp pipelines i Jenkins CI. Og hva dette kan gjøre med organisasjonen din. Skru CI-serveren opp til 11, involver større deler av teamet og gjør hele utviklingssløpet kontinuerlig, ikke bare integrasjonen.
Developer with quite a few languages under his belt, but with a passion for the dynamic ones. Working 9 to 5 on online media solutions for APDM in Oslo. Working evenings on becoming a better ruby developer and mountain bike rider.

Are agile projects a contradiction of terms?
Smidig begynner å bli veletablert, men for å komme videre må fortsette å utfordre det etablerte. Vår default mentale modell er fremdeles "Prosjekt" - og her ligger også den største hindringen for å bli smidige. Her ligger også synderen som fører til dårlig kvalitet og misfornøyde brukere. Er Smidig Prosjektstyring egentlig en selvmotsigelse?
Agile coach.

Denial of Service (DoS) attacks can easily take down your web application. This lightning talk will give some examples that may smash your web application and send you a large bill.
Det finnes enkle tjenestenektangrep (Denial of Service- / DoS-angrep) som vil få mange webapplikasjoner til å gå over ende. Denne lyntalen viser noen av de enkleste og mest effektive angrepene som kanskje også fungerer mot din applikasjon. Og har du noen gang tenkt over at en et DoS-angrep kan koste bedriften din dyrt? Ikke nødvendigvis bare i tapte inntekter, men også i direkte utgifter.
Jostein har jobbet med Java og sikkerhet i 7 år. Han har et stort ønske om at alle Java-utviklere skal tenke over hvordan koden de skrev i dag kan utnyttes av en ondsinnet hacker i morgen. Han ønsker også et større fokus på sikkerhet i Java-verden. Til daglig jobber Jostein som Senior Software Engineer hos Steria.

Wrapping your Ajax calls makes for happy tests, consistent error handling and some neat tricks.
Jeg viser deg et enkelt grep du kan gjøre med Ajax-kallene dine som gir deg tydeligere kode, bedre feilhåndtering, og gjør det lettere å teste. For du tester vel JavaScripten din?
Jeg er en Kodemaker som startet å programmere da jeg var 10, og faren min kom hjem med en C64. Framsieutvikling har jeg holdt på med siden 1999, da JavaScript gjemte seg under navnet DHTML og asynkrone serverkall ble gjort i en skjult iframe. Jeg har skrevet mye JavaScript siden den gang, og jo eldre det blir jo mer smerter det meg å lese koden i dag. Det må jo bety at jeg har lært et og annet. En av de tingene jeg har lært vil jeg vise deg i dag.

Views and "instead of" triggers can be used to support backward compatible changes to a database schema.
Hva gjør man når det er over 20 systemer som er direkte integrert på databasenivå og man ønsker å endre datamodellen? Dette er ikke et umulig problem, løsningen er å gjøre endringen bakoverkompatibel! Vi ser på én mulig løsning: Bruk av view og "instead of"-triggere.
Stian Grenborgen jobber som Javaprogrammerer og systemarkitekt i Nets. Gjennom arbeid med flere sentrale systemer i Nets, har han sett på hvordan systemgrensesnitt av forskjellige typer kan utvikles bakover- og fremoverkompatibelt.

Functional programming with less pain in Java.
Java-språket får hard medfart og utallige sleivspark i Twitter-sfæren fra utviklere som ønsker like mye frihet og uttrykkskraft som tilbys av andre språk. Jeg vil vise hvordan man med et Collections-bibliotek kan bruke funksjonell stil også i Java, og oppnå snasen, lesbar og gjenbrukbar kode.
Rune har 4 års erfaring som utvikler, hvorav alle i BEKK Consulting i ulike Java-prosjekter. Foruten stor interesse for hvilke muligheter som (fremdeles) ligger i Java som språk, trives han godt med oppsett av bygging, testing, og prosjektstruktur og -arkitektur.

How should an action point look like? Let's have a look at our top 7 action points after 40 retrospectives.
Kontinuerlig forbedring og læring er noe de aller fleste snakker om i forbindelse med smidige metodikker, men mange faller igjennom når retrospektivet skal gjennomføres og aksjonspunkter skal følges opp. Etter 3 år og pluss 40 retrospektiv har vi gjort oss noen erfaringer om hvordan et aksjonspunkt bør se ut, hva det bør inneholde, hvor mange man bør ha og hvorfor noen fører til forbedringer og andre ikke. Dette eksemplifisert gjennom våre topp 7 aksjonspunkter.
Tor-Erik jobber i dag som utviklingsleder for et større smidig prosjekt. Han har informatikkutdannelse fra UiO og har jobbet for Accenture siden 2004 både som javautvikler, teknisk arkitekt, scrum master og nå som utviklingsleder. Som utviklingsleder har han spesielt fokus på hvordan teamene jobber og hvordan disse kan forbedre seg.

Learn how to deploy Java applications on Windows Azure, Microsoft’s cloud services platform – this hands-on presentation takes you through the process from start to finish.
Presentasjonen gir en praktisk innføring i javautvikling på Microsofts Azure platform. I løpet av sesjonen utvikler vi en java applikasjon som vi bygger og deployer til Microsoft Azure. Det vil bli presentert nyttige tips og triks for de som ønsker å utvikle Java-applikasjoner som skal kjøre i nettskyen til Microsoft.
Arne Jervell er CTO i Giant Leap Technologies og har 14 års erfaring med Java. Han brenner for stadig forbedring og trives best i smidige prosjekter. Gjennom prosjektet TaxiStation har han opparbeidet seg kunnskaper og erfaringer med Windows Azure og hvordan samspillet mellom Azure og Java fungerer i praksis.

En transparent GUI-prosess vil ikke bare forbedre resultatet, vil det mest sannsynlig øke effektiviteten og reduserer frustrasjon blant utviklerne. Slik involverte vi utviklere, arkitekter, produkteiere og brukere til å begynne å tegne.
Brukervennlighetserfaringer fra et smidig prosjekt: Hva gjør man når brukergrensesnittet ikke forankres godt nok, det er for mange uavklarte detaljer, fremdriften er for lav og kvaliteten for dårlig? Til tross for gode hensikter ble ikke designet av UI godt nok forankret hos prosjektdeltakerne. Det dukket opp for mange endringer i løpet av hver enkelt sprint som resulterte i lav utviklingsfart og mye frustrasjon blant utviklerne. Konsekvensen var at vi etablerte en åpen og mer formell GUI prosess. Vi inkludert et bredere spekter av prosjektdeltakerne og oppmuntret dem til å tegne, skisse, diskutere og kritisere ulike løsninger for brukergrensesnittet. Ved å gjøre det på denne måten distribuerer vi bedre eierskap og engasjement til skjermbildedesignet, og brukergrensesnittet blir både bedre forankret og spesifisert. Målet er å redusere frustrasjon blant designere (for ikke å vite hvilke behov som faktisk gjelder) blant utviklerne (for ikke å vite hva de skal utvikle), og blant prosjektledere, produkteiere etc. på grunn av dårlig fremdrift og lav kvalitet.
Eivind Mølster jobber som konsulent hos Steria innen brukervennlighet og design.. Før dette arbeidet han som interaksjonsdesigner hos Making Waves. Han har bred erfaring både med kommersielle nettsider til komplekse og forretningskritiske applikasjoner. Eivind har jobbet for kunder som SAS, Utdanningsdirektoratet, NAF og Statnett.

Puppet er fri programvare for å deklarativt styre konfigurasjon av servere, miljøer og infrastruktur. Vi går gjennom de sentrale konsepter innen infrastruktur som kode, hva Puppet er og hvordan det kan brukes til mer effektiv styring av infrastruktur.
Det er mye buzz rundt konfigurasjonsstyring i DevOps-sfæren. Puppet er fri programvare for å deklarativt styre konfigurasjon av servere, miljøer og infrastruktur. Vi går gjennom sentrale konsepter, Puppets arkitektur, infrastruktur som kode, automatisere oppsett og reproduserbar konfigurasjon av servere og applikasjoner, forbedret feilsøking og reduksjon av feilkilder; og ikke minst hvordan reproduserbar konfigurasjon av infrastruktur kan føre til mer effektiv styring. Etter foredraget vil du forhåpentligvis ha grunnlag nok til å starte prosessen for implementasjon konfigurasjonsstyring på ditt prosjekt. Foredraget er generelt og baserer seg på konkrete erfaringer fra bruk i store bedrifter og åpne nettløsninger.
Eivind Uggedal er seniorkonsulent i BEKK. Han er bidragsyter til flere kjente opensource-prosjekter. Han står blant annet også bak siter som wasitup.com og mediaqueri.es. Har flere års erfaring med drift av web-løsninger med høy trafikk. Han interesserer seg spesielt for for tiden for DevOps, Go og distribuerte systemer.
Ole Christian er utvikler og leder faggruppen for Dynamiske språk i BEKK. Han deltar også i JavaZones programkomite og er aktiv i fagmiljøet i Oslo. Han interesserer seg for tiden spesielt for programmeringsspråk, deriblant spesielt Scala, Clojure og Ruby for tiden.

TBD
Posten Norge lanserte Digipost våren 2011. I tiden etter dette har det blitt jobbet mye med ulike integrasjonsløsninger for bedrifter. Sist ut av løsningene er et flunkende nytt REST-API som ble lansert i august. I denne lyntalen ser vi på hvordan vi har designet og implementert en sikkerhetsmekanisme som lar API’et håndtere innhold med høyeste sikkerhetskrav. Vi ser også på hvordan denne sikkerhetsmekanismen lar seg implementere uten at det går på bekostning av prinsippene bak et RESTful design.
Espen Herseth Halvorsen jobber som konsulent i Bekk Consulting, og jobber til daglig med utviklingen av Digipost. I den siste tiden har han jobbet spesielt mye med REST-grensesnittet til Digipost, og hatt ansvar for sikkerheten til dette API'et. Tidligere har han også vært ansvarlig for sikkerhets- og ytelsestesting på prosjektet. Espen er en aktiv bidragsyter i BEKKs javamiljø, og har aktivt bidratt på open source-prosjekter i nærmere 10 år.

All your well-known java-frameworks work with Scala. But not all of them work equally well. When it comes to database access, JPA is the prescribed choice in most java projects. But in Scala, it doesn't have to be, and it really doesn't work that well. This talk will take a look at database access using both raw JDBC, JPA and Scala-based frameworks in the form of Squeryl and ScalaQuery.
I Scala "funker" alle rammeverkene vi kjenner fra Java. Men ikke alle fungerer like bra, og vi mister en del på veien. I java-verden er det en "opplest og vedtatt sannhet" at man bruker JPA når man jobber mot en database. Men liker vi egentlig de begrensingene som JPA setter? Hva om vi vil ha mer kontroll på når - og hvordan SQL kjøres? Må vi virkelig bruke tekstlige spørringer som gir oss feil først i kjøretid? Hva om vi vil ha _mer_? Denne presentasjonen vil kikke på ulike måter å jobbe mot en database fra Scala, fra rå JDBC via JPA og JPA med scala-overbygg til rene Scalarammeverk i form av Squeryl og ScalaQuery.
Trond Marius jobber som seniorkonsulent og fagleder i Mesan. Han har lang erfaring med Javabasert systemutvikling, og har følt på kroppen hva som går bra og mindre bra med JPA. De siste årene har han fulgt Scala og har brukt språket i flere prosjekter. Trond Marius leter konstant etter effektive løsninger og ny teknologi som gjør hverdagen som utvikler enklere.

Get rid of all your custom Junit runner the @Rule's are here
Sliter dere med å få rask feedback fra tester ? Har dere prøvd å kategorisere tester men endt opp med å flytte de vekk fra kildekoden de hører sammen med ? Rune vil med denne lyntalen bringe fokus på en ny funksjonalitet i Junit som gjør deg i stand til med enkle grep å kategorisere dine tester uten at det går på bekostning av ansvarsflytting, oppdeling av prosjekter eller massiv konfigurasjon i byggeskript
Jeg er en Kodemaker og som alle Kodemakere er jeg dypt engasjert i faget mitt. Jeg har jobbet med Java++ i ca 6 år og har erfaring fra både store og små prosjekter. Felles for alle har vært et ønske om å være testdrevne, men ikke helt fått det engasjement som skal til for å overbevise alle. Jeg søker derfor etter verktøy og metoder som gjør det enklere for alle involverte å forme det systemet kunden vil ha basert på TDD/BDD.

This talk will give you an idea of the effort needed to modernize your build to use the latest and greatest buildsystem. It highlights the problems and solutions found when introducing Gradle to your enterprise build.
Gradle er et fleksibelt og kraftig byggesystem hvor byggescript skrives i Groovy. Hvordan gjøre overgangen fra ditt gamle byggsystem så smidig som mulig? Vi har tatt i bruk Gradle som en erstatter for Maven. Dette foredraget tar for seg noen av utfordringene vi møtte ved å bytte ut Maven med Gradle, og hvordan vi løste disse. Foredraget tar også for seg det vi har erfart er de største styrkene og svakhetene ved Gradle. Vi vil også fokusere på hva vi som utviklere har vunnet på å ta i bruk Gradle.
Kenneth jobber i Know IT Objectnet og har jobbet i konsulentbransjen siden 2004. Han har sin kjernekompetanse innenfor objektorientert utvikling av Java/JEE-løsninger. Kenneth har deltatt på mange store prosjekter, og flesteparten av dem innenfor telekom. Kenneth er for tiden engasjert hos Telenor mobil.
Steinar jobber som selvstendig konsulent i Steinar Haugen Consulting AS og som CTO i nyetablerte Technebies AS. Han har jobbet 14 år som konsulent og har programmert i nesten 30 år. De siste 10 årene har han hovedsaklig jobbet i telekom bransjen. Interessefeltet er bredt og spenner fra utvikling innen store mellomvare systemer, via GUI app'er og grafisk databehandling, til algoritmer og genetisk programmering. Han liker å lære nye språk. Den siste tiden har han jobbet med groovy og groovy-baserte rammeverk, samt utvikling av DSL'er innen groovy. Han har nylig jobbet med migrering av et stort byggesystem fra maven 1 til gradle.

Charset encoding is an issue in most applications. If you work with strings, then you also have to understand charset encoding. Still, few software developers feel they understand charset encoding thoroughly. This talk aims to teach you charset encoding once and for all.
Tegnsettenkoding er noe du finner i alle lag av enhver applikasjon. Har du strenger, så har du enkoding. Hvis du ikke har kontroll på enkoding vil du ofte ende opp med rare tegn på websiden, databasen vil ikke sortere norske tegn rett, og du ender av og til opp med filer med en god blanding av enkodinger som føles umulig å nøste opp i uten å fikse alle de rare tegnene manuelt. Etter denne lyntalen skal du ha en god forståelse av tegnsettenkoding, slik at du ikke må strø "charset=utf-8" tilsynelatende tilfeldig utover kodebasen din i håp om å få rett sluttresultat.
Stein Magnus Jodal er utdannet sivilingeniør i datateknikk fra NTNU. Han har jobbet som konsulent i Iterate siden 2009, hvor han har erfaring fra utviklingsprosjekter i Java, Python og Ruby. Stein Magnus er interessert i bl.a. kodekvalitet, funksjonell programmering og concurrency. På fritiden er han en aktiv deltager i fagmiljøet i Oslo og bidragsyter til Open Source-prosjekter.

Compare iOs and Android plattforms, communities, user experience for both developer and users.
Android eller iOs? En informert fremstilling av forskjeller og likheter mellom disse to plattformene. Hva passer deg best som sluttbruker? Hvilken plattform bør man utvikle for? Sesjonen vil være aktuell både for sluttbrukere og for utviklere.
IT konsulent som for tiden jobber for Know IT i Kristiansand. Interessert i funksjonell programmering, alternative språk på jvm, javascript, ux, ren kode.

hardcore, java, physics
Ved å studere hvordan en kodebase endrer seg over tid kan man observere hvordan svake og sterke krefter beveger koden i bestemte retninger. Det er særlig summen av de små endringene som er interessante. Vi har studert et par kjente open-source prosjekter for å identifisere noen av de rådende kreftene. I denne sesjonen vil vi først introdusere konseptet "code entropy" for så å vurdere og diskutere tilstanden til sammenlignbare kodesnutter.
Olve Maudal jobber for Cisco Systems Norway. Han elsker å skrive kode, men er kanskje like interessert i hvordan en gruppe mennesker utvikler god kode sammen som hva koden faktisk gjør. Han jobber nå med utvikling av videokonferansesystemer (TANDBERG ble kjøpt av Cisco i 2010). Tidligere erfaring inkluderer utvikling av systemer for å lete etter olje (Schlumberger) og utvikling av betalingssystemer (BBS, nå Nets). Olve er et aktivt medlem i geek-miljøet i Oslo hvor han blandt annet er aktivt med i JavaPils, Cantara, XP Meetup, Oslo C++ Users Group, Lean Meetup og andre ting. Han blogger på http://olvemaudal.wordpress.com and http://twitter.com/olvemaudal

Come listen to the principles and technical practices that enabled the team delivering Digipost to incrementally deliver software of high quality and value into production whenever they want, and extremely fast. You can too!
Manifestet for smidig programvareutvikling sitt første prinsipp sier at; det å levere programvare av verdi kontinuerlig, er vår høyeste prioritet. Dette er ofte lettere sagt enn gjort, fordi det forutsetter masse hard jobbing med å komme frem til en infrastruktur og en prosess som støtter en rask flyt fra idé til produksjon. Jeg vil gi et innblikk i hvordan teamet som utvikler Digipost gradvis har utviklet evnen til å kontinuerlig levere programvare av høy kvalitet til produksjon når vi vil, og ekstremt raskt. Du vil også få vite hvilke fordeler dette gir, utover rask ledetid fra idé til produksjon, og hvorfor det er smidigere. Det er ganske sikkert flere grunner enn du tror.
Stein Inge jobber i BEKK og spiller bass i BEKK Band, som spiller på Rockefeller under ClubZone. Han er teknisk prosjektleder for Digipost, Norges nye digitale postsystem, utviklet av Posten. Han er en smidig evangelist med mer enn 10 års erfaring i å bidra til, så vel som å hjelpe andre til å bli bedre til, å produsere fremragende programvare sammen med kunder med høye forventninger. Siste året har han presentert på Smidig og Roots.

Are you looking to learn a new programming language, but having a hard time deciding which language to choose. Come to my lightning talk and I'll give you tips I find useful.
Leter du etter et nytt programmeringspråk, men vet ikke helt hva du skal velge? Da er dette lyntalen for deg! I denne lyntalen vil jeg presentere det jeg mener er de viktigste kriteriene for å velge sitt neste språk. Overraskende nok er det ikke nødvendigvis Scala!
Erik Bakstad er utdannet Master IKT ved Universitetet i Bergen, og jobber som konsulent i Miles AS. Han er glad i å lære nye teknologier, og er hele tiden på jakt etter nye faglige utfordringer. I tillegg til jobben som konsulent jobber han aktivt for å skape et godt fagmiljø i Bergen, gjennom blant annet Roots-konferansen og javabin.

På norsk
Mange systemer står i dag ovenfor store moderniseringsbehov. Gamle systemer hvor både dokumentasjon og kjennskap til språk er mangelvare. Denne presentasjonen vil ta for seg hvordan Tine har startet en stor modernisering av ett av kjernesystemene for rapportering av storfe-opplysninger. Det eksisterende systemet er et filbasert batch-system, skrevet i Cobol, som kjører inn opplysninger i databasen en gang om dagen. Målet er et system, skrevet i Java, som løpende oppdaterer og gir tilbakemeldinger. Men det å erstatte alt i en stor klump var et alternativ ingen likte. Vi vil vise hvordan vi har stykket opp problemstillingen, og klart å rulle ut deler av systemet som gradvis skal erstatte det gamle.
Børge er fagsjef for IT-rådgivning og Arkitektur i Bekk Consulting. Han har 16 års erfaring og har de siste årene primært jobbet med J2EE løsninger og da spesielt modernisering av gamle systemer.
Eirik jobber som manager i Bekk Consulting. Han har 6 års erfaring og har de siste årene jobbet med J2EE løsninger. De siste par årene har han vært med i et større moderniseringsprosjekt skrevet i J2EE med Apache Camel i bunn. Han brenner for ren og testbar kode.

TBA
"Du bruker det feil!" - er kanskje en av de mest brukte, og minst nyttige forklaring på hvorfor akkurat du sliter med å få det skinnende nye rammeverket til å fungere i din applikasjon. Er det slik at det er vi som bruker rammeverket som er mindre begavet? eller er det utviklerene av rammeverkene som er det ? Skal vi være ærlige med oss selv så må vi vel inrømme at det ofte er en kombinasjon. Hva kan vi så gjøre for å redusere risikoen for å få problemer med rammeverkene vi bruker ? Svaret ligger i historien. Ved analyse av konsekvensene av tidligere valg, kan vi identifisere en del suksesskriterier og risiko oppførsel. Dette fordraget vil oppsummere hva jeg har konkludert etter å ha opparbeidet mye egen erfaring, samt det jeg har samlet av andres erfaringer i bruk av diverse rammeverk og verktøy.
Opinionated programmer with a beard at Arktekk Kaare Nilsen is a passionate programmer with more than 15 years of experience from projects in various industries, in both private and government sector. After all these years he is proud to still call himself a programmer. He firmly believes that architecture is important, in fact - way too important to be left to The Architects. Kaare is not afraid of letting his voice be heard, and often speaks about various programming and open source topics at meetups and conferences.

* The problem we want to solve: ** FTP, password, install, setup, etc... * The anatomy of a Git repository ** What should you put in your repo, and what do you exclude ? ** How does the clients work ? * Other posibilities with this setup.
Git er etterhvert et kjent og kjært versjonskontrollsystem for mange, men mulighetene med Git er mange. Vi har tatt i bruk Git som repository for distribusjon av artefakter til en JBoss ESB server. Aldri mer overføring til FTP-servere, utpakking og konfigurasjon på andre siden som feiler, osv. - bare push og pull! Dette lar oss blant annet enkelt skille mellom release og distribusjon av endringer på ene siden og aktivering av disse på den andre, ved hjelp av spesialtilpassede server-scripts. Samtidig kan driftsansvarlige lett rulle tilbake til tidligere versjoner ved behov, da all historikk ligger lokalt.
27 år gammel Javautvikler, jobber med enterpriseløsninger for et større norsk firma til vanlig, driver med mye elektronikk på fritiden.

A rewrite of a batch from C to Java and Spring Batch has seen execution time go from 1 week to 16 hours, this talk explains how.
I forbindelse med pensjonsreformen har Statens pensjonskasse (SPK) skrevet om batchen som reberegner alle ytelser i forbindelse med regulering av folketrygdens grunnbeløp. Den tidligere batchen var skrevet i C og brukte en uke på kjøringen. I denne presentasjonen vil jeg vise hvordan den nye versjonen skrevet med java og med Spring Batch gjør beregningen på godt under et døgn. I tillegg til Spring Batch står Hibernate og Jdbc sentralt i batchen, noe som fører til en del utfordringer. I jakten på bedre ytelse stod vi stadig fast i problemer knyttet til for eksempel deadlocks og retries, hibernate og misforstått feilhåndtering. Presentasjonen fokuserer først og fremst på endringene som ble gjort på javasiden, men vil også nevne endringer gjort på databasesiden for å bedre ytelsen. Det vil være en fordel for tilhørere om de har erfaring med Spring Batch og Hibernate, men ikke et absolutt krav.
Morten er en selvutnevnt Springevangelist og har jobbet med Spring Batch siden det var i milestone i 2007 og presenterte det den gang på JavaZone. Morten prediker et pragmatisk syn på arkitektur og velger det enkle inntil det kan bevises at det ikke er godt nok...han venter ennå på et bevis på at man faktisk trenger en ESB...

Last fall we decided after much consideration to use apache camel in some of our (new) products. We would like to tell a bit about why, how, and especially what we have learned from implementing real systems with camel. Camel is an integration framework based on enterprise integration patterns. Camel has a java DSL and a simple spring-integration that makes it very easy to get started with, and easy to implement relatively complex integration solutions. But what happens when you attack real problems that do not fit as well with the mickey-mouse-examples in camel tutorials, or when you need real infrastructure and can not tolerate data loss during a power failure? What about performance and memory usage? Testing? What works well, what does not work so well? etc. ..
I fjor høst bestemte vi oss etter mye vurdering å bruke apache camel i noen av våre (nye) produkter. Vi vil gjerne fortelle litt om hvorfor, hvordan og ikke minst hva vi har lært av å implementere reelle systemer med camel. Camel er et integrasjonsrammeverk basert på enterprise integration patterns. Camel har en java DSL og en enkel spring integrasjon. Camel gir svært mye kraft i lite kode, det gjør det lett å implementere enkle og kompliserte integrasjonsløsninger, men det gjør det også lett å gjøre betydelige feil som kan koste deg dyrt. Hva skjer når du skal angripe reelle problemer som ikke passer like godt med mikkemuseksemplene i camel tutorials, eller når du trenger ekte infrastruktur og ikke tåler at data mistes ved en strømstans? Hva med transaksjoner, asynkronitet og tråder, ytelse og minnebruk? Vi vil bruke en problemløsende fremgangsmåte med delvis live koding for å presentere integrasjonsrammeverket Camel brukt i reelle problemstillinger, samt gi en inføring i enterprise utvikling og integrasjon. Presentasjonen bygges naturlig opp gjennom å utvikle et konkret eksempelsystem hvor vi starter enkelt og gradvis kommer innom flere vanskelige problemer underveis.
senere..
later..

On a greenfield project, rapid deployments to production is an achievable goal. Learn how to deploy rapidly on your maintenance projects too – during normal working hours!
Hvis du starter med blanke ark, er hyppige produksjonssettinger greit å få til. Men hva om applikasjonen har vært i produksjon en stund, og muligheten til å gjøre endringer er begrenset? Denne lyntalen tar for seg noen enkle grep du kan gjøre i ditt prosjekt for å komme nærmere visjonen om kontinuerlig leveranse. Det handler ikke bare om automatisering, men også hvordan du ved å tenke gjennom hvordan applikasjonen brukes kan gjøre det mulig å endre den uten å påvirke brukerne. Resultatet er hyppigere og tryggere produksjonssettinger – i vanlig arbeidstid!
André Heie Vik er utdannet Master i Informatikk fra NTNU. Til daglig jobber han som konsulent hos Miles i Bergen, der han også er engasjert i det lokale fagmiljøet, blant annet som medarrangør av Roots-konferansen. Faglige interesser inkluderer utviklingsmetodikk, kvalitet, og automatisering av infrastruktur.

We show a simple standard problem in Java - how to sort a list? - and how this can be made much more concise and easier to read using the new language features in Java 8.
Vi gjennomgår et enkelt standardproblem i Java - hvordan sortere en liste? - og ser hvordan vi kan gjøre det mye mer konsist og lettere å lese via de nye språkmekanismene som kommer i Java 8.
Fredrik Vraalsen has over 10 years of experience as a software developer working with J2EE, Swing client applications and Java/C++ on mobile devices. Currently he is a Java developer/consultant at Know IT Objectnet, where he does design and development on a large sales back-end system and client application for NSB. He is also interested in alternative languages on the JVM, in particular Scala, and is co-founder of scalaBin.

This talk summarizes our experience introducing Drools as rule engine in a large project. We experienced time consuming coding with no IDE support, a scriptlanguage that nobody really mastered, and poor debugging ability. What not to do again. 
Vi innførte Drools for å erstatte en "hjemmesnekret" regelmotor. Motivasjonen for å ta i bruk en regelmotor var time2marked, gjøre det enklere å skrive forretningslogikk, erstatte  hjemmelaget med kommersiell tredjeparts-kode, og et ønske om å kunne bruke reglene på tvers av produktsystemene. I dette lynforedraget går jeg igjennom våre erfaringer med  innføring av Drools i et prosjekt.  Jeg snakker også om hvorfor vi  til slutt valgte å gå helt bort ifra regelmotorer og hva vi gjør nå.
Cathrine er senior utvikler i Knowit hvor hun har jobbet i fire år. Hun er systemutviker og scrummaster, og opptatt av metodikk og brukergrensesnitt. Jobber for tiden på et stort prosjekt med høy attention i privat sektor.

Software projects have traditionally been reasonably successful at focusing on quality for its end users. But there are several known and unknown stakeholders in any software project. How do you ensure that you deliver quality to all of your stakeholders? And is it even possible?
Systemutviklingsprosjekter har tradisjonelt vært flinke til å fokusere på, og levere, kvalitet til sluttbrukeren. De siste årene er det i tillegg blitt et økt fokus på hva driftspersonell ønsker fra et system. Men sluttbrukere og driftere er ikke de eneste interessentene som har en oppfatning av hva kvalitet er. Det finnes overraskende mange interessenter i et systemutviklingsprosjekt og de har alle hver sin oppfatning av kvalitet. Hvordan kan man sikre at du selv, alle interessenter og organisasjonen som helhet blir fornøyd med det du har vært med på å lage?
Vegard Hartmann er fagleder for kvalitet og testing i Bekk. Han har alltid vært opptatt av å levere best mulig kvalitet og har de senere årene jobbet som teknisk ansvarlig og løsningsarkitekt på et forvaltningsprosjekt som omfatter over 40 gamle og nye løsninger i en stor organisasjon.

As do most Java developers, you probably use a code coverage tool like Cobertura, Emma or Clover. But have you ever wondered know how these tools are implemented? This presentation will investigate how these tools work. You'll learn the basics of byte code analysis and transformation, enough to get you started developing your own code coverage tool. We'll also look into why code coverage alone is not a good metric, and how mutation testing can help us write more relevant tests.
De fleste Javautviklere bruker i dag et testdekningsverktøy av typen Cobertura, Emma eller Clover. Men har du noen gang lurt på hvordan slike verktøy er laget? I dette foredraget løfter vi på panseret og viser hvordan kodedekning er implementert. Måling av kodedekning er nemlig ikke er så avansert som du kanskje tror. Med litt kunnskap om bytekodeformat, bytekodeanalyse og transformasjon har vi byggeklossene vi trenger for å lage et enkelt verktøy for analyse av kodedekning. Foredraget viser to eksempler på slike verktøy laget av foredragsholderen, men gir deg også nok kunnskap til at du kan lage ditt eget. Vi viser også hvorfor testdekning i seg selv er en lite meningsfull metrikk og hvordan mutasjonstesting kan hjelpe oss å lage mer relevant tester.
Eirik jobber som Chief Scientist hos Kantega, et ansatteid it-konsulentselskap. Der prøver han å finne lurere måter å utvikle programvare, dele kunnskap og løse problemer på. Eirik liker også å bidra i open source prosjekter og holder ofte foredrag på konferanser.

Want to improve your developer testing skills? This presentation will explain how to analyze a given problem and evaluate different approaches for writing automated tests.
"Enhetstester er lett. Integrasjonstester er vanskelig." er en vanlig holdning blant norske utviklere. Det reelle problemet er egentlig ikke hvorvidt man tester enheter eller integrasjoner, men at mange utviklere ikke har peiling på hvordan de skal gå frem for å skrive skikkelige tester. Erfaringsmessig har det vist seg viktigere å bygge kompetanse på problemanalyse enn å pugge konkrete oppskrifter. Fremgangsmåte og prioriteringene som må gjøres for å skrive gode tester står derfor i sentrum, men også teknologi- og verktøyalternativer vil bli diskutert. Foredraget vil være case-orientert, med utgangspunkt i testing av et større logistikksystem.
Erik jobber som seniorkonsulent i Webstep, er styremedlem i IASA Norge og aktiv bidragsyter til Cantara Community Wiki. Han har spesialistkompetanse på utviklertesting og byggemiljø i store prosjekter og har vært sentral i utviklingen av konseptene Enterprise Maven Infrastructure og JigZaw (en testmodell for smidig utvikling).

TBA
Kontinuerlige leveranser er i vinden om dagen. Alle skal levere til produksjon hver uke, gammel funksjonalitet skal fortsette å virke, samtidig som ny funksjonalietet kommer på løpende bånd. Men hva krever dette av test? Hvordan kan vi være sikre på at alt fremdeles fungerer, samt at alt skalerer og er sikkert nok? Er en håndfull automatiserte funksjonelle tester nok? Prosjektet vi jobber i har siden januar levert ny funksjonalitet, kanskje ikke hver uke, men så snart noe er ferdig utviklet. Presentasjonen viser hva vi synes er riktig nivå av testing, hvordan vi har kommet frem til dette, og hvordan prosessen vår støtter opp om kontinuerlig testing. Vi viser hvordan vi har håndtert tradisjonelt sett tunge ting som avbruddstesting, ytelse/stress/kapasitetstest, sikkerhetstest, og hvordan vi fortsetter å håndtere det for hver nye leveranse.
Janniche Haugen er utvikler og Fagleder for Java i BEKK. Hun har jobbet i store utviklingsprosjekter i over 7 år, og har alltid hatt fokus på testbarhet og kvalitet. De siste 3 årene har hun snakket på JavaZone med dette som en rød tråd. Favoritt sitat: "Expert programmers are those who write code even idiot programmers can understand. Idiot programmers are those who write code not even expert programmers can understand."
Trond Arve Wasskog er utvikler og CTO i BEKK. Han har jobbet med Java og Java EE applikasjonsutvikling i mer enn ti år, med fokus på smidig utvikling, kvalitet og vedlikeholdbarhet.

Java, IPv6
IPv4 er på overtid, og IPv6 kommer for fullt. Den 8. juni 2011 hadde Google, Facebook og en rekke andre store internettaktører en 24-timers testflight på IPv6, og det er all grunn til å tro at også Javaprogrammerere vil komme til å få stadig mer kontakt med IPv6 i hverdagen. Java skal i prinsippet støtte IPv6, men etter å ha jobbet på et prosjekt hvor det var et krav at IPv6 skulle støttes, så jeg at det ikke alltid stemmer. Enhver som antar at "it just works", vil fort kunne få en overraskelse. Jeg vil presentere hva jeg lærte.
Øyvind er utdannet sivilingeniør fra NTNU og jobber hos Systek.

This experience report describes the rather extraordinary technical architecture of Oslo municipal's integration platform. It consists of no ESB-product, no application server, only Apache HTTP-server, several Java and spring-containers and ActiveMQs as a message broker.
I en av norges største bedrifter, Oslo kommune, blir tjenestene og plattformen etablert etter hvert som behovene oppstår, noe som har resultert i en omfattende tjenesteorientert arkitektur uten et konkret ESB-produkt. Tjenestene kjører uten applikasjonsserver, kun på Apache HTTP-servere, mange Java- og spring-containere og ActiveMQ som meldingsbærer. Dette erfaringsforedraget beskriver den tekniske arkitekturen, og gir en rask oversikt over hvordan nye integrasjoner implementeres. Du får også vite hvordan deployment, lastbalansering, overvåkning og organisering av tjenester foregår.
Jan Henrik Gundelsby er utdannet Cand Scient og har over 10 års erfaring med serverside Java-teknologi, både J2EE og lettvektsrammeverk. Han jobber i dag for Know IT Objectnet som teknisk prosjektleder, arkitekt og utvikler for et større offentlig IT-prosjekt. Jan Henrik er en ivrig lettvekts-fantast som forsøker å jobbe mot smidige arkitekturer og løsninger som gir økt produktivitet for utvikleren.

# Experience report from using PaaS on several projects. # An overview of the services you can find in the cloud and how they perform. # A simple howto into how you can use the different services.
Utvikling skaper verdi, hvorfor kommer driftsoppgaver i veien for at du kan gjøre nok av det? Dette er en praktisk presentasjon av våre erfaringer med utvikling, utrulling, forvaltning og drift av 3 applikasjoner i skyen. Ikke noe salg kun våre egne erfaringer. I denne presentasjonen kommer jeg til å gå gjennom prosessen fra valget av skyleverandør, gjennom utvikling, første utrulling, forvaltning og drift applikasjonene. Jeg kommer til å sette de forskjellige leverandørene opp mot hverandre på egenskaper som utrulling, skalering av ytelse, økonomi, åpenhet/innsyn og monitorereing. Jeg kommer så med våre erfaring med å leve i og utvikle for skyen. Erfaringene kommer fra 3 ruby on rails applikasjoner. Erfaringene er generelle innenfor bruk av PaaS og er lett overførbare til WAR og Jvm. Presentasjonen avsluttes med en introduksjon til hvordan du kan flytte inn i skyen og leve der. Dette gjøres gjennom en introduksjon til WAR-formatet og hvorfor dette er en styrke for Jvm og Java. Når man nå har en WAR ønsker jeg å vise hvordan de forskjellige leverandørene lar deg rulle denne ut på deres tjenester. Dette er en rask introduksjon på hvordan komme igang i skyen. Har du en WAR kan skyen kjøren den!
Aslak er en allsidig utvikler med erfaring fra C#, Ruby, Java og Scala. Han har over de siste 1,5 årene jobbet med utvikling og utrulling av applikasjoner til sky og jordnære hosting leverandører på alle 3 platformene. Aslak er ansatt i et nyoppstartet konsulentfirma i Sogndal, nLink AS. Firmaet springer ut fra miljøet rundt YAST.

Object Mother and Builder patterns can help you write better tests. Reduce size of tests, improve reuse and simplify refactoring.
Å skrive tester har blitt nesten like viktig som å skrive selve produksjonskoden. Etter hvert som systemene blir større er det en tendens til at det blir mer og mer komplisert å skrive tester for koden. For å kunne teste spesifikke deler av koden så må systemet ofte settes i en riktig tilstand, og dette kan kreve mye “boiler-plate”-kode i testene. Jeg vil i denne lyntalen gå igjennom to patterns som jeg bruker for å forenkle måten vi skriver tester på, mer spesifikt hvordan vi oppretter domene-objekter. Disse er Object Mother og Builder. Ved å bruke disse får du økt gjenbruk, mindre testklasser, det blir enklere å gjøre endringer i koden og du får enhetlige testdata i testene dine.
Morten er utdannet sivilingeniør i datateknikk fra NTNU og jobber som systemutvikler i Iterate AS.

Tasked with a major upgrade for a mission critical authentication and authorization server, how do we balance the need for incompatible changes with the needs for the 50 or so clients? This is an experience report from such an upgrade in a major Norwegian financial institution.
I et serverrom i en større norsk virksomhet har et sett med tjenester kjørt stabilt i 9 år, og sørget for bl.a. autentiserring, autorisasjon og single sign-on for både kunder og ansatte. Dette systemet har nærmere 50 klienter, og klient-API'en har vært bakover-kompatibel de siste 7 årene. Innenfor slike rammer er ikke endringer enkelt å få til, men nå tar vi sats for å revitalisere denne platformen og kommer med en oppgradert API og en solid utrensking på server-siden. Med så mange berørte parter må vi tenke nøye gjennom hva slags endringer vi gjør, men også hvordan vi kan lage rammer som gir både en stabil API og mulighet for endring de neste årene. Dette foredraget oppsummerer de erfaringene vi har gjort oss, hva slags typer endringer som ble gjort i gammel API og hvorfor.
Håvard er arkitekt og utvikler i Kantega AS, der han de siste 5 årene har jobbet med virksomhetskritiske systemer for en større norsk virksomhet. Håvard etterstreber balanse, enten det er i bølger og bris, fjellsider med nysnø eller API-design.

The domain is the essential part of your application. It is important that you get a good understanding of what your domain is about. By using value objects, instead of just String, Integer and Boolean, you get to know your domain better. In addition, you will get code that is easier to read, easier to test and self documented.
Å ha en god forståelse for forretningsdomenet en jobber med er essensielt i forhold til å greie og levere gode løsninger for kunden. Som en byggekloss i domenet ditt, kan du benytte verdiobjekter. Det gir deg en rekke fordeler, både når det gjelder det funksjonelle (forståelsen av domenet) og det tekniske. Dessverre virker det som om få vet hva et verdiobjekt er, og ser mulighetene de gir. Jeg vil i min presentasjon gi en kort introduksjon til hva et verdiobjekt er, og deretter bruke resten av tiden til å overbevise deg om hvorfor du bør sjekke ut verdiobjektet nærmere.
Terje jobber som konsulent hos Accenture, og har gjennom 10 år fått være med på mange forskjellige prosjekter. De siste to årene har han jobbet som utvikler/arkitekt i Perform-prosjektet hos Statens pensjonskasse. Han er spesielt interessert i god kode, applikasjonsarkitektur og smidige metoder.

Clojure arguably has the most deeply thought through way of handling of state on the JVM, and because of this it is hard to do concurrency wrong in this language. This talk will show the concepts which make Clojure a "muti-core ready" language.
Denne presentasjonen vil gi deg innsikt i hvordan Clojure som programmeringsspråk håndterer tilstand. Dette gjøres på en helt annnen måte enn hva vi er vant til fra objektorienterte språk. Ved å utvikle programmer på denne måten blir samtidighet og parallellitet mindre problematisk. Presentasjonen vil introdusere Clojure som språk. I tillegg vil vil det tydelig defineres Clojures syn på verdier, tilstand, identitet og tid. Clojure's innebygde typer og datastrukturer gjør det mulig å se verden på en enklere og bedre måte.
Alf Kristian jobber som seniorkonsulent i Know IT Objectnet. Til daglig programmerer han Java, men har flere bi-prosjekter i blant annet Clojure og Scala. Hans hovedinteresser er alternative programmeringsspråk og multi-core problemet.

The lightning talk will discuss the challenges and opportunities when implementing different push solutions for the Android platform. it will also elaborate on experiences with different implementations, and why you should or should not use them.
Informasjon levert på sekundet er noe brukere forventer i større grad enn før. På mobile enheter løses dette gjennom push-teknologi. Det er flere mulige måter å implementere pushteknologi til Android-plattformen, fra helt hjemmesnekra kommunikasjon over protokoller som XMPP og MQTT, til tredjepartsløsninger og Googles egen push-løsning C2DM. Lyntalen vil gi en konsis oversikt over muligheter som ligger i de ulike implementasjonene, hvordan de fungerer, og hva de egner seg til.
Thomas er 27 år, bosatt i Oslo, konsulent i Mesan AS, og jobber til daglig med systemutvikling for desktop og mobile plattformer. Han er glødende interessert i mobilutvikling, da spesielt Android-plattformen, og er ivrig opptatt med å teste ut nye konsepter og løsninger på mobile enheter. Thomas var blant annet en del av teamet som utviklet Postens sporingsapplikasjon for Android og iPhone, og hadde det tekniske ansvaret for Android-delen av prosjektet.

Basefarm has developed their new core system in Scala using a technology stack that developers will recognise from a regular Java project. In this talk I will discuss our experiences with Scala, with an emphasis on how Scala works with the good old Java frameworks.
Vi i Basefarm startet i 2010 å utvikle vårt nye fagsystem. Etter å ha vurdert flere programmeringsspråk falt valget på Scala. Vi valgte Scala blant annet fordi Scala er typesikkert og vi må skrive mye mindre boilerplate-kode enn i Java, samtidig som man kan dra nytte av de tallrike og velutprøvde Java-bibliotekene som allerede finnes. Av rammeverk endte vi opp med Hibernate, Spring og Spring MVC, som alle Java-programmerere er kjent med. I tillegg bruker vi Akka, som er et Scala-bibliotek som hjelper oss å håndtere concurrency, bl.a. ved hjelp av actors. Vi fant raskt ut at selv om det fungerer bra å bruke Java-rammeverkene fra Scala, så kan det oppleves som en skikkelig kulturkrasj fordi Scala gjerne lener seg mer mot funksjonell programmering enn Java. I dette foredraget får du et innblikk i hvordan det fungerer å bruke Scala og Java sammen, hvilke fordeler det gir oss å bruke Scala, hvilke hindre vi har møtt på og hva vi ville gjort annerledes dersom vi skulle gjort dette om igjen.
Nina er utdannet sivilingeniør i kommunikasjonsteknologi fra NTNU. Hun har tidligere jobbet som Java-konsulent, men jobber nå som systemutvikler i Basefarm. Hennes interesser er bl.a. programmeringsspråk, kodekvalitet og smidige metoder. Nina er aktiv i fagmiljøet i Oslo, hvor hun bl.a. er med på å arrangere fagmøter for javaBin.

på norsk.. så da skal ikke denne skrives?
Jee6 har gitt nye muligheter som ikke tidligere har vært mulig. Man kan redusere antall rammeverk da mer er integrert i Java. Feks Spring. Hvor mye kan man presse ut av jee6 før nye rammeverk må inn? Hvordan har det vært å jobbe med Jee6. Det gir også en del intressante utfordringer og det kommer sansynligvis flere av dem. Jeg ønsker å dele mine erfaringer med bruk av Jee6 gjennom et års utviklingsprosjekt på Skatteetaten.
Ken Stephansen is a Senior Consulant at Capgemini. He has over 10 years experince with devlopment and architecture whitin Java/J2EE. Over the years been part of starting up small and large development projects and had a lot of intresting experinces doing that.

This talk is about the expirences of going from a lightweight architecture based on Jetty/Spring to a fully blown clustered grid services hosted on the GigaSpaces XAP plattform. The speaker will try to give som insights into what you need to think about to succeed with creating and depoying a Java grid application.
Foredraget tar for seg erfaringene man har gjort med å gå fra en lettvektsarkitektur basert på Spring og Jetty til en robust gridbasert arkitektur med GigaSpaces XAP. Foredraget vil gå igjennom motivasjon for hvorfor man erstattet nåværende arkitektur og hvilke krav som gjorde at man valgte å benytte en grid plattform. For at tilhøreren skal forstå utfordringene gis det en kort introduksjon til GigaSpaces med fokus på hvilke egenskaper plattformen har som skiller seg fra Jetty eller andre applikasjonsservere som WebSphere og Weblogic. Foredraget vil belyse hvordan man i løpet av 2 år, gradvis endret arkitektur fra en tradisjonell servletbasert arkitektur med database backend til en linjær skalerbar clusteret in-memory grid hvor både data og applikasjon kjører på GigaSpaces plattformen. Overgangen ga en rekke utfordringer for områder som: arkitektur/design, opplæring, utvikling og drift. Foredragsholderen var tidligere med på erstatte en "tungvekts" J2EE arkitektur basert på Websphere med Jetty og vil avslutningsvis gi noen synspunkter på hvordan det har vært å gå tilbake til en kommersiell applikasjonsplattform.
Morten har etter 20 år som utvikler og arkitekt, fått bred erfaring med hvordan man lager løsninger på mange ulike plattformer med arkitekturegenskaper som høy tilgjengelighet, ytelse, skalering, integrasjon, feiltoleranse og hvordan man ivaretar arkitekturegenskaper i forhold til drift og vedlikehold. Som konsulent i Miles AS har han de siste årene hatt et oppdrag hos et europeisk telekomselskap. I rollen som integrasjon- og løsningsarkitekt har han vært med å på etablere og videreutvikle en felles tjenesteplatform basert på Java og grid plattformen GigaSpaces XAP.

In this experience based talk you'll hear why Gradle probably is the best option for describing your build.
Mange klamrer seg fortsatt til en illusjon at alle bygg er (nesten) helt like. Det stemmer kanskje i knøtteligaen men i litt større organisasjoner finner man nesten alltid spesielle krav til bygge/leveranseprosessene. Det virker logisk å velge et byggeverktøy som svært fleksibelt og samtidig basert på konvensjoner. Det verktøyet heter Gradle. Etter snart 2 års erfaring med innføring/bruk av Gradle i store og små prosjekter har Magnus samlet seg opp en rekke erfaringer. Fellesnevneren for bruk av Gradle i prosjektene (utover at det har vært suksesser:-) er at samtlige har hatt spesielle krav/ønsker som neppe ville vært mulig å finne ferdigsnekrede løsninger for. I dette foredraget vil du få smakebiter av styrken i å velge et verktøysett som gjør det lett for deg å tilpasse bygget ditt. Du får illustrert Gradles sterke (og noen svake) sider gjennom konkrete prosjekteksempler. Du kommer til å la deg forelske av Gradles støtte for inkrementell bygging, den nydelige DSL’en for å beskrive bygget ditt og fleksibiliteten til å kunne løse nettopp ditt problem. Vi starter med en kort introduksjon for de som ikke har hørt så mye om Gradle før.
Magnus er Kodemaker og har lang og variert erfaring på Javaplattform. Han har de siste årene opparbeidet mye erfaring med byggeverktøy. Etter at han oppdaget Gradle for 2 år siden har han ikke sett seg tilbake. Magnus er svært opptatt av Groovy økosystemet og har vært med på å starte opp Oslo Groovy Meetup, hvor han også er Organizer.

Minimize useless merge commits and take control over the commit history with git rebase. And have some fun while you're at it.
Umiddelbart etter man tar i bruk git ser man fordelene -- ting går raskt, man kan arbeide lokalt og en opplever gjerne færre merge-konflikter enn tidligere. Noen uker senere og en titt på historien viser en hel del commits som intetsigende lyder "Merge branch 'origin/master' into master". Etter et kjapt søk på Internett, dukker innstillingen autosetuprebase opp som en sølvkule. Men det er det jo selvsagt ikke, en konflikt i form av en simultan endring på samme linje må alltid løses. I tillegg finnes glatte steiner på rebase-stien. Så hvordan fungerer egentlig rebase? I denne lyntalen vil jeg prøve å fjerne noe av magien rundt rebase, og vil vise en arbeidsflyt som bidrar til at man får mye mer kontroll over historien. En ren historie gjør det også mye lettere å rulle tilbake endringer, håndtere konflikter og lage releasemeldinger.
Utdannet sivilingeniør i kommunikasjonsteknologi fra NTNU. Jobber som systemutvikler i Iterate AS. Har holdt flere kurs og workshops om Git.

Are you using jQuery? Do you want to increase your script performance? Learn about simple tips to dramatically enhance your code, especially on a large DOM.
Bruker du jQuery? Vil du vite mer om å forbedre ytelsen til dine skript? Lær om enkle tips for å dramatisk øke ytelsen til din kode, spesielt på store DOM'er.
Ole er utvikler og Seniorkonsulent hos Steria. Han laget sin første hjemmeside i 1996 og har etter dette vært spesielt interessert i webutvikling. Sist gang han fikk utfolde seg på dette var hos en stor norsk bank.

Introduction to C++11 for Java developers
Vi tilbyr en kjapp innføring i C++ for Java utviklere. Det er særlig de nye tingene i 2011 standarden av C++ som vil få fokus. I denne presentasjonen vil vi demonstrere hvordan du kommer i gang med et C++ prosjekt, men vi vil fort gå over til å diskutere og sammenligne sære språkdetaljer. Målet vårt er å lage en presentasjon hvor de flinkeste Java programmere kan lære akkurat nok om den nye versjonen av C++ til å gjøre et informert valg om de vil lære mer om C++11 eller ikke.
Olve Maudal works for Cisco Systems where he is involved in developing telepresence and video conferencing products and solutions. He loves to write code, but is just as interested in how software is developed as what it actually does. Olve is also an active member of the vibrant geek community in Oslo where he is involved in JavaPils, Cantara, XP Meetup, Oslo C++ Users Group, Lean Meetup and a few other things.
Lars Gullik works for Cisco Systems Norway.

Hypermedia and HATEOAS is one of the core principles of the REST architecture. We'll take a practical approach to the subject, and show you how you can implement this principle in an existing web-API.
I fagmiljøene diskuteres det stadig om hva som skal til for å kunne kalle et web-API for et REST-API. Vi mener prinsippet om at hypermedia skal være limet som binder APIet sammen og muliggjør tilstandsendringer er en av de viktigste fordelene REST-arkitekturen gir. Dette er også det som ofte mangler i ellers gode APIer. I dette foredraget tar vi en praktisk tilnærming til emnet, og ser på hvordan man med noen enkle grep kan innføre linker i et eksisterende API. Vi viser hvilke fordeler dette gir, og deler også noen erfaringer vi har gjort oss med å innføre linker i et produksjonssatt API.
Frode er manager i Bekk Consulting og har lang erfaring med integrasjon av it-systemer både ved hjelp av SOAP og REST. Han jobber for tiden med Postens nye storsatsning, Digipost. Her har han hatt ansvar for å designe og implementere ulike API'er for både eksterne kunder og internt bruk. Gjennom gradvis forbedring har han vært med på å gjøre disse API'ene mer roboste for endring ved å innføre en hypermediadrevet arkitektur.
Espen er konsulent i Bekk Consulting, og arbeider for tiden med Postens nye storsatsning, Digipost. Her har han hatt ansvar for å designe og implementere ulike API'er for både eksterne kunder og internt bruk. Gjennom gradvis forbedring har han vært med på å gjøre disse API'ene mer roboste for endring ved å innføre en hypermediadrevet arkitektur. Tidligere har han holdt foredrag på blant annet JavaZone, Roots og Free Test.

Pros and cons with using Cassandra
Prosjektet jeg jobber i har benyttet Cassandra i nesten 2 år og vi har gjort oss noen erfaringer. Har du planer om å benytte Cassandra i ditt nåværende eller neste prosjekt? Kom innom denne lyntalen og vil jeg dele et par "pros and cons" som kan være nyttig
Been a Java consultant for over 10 years, now at Knowit, currently working for Comoyo.

Looking at a real life project we describe how we had to adapt the architecture to suite an environment with a lot of unknowns. The case we will look at is a critical service for the owner and has a relatively large number of integration points. The project had little control over these integration points and ended up with a mindset of: The only thing you know, is that you do not know everything. Hence the architecture had to be adapted, several times.
Det tas utgangspunkt i et prosjekt fra virkeligheten og viser hvordan vi har måttet tilpasse arkitekturen gang på gang som en konsekvens av et miljø med mange ukjente. Caset vi ser på er kritisk tjeneste for eieren og har et relativt stort antall integrasjonspunkter. I tillegg hadde prosjektet lite kontroll på de omkringliggende systemene både når det kom til ytelse og oppetid, mens prosjektet selv skulle produsere en tjeneste med 99.9% oppetid. Vi ser på ytelsesproblematikk, oppetid, integrsjon med hyllevareprodukter, caching teknikker og ressurskontroll. I tillegg til dette måtte prosjektet også håndtere en stadig utvidelse av funksjonaliteten og en stadig økende brukermasse. Arkitekturen måtte endres flere ganger.
Kai Bjørnstad jobber for tiden som Manager og Fagleder for Java gruppen i Bekk Consulting AS. Han har jobbet flere år både i konsulentbransjen og med utvikling av komplisert hyllevare programvare for bedriftsmarkedet. Kai har lang erfaring i bruk av Open Source, eksempelvis PostgreSQL, JBoss, Spring, Eclipse og Linux og har bred kompetanse innen flere teknologier bla. C/C++, Python, Java, Scala, JEE/J2EE, XML og SQL. Han har stor faglig interesse for Enterprise arkitektur, design patterns og JEE plattformen og er også velkjent med integrasjon og bruk av Open Source i kommersiell sammenheng.

Git is more than just a version control system. When your code is stored in Git, you have a lot of different tools at hand in order to make your daily work easier. Git Bisect and Git Rerere are two of these.
Git er mer enn bare et versjonskontrollsystem. Når du bruker Git for å holde på koden din har du et utall av morsomme verktøy du kan benytte for å gjøre hverdagen din mye enklere. Jeg vil i denne lyntalen snakke om to av disse verktøyene: Git bisect - den mest givende måten å finne ut når en bug ble introdusert til koden din. Jeg vil vise hvordan bisect fungerer, og vise eksempler på praktisk bruk. Git rerere - aldri mer en merge du har gjort før. Rerere står for Reuse Recorded Resolution og gjør akkurat det - husker på hvordan du håndterte tilsvarende merge tidligere.
Morten er utdannet sivilingeniør i datateknikk fra NTNU og jobber som systemutvikler i Iterate AS. Han har jobbet med Javautvikling i 7 år, og er interessert i kodekvalitet og testing. I tillegg til det opptrer han også som kursholder i versjonskontrollsystemet Git.

With Java Annotation Processing, you can tell the Java compiler to validate parts of your code to fail at compile-time rather than run-time. This talk will give you an hands-on examples on how to use this seemingly unknown, but powerful technology.
Java annotation processing lar deg skrive compiler plug-ins som setter deg i stand til å gå gjennom koden, lete etter annotasjoner og utføre valideringer i henhold til annotasjonens bruk. For eksempel kan du sjekke at alle klasser annotert med @EJB har @SecurityDomain satt og at verdien ikke er feilstavet, alt gjort på kompileringstidspunktet. I dette foredraget vil Vidar gi deg en innføring i Java Annotation Processing. Foredraget forklarer hvordan du instruerer javakompliatoren til å validere kode slik at du får kompileringsfeil og ikke kjøretidsfeil, uten å ta i bruk mekanismer andre mekanismer enn Core java. Utfordringer rundt IDE-støtte blir også diskutert. Etter foredrag vil tilhørerne ha fått innblikk i hvordan Java Annotation Processing fungerer og hvordan de kan ta det i bruk i sine egne prosjekter. Annotation processing er ikke mye brukt og foredraget vil være en fin mulighet til å få en rask innføring i en spennende mekanisme som kan gi interessante muligheter.
Vidar jobber som utvikler og fagleder for webutvikling i Knowit i Oslo. Vidar har jobbet som utvikler siden 2007, men har programmert så lenge han kan huske - alle fall siden ungdomsskolen. Vidar jobber til daglig med store kodebaser, og er opptatt av god kode og er møkka lei dårlige rammeverk/biblioteker.

Are you using the Java Persistence API in your applications without considering the alternatives? Is JPA really the best choice in every situation? This talk will encourage you to think before you choose your persistence technology.
Havner JPA i persistenslaget ditt uten at du tenker over alternativene? Er egentlig JPA den beste løsningen på alle persisteringsoppgaver? Dette er spørsmål jeg med tiltagende frekvens har stilt meg selv de siste årene. I denne lyntalen vil jeg snu JPA-medaljen og avsløre dens hårete rygg. Hva er det egentlig man får med på kjøpet når man velger JPA, og hvordan påvirker dette resten av applikasjonen? Når bør man velge noe annet, og i så fall hva er alternativene?
Lars Andreas jobber som seniorkonsulent i Mesan AS hvor han også har en sentral rolle i fagorganisasjonen. Han har 6 års erfaring fra store og små prosjekter på javaplattformen, med roller som utvikler, teamleder og arkitekt. Lars Andreas er blant annet interessert i kodekvalitet og vedlikeholdbare løsninger på komplekse problemer.

Do web frameworks need to be large lumps of features and constraints ? No. Not really. This live coding session will cover Unfiltered, a toolkit for servicing HTTP requests in Scala. I start from scratch and end up with a working web application deployed in Heroku at the end of the session.
En sjelden gang i blandt dukker det opp et rammeverk som gjør akkurat det som trengs. Hverken mer eller mindre. Unfiltered er et av disse. Unfiltered kaller seg riktig nok ikke et rammeverk, men et toolkit for å håndtere HTTP requests for Scala. Jeg har nå hatt gleden av å bruke Unfiltered i et par prosjekter. Og har lyst til å dele min fasinasjon av dette rammeverket. Dette er ikke et foredrag i tradisjonell forstand, men en live coding session. Jeg vil på min tilmålte tid vise hvordan man, med blanke ark, kan komme i gang med Unfiltered. Vise grunnprinsippene Unfiltered bygger på, lage en liten applikasjon for å demonstrere prinisppene. Til slutt installere løsningen på Heroku for alle å se.
Opinionated programmer with a beard at Arktekk Kaare Nilsen is a passionate programmer with more than 15 years of experience from projects in various industries, in both private and government sector. After all these years he is proud to still call himself a programmer. Kaare is not afraid of letting his voice be heard, and often speaks about various programming and open source topics at meetups and conferences.

Frameworks can kill you, others can save you. How do you spot the difference?
Rammeverk er utrolig utbredt i programmering i dag, og kanskje spesielt Java. Gjennom tidene har rammeverk reddet oss fra Java EE, forenklet utvikling og gitt en fantastisk mengde med kode vi kan studere for å lære mer. På både godt og vondt. Men kanskje det har gått for langt? Viljen til å bruke rammeverk er så stor at man fortsetter å bruke de selv om de har høyere kostnad enn verdi. Jeg har pirket borti en del rammeverk, og har opparbeidet meg en sunn skepsis. Rammeverk er der for å hjelpe deg, kommer de i veien må du kaste de ut før du blir sittende helt fast i hengemyra! Det er ingen grunn til å benytte rammeverk for rammeverkets del. Jeg har noen tips til hva du skal se etter for om rammeverket fungerer for deg, eller om du kanskje skal sette deg ned å skrive noe selv. Det er lett å undervudere problemene et rammeverk kan føre til, og å undervudere verdien et helt egenprodusert spisset rammeverk kan ha.
Anders er seniorkonsulent hos Miles AS. Han har over 7 års erfaring fra store og små prosjekter innenfor mange forskjellige bransjer. Gjennom varierende roller i prosjekter har han fått solid erfaring med smidige prosesser, Java EE, TDD, databaser, integrasjon og objektorientert design. Han brenner for smidige prosesser og enkel, endringsdyktig kode som gir maksimalt med verdi for organisasjonen.

Howto avoid, spot and fix performance problems arising when using external indexing technology in conjunction with key-value stores.
Valg, og bruk, av indekseringsteknologi i sammenheng med key-value databaser kan berike spørremuligheter, men vil det også påvirke ytelsen til systemet. Praktiske erfaringer ved valg av strategier og tuning av indeksering med basis i et Qi4J-basert system.
Java Programmer employed at Webstep. 17 years of professional experience with many programming languages and platforms. Information flow enabler.

We use maven for builds, versioning and dependency management of components. This lightning talk describes the idea behind using our own tailored Ruby scripts for agile and swift delivery in a large development project.
Vi bruker git som versjonskontroll og maven for å styre avhengigheter, bygge og versjonere. Men for leveranser brukes egenutviklet Rubyscript som hjelper deg å levere ofte og hurtig. Lyntalen beskriver ideen bak ett sett med Rubyscripts som gjør smidige og hurtige leveranser mulig i et stort utviklingsprosjekt med flere hundre maven-artifakter og avhengigheter.
Jan Henrik Gundelsby er utdannet Cand Scient og har over 10 års erfaring med serverside Java-teknologi, både J2EE og lettvektsrammeverk. Han jobber i dag for Know IT Objectnet som teknisk prosjektleder, arkitekt og utvikler for et større offentlig IT-prosjekt. Jan Henrik er fagleder for DevOps i Knowit og en ivrig lettvekts-fantast som forsøker å jobbe mot smidige arkitekturer og løsninger som gir økt produktivitet for utvikleren.

This speach examplifies unexpected ways of doing or not doing things in Java. Contains examples on how sometimes not to code in Java.
Java sin største styrke er at du kan forstå kode som er skrevet av andre. (Eller av deg selv to måneder før!) Her finnes ikke fnugg av operator overloading, implicits og multippel inheritance. Begrepsapparat og mengden programmeringskonsepter er håndterlig. Rett som det er treffer man likevel på konstruksjoner som er uventet, der reaksjonen er enten latter, hoderystning eller "går det virkelig an ?". Denne lyntalen inneholder rare, morsomme og overraskende kodeeksempler som foredragsholderen har snublet over i årenes løp. Eksemplene dekker tema som generics, method resolution, initialisering og serialisering. Målet er å vise at selv om syntaksen og semantikken i Java er overkommelig, så finnes det overraskende måter både å skyte seg selv i foten på og også å lage robust kode.
Svein Otto er senior systemutvikler hos Kantega AS. Han har hatt systemutvikling som levebrød de siste 30 år, fortsatt i live, nysgjerrig og glødende interessert i programmering. "Kompilatoren er vår venn !" er et slagord han sverger til. Har programmert i Java, C++, Mary, Simula...

All your JRE's are belong to us! Why Java vulnerabilites are emerging as the most effective way to compromise computers, and a practical example why you should go home and uninstall Java now.
Utnyttelse av sårbarheter i Java er i ferd med å bli blant de vanligste metodene for en angriper å ta over en PC. Samtidig surfer de fleste av oss på nettet med Java-applets aktivert i nettleseren. Kan man stole på at sandkasseteknologien gjør nettsurfing trygt? Denne lyntalen prøver å gi svar på hvorfor utnytting av Java-sårbarheter nå er i vinden, og du vil få se både angrepskode og en demonstasjon på hvordan et sikkerhetshull i Java kan utnyttes. Det vil til slutt bli gitt råd til utviklere, arkitekter og nettsurfere om hvordan de bør forholde seg til Java på klientsiden. Koden fra lyntalen kan lastes ned fra http://all-your-JREs-are-belong-to-us.com
Jostein har jobbet med Java-utvikling i 8 år og har en genuin interesse for sikkerhet. Han har et stort ønske om at Java-verden skal bli mer sikkerhetsbevisst, og mener det er på høy tid at JavaZone nå har fått et topic som heter "Security". Til daglig jobber Jostein som Senior Software Engineer hos Steria.

HTTP was invented by Tim Berners Lee 20 years ago. A lot has happened since then. We look at HTTP-related problems and how Google's SPDY solves some of these.
HTTP ble funnet opp av Tim Berners Lee for 20 år siden. Mye har skjedd siden den gang. Vi ser på utfordringer med HTTP og hvordan Googles SPDY løser noen av disse.
Stefan Magnus Landrø er manager i Bekk Consulting, og jobber til daglig med utviklingen av Digipost for Posten Norge. Han har vært ansvarlig for sikkerhets- og ytelsestesting i prosjektet. Stefan er en aktiv bidragsyter i BEKKs javamiljø, og har tidligere holdt foredrag på blant annet JavaZone, Software og Smidig-konferansene.

Liquibase is a tool to help controlling migrations in SQL databases. The tool has existed for quite some time, but still it is not that known. After several years of experience with this tool vi explain why you should use this type of tool, and how to get started with Liquibase.
Liquibase er et verktøy for å hjelpe til med å få kontroll på migreringer i SQL databaser. Verktøyet har eksistert lenge men er likevel mindre kjent. Etter flere års erfaring med verktøyet går vi gjennom hvorfor man bør bruke slike verktøy, hvordan man kan komme i gang med Liquibase og hvilke erfaringer vi har med det.
Kai Bjørnstad jobber for tiden som Manager og Fagleder for Java gruppen i Bekk Consulting AS. Han har jobbet flere år både i konsulentbransjen og med utvikling av komplisert hyllevare programvare for bedriftsmarkedet. En fellesnevner for de fleste prosjektene han har deltatt i er SQL databaser. En annen fellesnevner har vært en stadig endring av disse databasene for å tilpasse seg ny eller endret funksjonalitet i applikasjonene som benytter dem. Kai har lang erfaring i bruk av Open Source, eksempelvis PostgreSQL, JBoss, Spring, Eclipse og Linux og har bred kompetanse innen flere teknologier bla. C/C++, Python, Java, Scala, JEE/J2EE, XML og SQL. Han er også velkjent med integrasjon og bruk av Open Source i kommersiell sammenheng.

This presentation will discuss different pros and cons with organizing code, either horizontally or vertically.
Når en skriver kode, er det ikke uvanlig å ønske å dele inn koden i moduler/komponenter. Det kan være mange grunner til det; lagdeling, funsjonalitet, gjenbruk. Når koden deles inn, kan en velge mellom horisontal inndeling eller vertikal inndeling. Denne lyntalen vil se på ulike fordeler og ulemper som følger med de ulike valgene, og forhåpentligvis gjøre at du som utvikler/arkitekt er bevist på valget ditt neste gang du skal gjøre et slikt valg.
Engasjert utvikler og arkitekt med 10 års erfaring fra ulike prosjekter. Brenner for god kode, et godt produkt og smidig utvikling.

The shell will serve you loyally, always and down to the last command. - "Some assembly required"
Shellet kan bli din beste venn og gi deg alt du trenger, kjapt og effektivt. Men; "Noe montering må påregnes" Jeg vil gjerne dele mine erfaringer om hvordan jeg har konfigurert mitt shell for å all den informasjon og funksjonalitet jeg trenger.
Anders Brujordet er utdannet Master i Informatikk ved NTNU og jobber som utvikler hos Knowit i Oslo. Anders er svært glad i alt av teknologi som kan gjøre hverdagen lettere og skape mer tid nye teknologier.

Self-made solution or a well established framework? We started using the Activiti framework, but ended up with our own custom solution. Everything went fine until our home grown solution started to grow in size and complexity...
Vi utvikler en saksbehandlingsløsning for Oslo kommune, og har behov for å støtte langvarige prosesser. Det opprinnelige valget falt på Activiti Business Process Management Platform, som lar oss modellere prosessene i XML. Selv om det tilsynelatende var rett verktøy for jobben, forklarer vi hvorfor Activiti ble hevet ut og erstattet det med en enkel, skreddersydd løsning basert på en tilstandsmaskin. Noen måneder senere begynte imidlertid den enkle løsningen vår å ese ut. Var ikke verden så enkel som den så ut? Var vi i ferd med å re-implementere Activiti? Vi forteller hvordan dette gikk, og hva vi erfarte underveis.
Torstein er sjefsarkitekt og medeier i Kantega AS. Torstein har 10 års erfaring med arkitektur og systemutvikling på Java-plattformen. Han er arkitekt i et prosjekt med en størrelse på 20 000 timer, basert på Apache Wicket.

DIY: Create the next Instagram in your web app, using only well-known technologies like HTTP, Java Servlets and Java 2D.
I dette foredraget vil jeg gå gjennom det det grunnleggende som skal til for å lage en enkel "asset manager" web-applikasjon, basert på kjente teknologier som HTTP, Servlets/Filtere og Java 2D. Nesten helt uten bruk av tredjeparts biblioteker. :-) Dette enkle fundamentet vil på sikt kunne utvides til å gjøre relativt avansert "on-the-fly" bildemanipulering, f. eks legge på retro "lomo-look" a la Instagram/Hipstamatic og lignende tjenester. Jeg vil presentere en relativt rett-fram arkitektur med tanke på god ytelse og skalerbarhet. Web-applikasjonen vil kunne brukes, både som backend for å serve web-klienter (nettlesere) direkte for bruk på nettsteder, eller som en REST-style backend for tykkere klienter (mobil eller desktop). Til slutt vil jeg gå igjennom litt dyrkjøpt erfaring, og identifisere noen typiske feller, samt komme med lure tips og triks for å overvinne noen vanlige utfordringer i denne type teknologi.
Harald har jobbet profesjonellt med Java siden 1998, og har lang erfaring fra utvkiling av Java EE-, Swing-løsninger og spesielt CMS-systemer. I de siste årene har han jobbet som konsulent i Bouvet. Harald er glad i enkle løsninger som fungerer, og går fort lei av dårlige brukeropplevelser (selv om han nok har bidratt til en og annen dårlig løsning i løpet av karrieren sin selv, om han skal være helt ærlig). Harald interesserer seg for fotografering, digital bildebehandling og har en forkjærlighet for sære filformater. Selv om det blir stadig vanskeligere å finne tid til gladprogrammering på fritiden, får han en gang i blant brukt dette til noe matnyttig, og da fryder nerden i ham seg. :-)

You have to solve the problem but your enterprise integration project will almost never look pretty in real life. They always feel somewhat bad. But this slightly less bad thing over here compared to that inherently ugly and expensive thing over there might just be good enough.
Store enterpriser har integrasjonsutfordringer. Utfordringene *må* løses, og gjerne på bare litt for kort tid hvis du er heldig med prosjektet. Og så kommer følelsen av at dette blir dårlig. Enterpriseløsninger man bare må fikse, gjerne med en tungvekts produktportefølje i tillegg, har liksom en dårlig aura rundt seg. Det ender på en måte alltid opp som "dårlig". Men hvis vi bare kan endre tilnærmingen litt og få til noe som er litt bedre, bare sånn passe dårlig, er det kanskje godt nok?
Jan Fredrik Wedén jobber i BEKK og har over ti års erfaring som systemutvikler, konsulent og arkitekt. Han har jobbet med systemer i alle størrelsesordner, fra små enbrukersystemer, via små og mellomstore publiseringssystemer og webløsninger til moderne webapplikasjoner og komplekse integrasjonsprosjekter. Han kom tidlig inn i prosjekter som benyttet testdrevet utvikling og smidige teknikker og har senere jobbet i mange team som har praktisert varianter av Scrum, lean, XP og kombinasjoner av disse. Etter en kort periode med gammeldags ASP-utvikling i begynnelsen av sin karriere har Jan Fredrik siden bygget sin kjernekompetanse på Javaplattformen innen enterprise- og webprosjekter. Han var innom EJB den gangen det var skikkelig hot og byttet til lettvektsløsninger og IoC-rammeverk ettersom det overtok tronen som det kuleste man kunne drive med. Persistering har vært løst via alt fra selvskrevne JDBC-lag via ORM-rammeverk og i den senere tid lagring uten SQL. Han har jobbet med integrasjonsløsninger og varianter med REST, SOAP og WS-* i bransjer som energihandel, bank/finans og innen utdanningssektoren. På fritiden har han stor interesse for bratt friluftsliv og er gjerne å finne på et fjell med ski under bena, klatrende i en fjellvegg eller syklende der motoriserte kjøretøy sjelden kommer frem.

An approach to combine responsive web design with server side components to make advanced responsive web solutions that work for all kinds of devices.
Responsive Web Design er en rekke teknikker for å optimere websider til forskjellige typer enheter og browsere. Tilpassingen gjøres ofte av browseren, men mange responsive sider er store og tunge og ikke særlig brukervennlige på mobilen. Det er også en utfordring å tilpasse fastbredde innehold til en slik context. En alternativ løsning er å gjøre en tilpassing av websida på server siden ved å servere ulike versjoner til ulike weblesere. I denne presentasjonen vil vi se hvordan vi kan kombinere det beste fra begge disse metodene – også kalt RESS.
Anders bor i Stockholm og jobber som konsulent for Valtech. Han er en erfaren mobil og web utvikler og har mange års erfaring med device og browser fragmentering. Han har jobbet på mange store mobilprosjekter, men er nå mest involvert i Responsive Web prosjekter og optimering av den mobile opplevelsen.

The next step in the technology evolution has reached the Enterprise world. Today, companies want to offer their employees a chance to work on a mobile platform, to achieve more efficiency and perform advanced tasks. Users normally deal with desktop applications or websites, and need vast amounts of data instantly accessible, even in an offline situation. How to do this on a mobile platform? Which opportunities and pitfalls can arise? This presentation focuses on building an Enterprise Android application, with regards to large amounts of data that needs to be synchronized, ORMs for Android, architecture challenges like distribution and handling the fragmented Android world, and what is happening when we push the limits of Android.
Det neste steget i teknologi-evolusjonen har nå nådd Enterprise-verden. Stadig flere bedrifter vil tilby arbeidstakere å jobbe på mobile plattformer. Man ønsker å utnytte store og små håndholdte enheter til daglige arbeidsoppgaver, slik at det oppnås større effektivitet og kan utføres avanserte handlinger hos brukere som ikke sitter bak en PC til enhver tid. Brukerne idag har gjerne en desktop-applikasjon eller en webside å forholde seg til i sitt daglige virke, basert på store databaser, mange skjermbilder og rike brukergrensesnitt. Det forventes at man kan utføre avanserte oppgaver og få tilgang til store mengder informasjon på kort tid, gjerne uten å være online engang. Hvordan kan man da gjøre dette mobilt, da spesielt på nettbrett? Hvilke muligheter og fallgruver kan man støte på, og hvordan håndterer man disse? "To boldly go where no man has gone before"! Her vil det bli et dypdykk i både kode, GUI, bruk av interne komponenter, arkitektur og finurlige Androide quirks, samt fokus på synkronisering av store datamengder mot Oracle databaser. Presentasjonen vil benytte eksempler og erfaringer høstet fra blant annet et stort Enterprise-prosjekt på Android-plattformen for Mesta AS.
Thomas er en systemkonsulent i Mesan AS, og jobber til daglig som mobilutvikler på Mesta. Han har god erfaring med Android-applikasjoner, og har blant annet laget Postens sporingsapplikasjon på Android. Nå sitter han i et stort Enterprise-prosjekt på Android nettbrett som arkitekt og utvikler hos Mesta. Thomas elsker mobilteknologi, og søker stadig nye måter å benytte denne fantastiske nyvinningen.

If you want to do Continuous Delivery, you should develop on mainline, or at the very least merge to mainline daily. In this talk I will explain some techniques and patterns that can be used to achieve this, such as: Feature toggles and Branch by Abstraction.
For å kunne levere kontinuerlig er det viktig at kodebasen blir integrert kontinuerlig, dvs. at man merger til mainline minst en gang om dagen. På denne måten legger du til rette for at koden er klar for deploy oftere, det blir lettere å estimere oppgaver, og du sparer deg selv for unødvendig smerte. F.eks. "merge hell" og kode som er vanskelig/umulig å refaktorere. Noe som lett kan forekomme når en feature-branch bare blir merget tilbake til mainline etter at den er ferdig. Jeg vil derfor gå gjennom teknikker og patterns som "branch by abstraction" og "feature toggling", som gjør det lettere å kode direkte i mainline.
Sveinung jobber som utvikler hos BEKK. For tiden fokuserer han på Kontinuerlige leveranser og DevOps, og hvordan man gjennom dette kan forbedre kvaliteten på produktet og redusere "waste". Han har tidligere presentert på Smidig og Akademy.

The adoption of good architecture governance, establishing a well functioning framework and good quality assurance procedures require years of investment in good and systematic work. But what do you do when you have limited resources and the environment calls for governance?
Å innføre god arkitekturstyring, etablere et godt ramme- og metodeverk og gode kvalitetssikringsrutiner, krever flere års investering i godt og systematisk arkitekturarbeid. Men hva gjør du når du har begrenset med ressurser og miljøet roper etter styring? Gjennom enkle virkemidler kan du øke kunnskapen i organisasjonen og få bedre dokumentasjon på arkitekturen i systemene. Du får til og med et virkningsfullt styringsverktøy for videre livssyklusplanlegging!
Therese Lindblom har det siste året arbeidet med å øke fokus på sikkerhets- og systemarkitektur i utviklingsmiljøet i Politiets data- og materielltjeneste (PDMT) samt å etablere rutiner for arkitekturstyring. Hun jobber med mål om at rutiner og metoder skal være enkle å følge og at brukerne av metodeverket ser nytten helt på egen hånd. Therese leder seksjonen for systemarkitektur i PDMT.

Everybody is giving cloud experience reports these days and they all talk about the same problems. Guess what, the P2P paradigm has been dealing with these problems for years. This talk gives you an introduction to P2P principles and a cool example application that lets your irc-presence last forever.
IRCPeer er ingen vanlig irc-klient. IRCPeer sørger for at du kan være online 24/7 uten at du må betale for premium hosting. Ved hjelp av enkel P2P teknologi sørger IRCPeer for at en annen bruker av IRCPeer hoster din sesjon når du ikke selv er online. Så lenge du er villig til å hoste en annens sesjon når du er online vil noen hoste din når du ikke er online. Det hele er løst ved hjelp av en DistribuertHashTable basert på Freepastry, pircbot og implementasjon i Scala.
Konrad Beiske er sivilingenør innen datateknikk med spesialisering på databaser fra NTNU. For tiden jobber han i Bouvet og er engasjert i styret i javaBin. I sin master oppgave jobbet han med tilpasning av cache investement for en semantisk cache i et peer-to-peer-basert databasesystem.

In this talk I will show how Polyfilling can close the browser gaps and allow you to use HTML5 features today.
Som webutvikler ønsker jeg å ta i bruk nye nyttige HTML5-funksjoner i dag. Problemet er at jeg fremdeles har en del brukere med eldre nettlesere (IE6, IE7, IE8). Et annet stort problem er at støtten for nye HTML5 funksjoner fortsatt er veldig fragmentert. Jeg ønsker å bruke nye HTML5 API’er i dag. Jeg ønsker samtidig at siden min skal fungere for alle mine brukere uten spesialhåndtering for de ulike nettlesere. Jeg vil i denne lyntalen vise hvordan Polyfilling tilfører kode som normaliserer nettleser-API’ene og tilbyr den funksjonaliteten nettleserene burde støtte native.
Ivar jobber til daglig som webutvikler hos Itera Consulting. Han elsker å finne enkle og robuste løsninger på nye utfordringer. De siste årene har Ivar jobbet mye med WEB-løsninger, både tradisjonelle, og med RIA-løsninger hvor hele fronten implementeres i JavaScript. Ivar er opptatt av å bygge et sterkt lokalt fagmiljø og har de siste årene aktivt bidratt med å arrange den årlige Smidigkonferansen.

An experience report from writing a Java backend for a multiplatform mobile application.
Lyntalen gir en erfaringsrapport fra utvikling av en Java backend som leverer tjenester til en multiplatform mobilapplikasjon. Tjeneren er bygget ved hjelp av verktøy som Jersey, JDBCTemplate og Jetty. Foredragsholderen vil raskt beskrive case og hvordan applikasjonen er implementert. Deretter vil positive og negative erfaringer bli delt med publikum. Til slutt vil alternative tilnærminger i form av bruk som rammeverk som Dropwizard (http://dropwizard.codahale.com/)bli vurdert opp mot implementert løsning.
Tobias er fagsjef i Know IT Objectnet. Han har 15 års erfaring fra konsulentbransjen hvor han stort sett har jobbet med utvikling av store mellomvareløsninger implementert i Java. Tobias har tidligere holdt foredrag på rOOts, JavaZone, Kunnskapstinget og flere andre konferanser. Han er styremeldem i dataforeningen østlandet og en av initativtakerene til konferansen Communities in Action. Tobias er tidligere styremedlem i javaBin og satt i JavaZones programkomite fra 2004-2009. Tre av disse årene fungerte han som leder.

HazelCast open-source data grid provides a simple and easy way to get started with Grid technology. This talk provides a couple ideas on how you can have fun with this, while you learn new skills about grid computing.
For mange Java applikasjoner blir databasen en flaskehals. Det har vært mye fokus på skalering ved hjelp av alternative databaseteknologier (Big Table, Document database, NoSQL etc.). Hvorfor ikke ta steget helt ut og kutte ut databasen for prosessering? Flytt databasen til minne og opplev dramatiske ytelsesforbedringer langt utover bytte av databaseteknologi. Denne lyntalen er ment å vise hvor enkelt er å utvikle slike løsninger med open-source gridløsnigen HazelCast. Lyntalen vil vise hvordan man skriver og leser til et grid. Samt hva som skjer når lasten øker og "hardwaren" svikter.
Morten har etter 20 år som utvikler og arkitekt, fått bred erfaring med hvordan man lager løsninger på mange ulike plattformer med arkitekturegenskaper som høy tilgjengelighet, ytelse, skalering, integrasjon, feiltoleranse og hvordan man ivaretar arkitekturegenskaper i forhold til drift og vedlikehold. Som konsulent i Miles AS har han de siste årene hatt et oppdrag hos et europeisk telekomselskap. I rollen som integrasjon- og løsningsarkitekt har han vært med å på etablere og videreutvikle en felles tjenesteplatform basert på Java og grid plattformen GigaSpace XAP.

How do we secure REST-based services? What mechanisms are available and what are the pitfalls we need to avoid?
Mens sikkerhetsmekanismer i SOAP-baserte tjenester er veldefinerte, finnes det mange forskjellige måter å sikre REST-tjenester på. Vi ser på hva som er viktig når man skal sikre REST-tjenester, og hvilke feil man bør unngå. Vi går gjennom noen av løsningene som benyttes av større aktører og ser hvordan disse beskytter tjenestene.
Erlend is a developer at Bekk Consulting AS, where he is also the head of the security competency group. He is also the chapter leader of the OWASP Norway chapter. He is passionate about secure coding and secure-by-default frameworks that help developers build secure applications.

Native mobile applications or not ? I'll try to discuss some of the choices we made while developing a mobile application for Oslo County. We chose to go with native apps, and I'll tell you why.
Bør jeg bruke MEAP i mitt mobilprosjekt, eller bør vi skrive appene native? Ønsker å dele noen erfaringer og tanker som ble gjort i forkant av et mobilprosjekt levert på Android, iPhone og Windows Phone 7. Vi valgte å gå for native apper, jeg forteller hvorfor.
Polyglot utvikler som til vanlig jobber med en storskala Java backend-løsning. Har de senere år fått drypp av mobilappliksjoner inn i CV'en.

A lightning talk about common pitfalls and misconceptions concerning scope, context and visibility of variables in JavaScript. A little heads up for the people that is starting to embrace hipster-language numero dos. There will be mustasches!
I mange miljøer oppleves barter og skjegg som mer mandig enn det å være glattbabert. Du var kanskje ikke klar over det, men det er grunnen til at alle kule programmeringsspråk tar i bruk barteparenteser. Barter har derimot ikke alltid den effekten en tror de har. Selv ble jeg overrasket både av responsen jeg fikk av min egen bart i November, og den jeg fikk når jeg tok i bruk barter i JavaScript. Hvem hadde trodd at en enkel bart kunne være så forskjellig? Dette er varskolyntalen for deg som har begynt å snuse på hipsterspråk numero dos, JavaScript. Har du enda ikke rukket å sette deg inn i scope, kontekst og variabelsynlighet? Ta det med ro, her får du de grunnleggende reglene som gjør JavaScript litt mer begripelig i starten. Og hvis du lurte… jada, det er forskjellig fra Java.
Jobber som utvikler hos Knowit. Etter en bekymringsfri tilværelse på et av Norges første Scalaprosjekter vier Alfred nå sin kjærlighet til rundt 80 løst koblede Java komponenter i Oslo Kommune. Når han får mulighet, både på jobb og fritid, kan han raskt finne på å utøve selvpining i form av å lære seg JavaScript enda bedre. Dette går selvsagt ut over hans kjære kolleger på fagturer.

Learn how to overcome the barrier of starting Test-Driven Development (TDD) on legacy code, and how to keep doing TDD even if other team memebers won't.
Er du en av de som sier "Jeg skulle gjerne drevet med testdrevet utvikling..." * "men de andre utviklerne på prosjektet driver ikke med TDD, og derfor blir ikke koden testbar" * "men det er legacy kode vi jobber med, så TDD blir umulig" så er denne lyntalen for deg! Du vil få se hvordan man fint kan drive med TDD på såkalt utestbar legacy kode, via konkrete Javakode-eksempler som du kan ta med tilbake til kontoret på mandag og innføre i din egen kode. Se teknikker for hvor man starter, og se at du _ikke_ trenger å kjøpe mock-rammeverk for testing av private eller statiske metoder. Bli sjefen over din egen kode, lær praktiske teknikker for å få inn enhetstestene på plasser der du trodde du måtte gi opp!
Eirik Folstad Wahl er en senior systemutvikler i konsulentselskapet Itema as i Trondheim. Eirik har drevet profesjonelt med systemutvikling i Java (og .NET) siden 2000. Etter å (skamfull) rekke opp hånden på Uncle Bob sitt spørsmål på JavaZone for noen år siden "Who of you in the audience does NOT do Test Driven Development?", og fått kollektiv (berettiget) kjeft, så har Eirik de siste par-tre årene fått skikkelig dreis på TDD, selv på gamle prosjekter. Han har erfaring fra å hjelpe kollegaer som kan TDD men ikke får til å komme igang.

Browser based application often need regression testing to ensure high quality and customer satisfaction. We share experience in using tools and methods for making easily maintainable automatic GUI-tests. Central topics are Selenium 2, WebDriver and the page object pattern.
Regresjonstesting av browser-baserte applikasjoner tar mye tid, men er viktig for å opprettholde god kvalitet ved videreutvikling. Automatisering av slike tester er alltid et ønske, men det er ikke lett å få testene lett vedlikeholdbare og robuste. Ofte blir testene lett utdaterte og til mer frustrasjon enn en hjelp. I lyn-talen deles erfaringer om fallgruver som oppstår ved innføring av slike automatiske tester. Som en del av erfaringene gjennomgås verktøy og metoder vi har benyttet for å unngå eller motvirke disse effektene. Fallgruvene er ofte tekniske men fører gjerne til andre utfordringer som mangel på motivasjon og "eierskap" i teamet. Noen sentrale tema er Selenium 2, WebDriver og page-object pattern.
Erlend Flaten er utdannet Sivilingeniør i datateknikk fra NTNU. Til daglig jobber han som konsulent hos Antares Gruppen AS. Han har jobbet som utvikler siden 2005. De siste fire årene har han jobbet med browser-baserte saksbehandlingsapplikasjoner. Dette arbeidet krever repetitiv regresjonstesting som tar mye tid. Dette har inspirert til å finne frem til verktøy og metoder for å gjøre regresjonstestene lettere. Han jobber sammen andre konsulenter fra Antares Gruppen AS for å få automatiske GUI-tester som en enkel og solid del av regresjonstestene.

PhoneGap is an HTML5 app platform that allows you to write native applications with web technologies and get access to APIs and app stores. PhoneGap uses web technologies like HTML, JS and CSS to bridge the gap between native and web applications.
Har du lenge sittet med en idè til en knallbra mobilapplikasjon, men har ikke kommet i gang fordi du må lære deg Java eller Objective-C eller C# for å utvikle en native app? Eller har du kanskje utviklet en webapp som du syns mangler litt native funksjonalitet? Da er PhoneGap løsningen for deg. Med PhoneGap utvikler man hybride applikasjoner som består av webteknologier som HTML5, JS og CSS3 og man bygger en app som er mulig å deploye til hele 7 ulike plattformer. PhoneGap er laget for å bygge broer.
Seniorkonsulent i BEKK som har jobbet med utvikling i 4,5 år og tilhører faggruppen Mobilt. Liker å prøve ut ulike cross-plattform rammeverk for mobil utvikling og har tidligere holdt presentasjon og workshop om PhoneGap både i interne og eksterne fora.

AndEngine is an open source project for developing 2D android games. This lightning talk will give you a short introduction, and tell you how to work with the most common classes.
AndEngine er et opensource rammeverk for å utvikle 2D spill til Android. Det tilbyr et forenklet API til openGL og det kan enkelt knyttes til Box2D for å impl. fysikk. Denne lyntalen vil presentere hvordan man kommer i gang med versjon GLES2, som benytter seg av OpenGL ES 2.0.
Fagleder på den mobile plattformen hos Knowit Objectnet.

An insight into how to adapt Scala-libraries (or similar) into Java.
Bruk av Java fra Scala er enkelt fordi at Scala har vært byggd utfra den forutsetning at Scala må bruke Java-funksjonalitet. Det samme gjelder andre språk som Groovy og JRuby. Hva om du trenger funksjonaliteten den andre veien? Om du har et Scala-bibliotek du svært gjerne ønsker å bruke. Hva er da riktig vei å gå fram?
Erfaren utvikler med over 10 år innen java bak seg. Har i det senere utviklet mye i scala og er opptatt av funksjonelle språk og lettere arkitekturer.

Learn how to use Hazelcast to solve problems involving big data and high performance on computations. See examples of how this technology can be used to speed up Norwegian tax calculations!
De siste årene har det blitt mer og mer fokus på behandling av store datamengder og ytelse. Grid-produkter kan tilby et spennende alternativ til den tradisjonelle databasen, gjennom at mange maskiner jobber sammen med å holde data i et distribuert minne. Dette gir egenskaper som tilnærmet lineær skalering og ekstremt høy ytelse. Denne presentasjonen viser Open Source produktet Hazelcast. Med eksempler viser vi hvordan produktet fungerer, og går gjennom erfaringer vi har hatt med produktet det siste året. Eksemplene taes hovedsaklig fra Skatteetaten hvor produktet har blitt testet ut for områder som datainnsamling og skatteberegning.
Eivind jobber i BEKK og har mange års erfaring som utvikler og arkitekt på Java-prosjekter. Han har stor interesse for forskjellige programmeringsspråk og paradigmer. Det siste året har han jobbet med utvikling av grid-baserte løsninger hos Skatteetaten. Eivind er også fagsjef for Java i BEKK. Han har holdt presentasjoner på JavaZone mange tidligere år.

Are you wondering if Apache Wicket is the right tool for larger projects? In this experience based talk we will give concrete advice for what to do and what not to do.
Leter du etter et bedre komponentbasert webrammeverk? Vil du lage brukervennlige nettsider, men misliker å skrive JavaScript? Ønsker du å skille presentasjon og logikk? Da har du kanskje vurdert Wicket, som kan friste med Java-sentrisk programmeringsmodell og lite XML. Kanskje har du skrevet noen enkle applikasjoner allerede, men tør du bruke Wicket til ditt neste store prosjekt? I dette foredraget deler vi våre erfaringer med Wicket. Vi forteller deg det dokumentasjonen ikke forteller, og det som blogg-eksempler og minimale demo-applikasjoner ikke tar hensyn til. Vi gir deg eksempler på arkitekturprinsipper som fungerer, og forteller om noen som ikke har fungert. Temaene er: * GUI-arkitektur i en voksende kodebase. Hvordan dra nytte av Wicket sin egen arkitektur? Hvordan strukturere når AJAX er faretruende enkelt? * Vedlikeholdbarhet i koden. Er du generelt bekymret for Wicket sin læringskurve? * Modeller og sesjonsstørrelse. Vi fulgte råd fra artikler og diverse blogger, og brukte en kombinasjon av Hibernate, Open Session In View og Wicket sin LoadableDetachableModel. Når vi så la på mer og mer funksjonalitet, ble koden veldig komplisert. Vi tok da grep, og forteller hvordan vi trives med en løsning som er stikk i strid med hva som anbefales! * Testing og verktøystøtte. Større (og mindre...) prosjekter trenger testing og verktøy Temaene illustreres ved hjelp av reelle kodeeksempler. Vi setter Wicket i en bredere kontekst, og sammenlikner raskt med andre komponentbaserte rammeverk som GWT og JSF. Vurderer du Wicket til ditt neste prosjekt, eller har du begynt å høste erfaringer? Da er dette foredraget for deg!
Torstein er sjefsarkitekt og medeier i Kantega AS. Torstein har 10 års erfaring med arkitektur og systemutvikling på Java-plattformen. Han er arkitekt i et prosjekt med en størrelse på 20 000 timer, basert på Apache Wicket.
Anders er systemutvikler og medeier i Kantega AS, sivilingeniør i Industriell Matematikk, med spesialisering innen abstrakt algebra. Han jobber i et prosjekt med en størrelse på 20 000 timer, basert på Apache Wicket.

Do you dream of becoming a Java community hero? Or would you like to help organize the JavaZone conference? This lightning talk gives a quick introduction to the javaBin organization and how you can join and contribute.
Har du lyst å være med å arrangere JavaZone? Eller kanskje bli en aktiv javaBin-er? Det norske Java-fagmiljøet består av en haug med kreative entusiaster som gjerne vil ha med akkurat deg i miljøet! Denne lyntalen gir en introduksjon til hvem vi er, hva vi gjør og hvordan du kan bli med.
Oddbjørn har vært aktiv i det norske Java-miljøet i en årrekke, som arrangør av javaBin-møter i Oslo, medlem av programkomiteen for JavaZone og styremedlem i javaBin.

There is a saying that "the road to hell is paved with good intentions". This is especially true when it comes to testdata and reuse. The greatest pain is often caused by testdata in sql-insert-scripts. This lightning talk will be about how we can avoid that pain by looking at the alternatives and being smart about reuse.
Vi har vel alle gjort det, vi trenger testdata kjapt og legger det i sql scripts. Det er ingenting galt i det, men det er en løsning som ofte ikke skalerer med et domene som utvikles over tid. Til slutt befinner du deg et sted du ikke vil være. Denne lyntalen vil presentere smerten med sql-insert-scripts i daglig utvikling, og veien tilbake til et smertefritt testdataoppsett.
Per Otto jobber som selvstendig konsulent i Objectdesign og har over 12 års erfaring som utvikler/arkitekt. Gjennom flere store prosjekter har han fått mange erfaringer rundt hva som fungerer og hva som ikke fungerer når det gjelder utvikling, spesielt når det dreier seg om arkitektur, kode eller utviklingsmiljø.

Why do we use process engines? I´ve been working on a couple of projects utilizing two different process engines (jBPM and Documentum), and I´ve seen the shortcuts and work-arounds being made in order to cope with the limitations. In this speech I will highlight the pros and cons of process engines, based on the experiences made from these projects.
Når trenger vi prosessmotor? Etter å ha jobbet en del med to ulike prosessmotorer (jBPM og Documentum) er jeg fortsatt usikker på dette. Jeg har sett man ta mange snarveier, bygge egne tekniske løsninger rundt prosessmotoren og til slutt ende med å bruke minimalt av det motoren leverer. Hvorfor blir det slik? I lyntalen ønsker jeg å dele erfaringene fra arbeidet og belyse styrker og svakheter til prosessmotorer basert på erfaringene for disse to motorene spesifikt.
Hong Nhung jobber til daglig som manager i BEKK og har 6 års erfaring med Java-utvikling på store og små prosjekter. Hennes hovedinteresser er DDD, god kode, god testing og arkitektur.

Clojure is a beautiful language. However most Java devs fail to see its beauty because of "all those pesky parentheses". They complain about foreign syntax, however Lisp arguably has no syntax. This talk will show you why that is!
Clojure er et fantastisk programmeringsspråk, men det er en Lisp. Det har en helt annen bakgrunn enn alle de mer kjente C inspirerte språkene, som Java. Mange Java utviklere har problemer med syntaksen til Lisp, alle parentesene... Denne lyntalen vil vise deg hvorfor denne syntaksen både er enkel og ekstremt kraftig. Man kan faktisk argumentere for at Lisp ikke har noen syntaks!
Alf Kristian jobber i Know IT Objectnet. Til daglig programmerer han Scala, men har hatt Clojure som hobby i flere år. Hans hovedinteresser er alternative programmeringsspråk, multi-core problemet og lettvektsutvikling.

This lightningtalk will give you advice helping you avoid some of the most frustrating mistakes possible to make when developing for Android
Er du erfaren javautvikler som skal lage din første Android-applikasjon? Da har du mye moro foran deg, men også mange overraskelser og frustrasjoner. Du vil sannsynligvis bruke mye tid på å feilsøke fordi SDK eller runtime i mange tilfeller ikke sier fra om hvor feilen ligger. Du blir i tillegg tvunget til å skrive kode som for erfarne java-utviklere er uvant, og det er lett å få uoversiklig kode dersom du ikke benytter deg av enkle hjelpemidler. I denne lyntalen deler jeg noen av mine erfaringer med utvikling for Android og gir deg 5 tips som vil gjøre din første erfaring med utvikling for Android mer positiv enn min.
Marvin er systemutvikler hos Kantega AS. Han er sivilingeniør i datateknikk med fordypning i intelligente systemer. Hans karriere som utvikler startet i 2007 da han ble med i studentavisa Under Dusken som javautvikler. Hans karriere i Kantega startet i 2009 hvor han jobbet deltid frem til han i 2011 fullførte mastergraden sin og fikk fast ansettelse. Han har jobbet med forvaltning og utvikling av flere store java-applikasjoner, blant annet en Androidapplikasjon for Sparebank 1.

The HTTP specification details how caching of HTTP Responses may be done. In this talk I will outline the possibilities and restrictions the specification mandates. I will also show how Edge-Side includes(ESI) and Cache Channels will benefit caching.
Har du noensinne lurt på hvordan HTTP caching fungerer? I dette foredraget vil jeg fortelle om hvordan spesifikasjonen sier at det skal fungere. Jeg vil gi eksempler og se hvordan de forskjellige cache-reglene oppfører seg. Her vil det også vises noen "Gotchas". Jeg vil også se på utvidelser til HTTP, herunder Cache Channels, og Edge Side Includes (ESI).
Erlend is a senior software consultant working in Arktekk. He mainly works as a software developer and architect. His technical interests revolve around HTTP, REST, and functional programming. He dabbles in multiple languages, some with more than one paradigm, including Scala. The target platform of choice is usually the JVM, but other platforms are also interesting. He has previously been the Chairman of javaBin (Norwegian Java User Group). He is involved with multiple open source projects, including being the lead developer and architect behind the open source HTTP–cache library HTTPCache4j.

Sindre gives you a crash course in Ruby Metaprogramming, showing you techniques that will keep you, the developer, joyful and your code DRY.
Ruby har et imponerende arsenal av metaprogrammeringsteknikker som kan gjøre hverdagen til en programmerer mye enklere og bidra til å holde koden din DRY. Dette er kjapp introduksjon til flere av disse, med eksempler på hvordan disse kan hjelpe til i hverdagen. Lyntaleren viser eksempler fra egne prosjekter for å illustrere hvor enkelt metaprogrammering i Ruby er å benytte seg av og hvilke fordeler det kan bære med seg.
Sindre er en student innenfor programmering som opplevde kjærlighet ved første blikk da han deltok i den aller første forelesningen om Ruby on Rails på høyskolen. Han har tidligere erfaring med velkjente Java og PHP, samt også HTML, CSS og JavaScript for web front-end. Han forelsket seg såpass i Ruby (og Rails) at han endte opp som veileder i det samme faget han selv deltok i, og mang en kveld og natt gikk med på å undersøke dette fantastiske språket og hva som kunne gjøres med det. Hans studentgruppe var den eneste som brukte Ruby on Rails i en skoleoppgave, og gruppen fikk toppkarakter for arbeidet. Han bruker mye av fritiden sin på web-utvikling og har flere prosjekter i luften som han ønsker å få ut i verden, både på egenhånd og sammen med venner.

Kravmaga - combat techniques for survival in the enterprise getto. This presentation is about requirements. We will show a set of techniques to write better requirements and ultimately better software in realistic scenarios.
Hvordan jobbe med krav når du ikke vet hva du vil ha? Vi tar alt for lett på krav, kanskje fordi krav er fryktelig vanskelig, og det er lettvint å bare godta en spesifikasjon fra kunden. For kunden har jo alltid rett, ikke sant? Vårt fokus er på vår rolle som utviklere. Vi er glade i å programmere, og liker å dykke inn i tekniske problemstillinger. I dette foredraget ønsker vi å vise hvordan man så tidlig som mulig kan sette opp en feedback sløyfe mellom reelle tekniske ting og kundens behov. Og vise hvordan vi som programmerere kan bidra effektivt til dette ved tidlig prototyping. Vi har valgt å bruke ruby og cucumber til dette, fordi vi føler det er spesielt gode verktøy til hurtig prototyping. Målet er å basere kommunikasjon med kunde og andre stakeholdere på et veldefinert språk og med tydelige forretningsregler, og tidlig være i stand til å teste ut teknologiske og forretningsmessige antagelser.
Bjørn Nordlund is a developer at Cisco and his main quest as a programmer and system developer has always been to try to make things simpler and more manageable. To achieve this it is important to understand, identify and solve the real problems, which is often concealed behind technical impediments. He has held several talks at earlier javaZone and Smidig conferences.
is a programmer that repeatedly seems to discover that much to his disappointment just sitting down and coding is often not the most important thing that can be done on a software project. He is a recovering C++ programmer that mostly programms ruby these days, even though python is probably the programming language he knows best. Syver is employed at Cisco Systems as a software developer

How to avoid relational database performance problems, and what to look for if you already have them.
Svært mange utviklere har opplevd å få ytelsesproblemer på en databaseserver etter at den er satt i produksjon. Her får du tips om hvordan å angripe problemet. En peptalk om databasedesign, tuning, indekser, monitorering, execution plans og viktigheten av å vite hvordan å bruke databasen som verktøy.
Christian Egeberg er seniorkonsulent hos Knowit, og har jobbet med relasjonsdatabaser, webutvikling og mobilteknolologi i en årrekke. Mest på Microsoft plattform og Oracle.

When a team consist of two persons coordination and cooperation should not need a framework. Still, SCRUM provides tools for planning and watching progress that are useful.
Når et team består av to personer er ikke lenger hele SCRUM-rammeverket nødvendig, ei heller fornuftig. Lyntalen tar for seg noen av de viktigste delene av SCRUM og hvordan disse kan benyttes, til sist kommer en oppsummering av hvordan SCRUM fungerer for et topersonsteam.
Jobber i Mesan AS som seniorkonsulent. Har utviklet i diverse større og mindre språk, men er mest interessert i prosess og utvikling som fag. Er sertifisert SCRUM-master og har jobbet "Scrummish" de siste 4-5 årene i forskjellige organisasjoner og team.

Soccer Oriented Architecture is in everything that involves software development. It's not only methodologically, but also in sense of what platform we choose and how we choose to combine technologies. Soccer Oriented Architecture is not about building a team of superstars, but rather it's about combining team players that work together as a team.
Min erfaring som både Java og .NET utvikler tilsier at forståelse for fotball er grunnleggende for alle systemutviklingsplattformer. Jeg vil ta dere med på en fotballkamp mellom de to overnevnte erkerivalene. Hjemmelaget (i rødt) stiller med stjerner som Spring, Hibernate og Eclipse. Bortelaget vil bestå av talenter som MS Forms og Visual Studio. Jeg skal analysere spillestill(utviklingsmetodikk) og foramasjon (MVC) og peke på sterke og svake sider ved spillerne og dere respektive trenere. Det vil også åpnes opp for spillerkjøp.
Peyman er ansatt som konsulent i Javaavdelingen i Steria hvor han jobber med Autosys prosjektet. Han har mastergrad utdanning i systemutvikling fra UiO. Hans hoveinteresser er systemutvikling, innovasjon og fotball. Peyman spiller for sterialaget i fotball og liker å la ballen gjøre jobben i stedenfor å slite seg ut.

Football referees, hung out to dry by journalists, ridiculed by the public, accused of taking bribes and speculation of a traumatic childhood. They are by no means popular figures, but is it really fair to subject them to an Internet Explorer only web portal? This presentation shows how a new front-end was built for an internet explorer-only website. Through screen scraping and some cool tools, building a new front end can be done in a few nights without getting access to the webapp’s database or a public API.
Utskjelt og uthengt, beskylt for bestikkelser og spekulasjoner om en traumatisk barndom som mobbeoffer. Trakassert av Davy Wathne i beste sendetid. Fotballdommere utsettes for mye, men er det virkelig nødvendig å utsette dem for en webportal utviklet i Microsoft Visual Studio 2003 som kun fungerer i Internet Explorer? Er du litt lei av å skrive den samme koden dag ut og dag inn? Du er produktiv og får jobben gjort med Java og diverse open source rammeverk, men du savner den deilige følelsen av læring. Det å ha det skikkelig gøy mens du lærer nye ting? Du vet, den følelsen du hadde mens du studerte? Pet projects/hobbyprosjekter er mange utvikleres løsning på dette, men det er ikke alltid så lett å finne et problem du kan bruke som utgangspunkt for å lære noe nytt. Mange ganger tenkte jeg at "kanskje jeg skal lage noe som konsumerer et REST-API", men hvor mange twitter/facebook/<sett inn siste hippe socmed her> mashups trenger egentlig verden? Det finnes allerede mange gode der ute, og det er kanskje ikke så rart, for dataene til alle disse sosiale mediene er så lett tilgjengelig. Men hva med alle disse irriterende webappene, du vet, disse som ikke fungerer i annet en internet exploder og som hvertfall ikke har et åpent API? Hva med dem? Dette var utgangspunktet for _mitt_ hobbyprosjekt. Et hobbyprosjekt som har vokst til å ha over hundre unike brukere om dagen, og over 350 unike brukere i uken. Dette er historien om Dommer-FIKS: Presentasjonen vil vise hvordan Scala, Unfiltered, JSoup, Twitter Bootstrap og Heroku ble brukt for å utvikle en ny frontend for Internet Explorer-utyske på tre-fire kvelder. Løsningen ble laget uten å ha spesielt stor kjennskap til noen av teknologiene fra før. Målet med presentasjonen er ikke å gi en deltaljert intro til hverken Scala, Unfiltered eller Bootstrap. Den vil derimot forklare hvordan de valgte teknologiene alle bidro til at en ny frontend kunne skrives på noen få dager av en som knapt nok har hørt om CSS og Javascript. Den vil vise hvordan du kan få morroa tilbake i utviklingen og vil gi en rekke dommeranekdoter underveis..
Morten jobber som konsulent i Arktekk og har 8 års erfaring som Javautvikler. Han har tidligere holdt foredrag på JavaOne og JavaZone. Han er også fotballdommer og dømmer til daglig i 4. divisjon i Oslo Fotballkrets.

This session is an experience report from a grid-architecture proof-of-concept at Skatteetaten (Norwegian Tax Office), aiming for increased maintainability, decreased lifecycle cost and linear scalability. The presentation focuses on the simplicity and testability of the programming model, as well as the challenges to consider for a grid application.
Skatteetaten har kjørt en proof-of-concept (PoC) for å vurdere grid-plattform som en del av det framtidige målbildet. Formålet er primært forbedret endringsevne og vesentlig reduserte forvaltningskostnader; sekundært massiv parallellprosessering. Denne sesjonen tar for seg grid-plattformens sentrale egenskaper og hvilke problemstillinger en grid-applikasjon må håndtere, med eksempler og erfaringer fra PoCen. Spesielt ser vi på hvordan programmeringsmodellen og plattformen tilbyr ekstrem enkelhet og ypperlig testbarhet. Samtidig må man være særlig oppmerksom på områder som aggregat-design, serialisering, versjonering og robusthet. Vi viser også hvordan man kan oppnå lineær skalerbarhet med parallellisert, minnebasert prosessering, inkludert en demo av realistisk skatteberegning fra PoCen.
Trond Arve Wasskog er utvikler og CTO i Bekk Consulting. Han har jobbet med Java og Java EE applikasjonsutvikling i mer enn ti år, med fokus på smidig utvikling, kvalitet og vedlikeholdbarhet.

Visualize your git repository with simple command line tools an javascript graph libraries.
GIT gir deg massevis av historikk for kildekoden din, men har du noen gang brukt all historikken til noe nyttig? I denne lyntalen får du se hvordan du raskt kan hente ut statistikk og nyttige data fra GIT-repositoriene dine. Armert med kommandolinja og et regneark kan vi få informative visualiseringer på nulltid.
Andreas er seniorkonsulent i BEKK og jobber med Java, Ruby, Javascript og Flex. Han trives best i kommandolinja.

In this presentation we will present how we built a JavaScript plugin-plattform based on common technologies in the market such as Dojo, Spring, wro4j and maven. We load both data and new components asynchronously when needed based on the user interaction with the system. This enables us to integrate visual components in the presentation.
KLP Kundeside er en ny total løsning for KLP sine bedriftskunder. Løsningen spenner over alle KLP sine forretningsområder og gir brukeren en løsning å forholde seg til. Løsningens front-end er implementert i JavaScript og baserer seg på kun en sidelasting. Dette gir en veldig rask og god brukeropplevelse. Etter hvert som brukeren navigerer seg rundt i løsningen lastes nødvendig funksjonalitet etter behov i form av plugins. En plugin vil selv være ansvarlig for å laste sine data. Dette betyr at vi i vår front-end løsning har tatt steget videre fra å laste data asynkront til å også laste script asynkront. For å få til dette måtte vi utvikle vår egen plugin-baserte plattform for JavaScript. Løsningen er implementert i JavaScript og Java og baserer seg på vanlig tilgjengelig teknologi i dag. Dette gjør oss i stand til å utvikle og release ny funksjonalitet parallelt i forskjellige team. Plattformen gir mulighet for kontinuerlig deployment uten nedetid. Etter hvert som en ny plugin ferdigstilles kan den gjøres tilgjengelig på plattformen, uten at noe må stoppes. Ved å ha muligheten til å release små deler helt uavhengig av hverandre reduserer vi også risikoen ved utrulling av ny funksjonalitet betraktelig. Vår plattform legger også opp til deling av JavaScript funksjonalitet mellom pluginene via fellesbibliotek. Dette sikrer økt effektivitet og høyere leveransehastighet. Vi vil i denne presentasjonen fortelle om hvordan vi har utnyttet funksjonalitet fra Dojo, Spring, wro4j og maven for å få til dette. I tillegg kommer vi til å kjøre en live demo av løsningen som inkluderer live koding av ny funksjonalitet til løsningen.
Jobber til daglig som Senior web utvikler hos UDP AS. Har de senere år jobbet mye med web, både tradisjonelle websider og RIA løsninger basert på både jQuery og Dojo.
Ivar jobber til daglig som webutvikler hos Itera Consulting. Han elsker å finne enkle og robuste løsninger på nye utfordringer. De siste årene har Ivar jobbet mye med WEB-løsninger, både tradisjonelle, og med RIA-løsninger hvor hele fronten implementeres i JavaScript. Ivar er opptatt av å bygge et sterkt lokalt fagmiljø og har de siste årene aktivt bidratt med å arrange den årlige Smidigkonferansen.

This lightning talk will give you an introduction to SASS - a CSS precompiler. SASS will make your everyday life as a web developer to a much better experience, and after this talk you will know why you should use it.
SASS står for Syntactically Awesome StyleSheets og er en preprosessor som hjelper deg å håndtere css på en bedre måte. Denne lyntalen vil gi deg en basic introduksjon til SASS med hands-on eksempler, og du vil sitte igjen med et inntrykk av hvor mye bedre dette kan gjøre hverdagen din som webutvikler.
Vidar jobber som utvikler og fagleder for webutvikling i Knowit i Oslo. Vidar har jobbet som utvikler siden 2007, men har programmert så lenge han kan huske - alle fall siden ungdomsskolen. Vidar jobber til daglig med store kodebaser, og er opptatt av god kode og er møkka lei dårlige rammeverk/biblioteker.

Most societies have been closed for practical reasons such as the cost of distributing information on paper. The Internet has removed most obstacles, but the government still acts as if they exist. This talk is about how we can change this so you can get the data you need!
Historisk har svært få samfunn hatt noen særlig grad av åpenhet rundt de data som samfunnet skaper, men dette skyldes sjelden vond vilje men snarere praktiske forhold som at informasjon på papir er kostbart å distribuere. Med utbredelsen av Internett er begrensningene forsvunnet, men store deler av offentlig sektor opptrer fortsatt som om informasjonsformidling er dyrt og arbeidskrevende, dette til tross for at åpning av flere data kunne hatt stor verdi for både enkeltpersoner og samfunnet som helhet! Denne lyntalen handler om hvordan vi kan endre på disse holdningene gjennom de muligheter og rettigheter vi som borgere av Norge har til data og informasjon, og om hvilke miljøer og grupper som allerede jobber med dette og kan bistå deg med å få frigjort eller tatt i bruk data som du har behov for!
Svein-Magnus Sørensen is a technology evangelist working with innovative uses of data and technology at the consulting company NSA. In addition he has founded and is organizing a data community called the Oslo Open Data Forum and is an experienced speaker on data and information-related topics from a range of previous tech-conferences. For more information see his website and blog at http://www.menneske.org/ or contact @SveinMagnus on Twitter.

This session is an experience report from a grid-architecture proof-of-concept at Skatteetaten (Norwegian Tax Office), aiming for increased maintainability, decreased lifecycle cost and linear scalability. The presentation focuses on method and tools used to achieve high productivity in the project.
I en "Proof-of-Concept" for Skatteetaten ble en grid-basert plattform for skatteberegning testet ut. Utviklingsteamet fikk fritt velge verktøy og fremgangsmåte, og resultatet ble en høykvalitets løsning levert langt under tid og budsjett. Presentasjonen oppsummerer de viktigste valgene som vi mener er vesentlig for høy produktivitet i software-prosjekter i dag. Info til program-komiteen: Arbeidet med grid-produkter hos Skatteetaten er foreslått presentert i flere forskjellige foredrag for årets JavaZone: Tormod Varhaugvik (Skatteetaten): Virksomhetsarkitektur-perspektiv, problemstilling i Skateetaten, konsepter og hva man ønsker å oppnå. Trond Arve Wasskog (BEKK): Applikasjonsarkitektur-perspektiv, grid-egenskaper, programmeringsmodell, erfaringer og problemstillinger på overordnet nivå. Eivind Waaler (BEKK): Implementasjonsperspektiv, demo og kodeeksempler med bakgrunn i PoC på Skatteetaten. Dette foredraget, som også kan kjøres som full presentasjon, utfyller de andre ved å adressere utviklingsmiljø og organisering.
Jørn Ola er utvikler og prosjektleder i Bekk Consulting. Han har jobbet med software-utvikling med .NET og Java i mer enn 10 år, både som utvikler og prosjektleder, og han er spesielt interessert i utviklingsmetodikk.

A world dominated by password based authentication and data leaks left and right, makes secure password storage mandatory. We’ll look at how to store passwords in such a way that they are tricky to exploit, even if the user database winds up on pastebin.com.
Brukernavn og passord er uten tvil den dominerende formen for autentisering i dagen informasjonssystemer. Mye kan sies om det, men det betyr i alle fall at vi som utviklere må sørge for at passordene lagres på forsvarlig vis. Det er veldig mange måter data kan lekke på, som SQL injection, feilkonfigurasjon, kompromitterte nettverk eller sårbarheter i tredjepartskomponenter, og det er vår jobb å sørge for at brukerdatabasen er vanskelig å utnytte, selv om den forsvinner ut døra. Og den jobben gjør vi stort sett ikke bra nok. Lagring av passord er likevel en veldig takknemlig og enkel oppgave å sette seg inn i, siden det er veldig få måter å gjøre det riktig på. Vi ser på hva man bør gjøre, og hva som ikke fungerer. Vi kikker også på hvordan passordcracking går for seg, slik at vi ikke bare får med oss hva som er de viktige teknikkene, men også hvorfor de er viktige.
Jon Are Rakvåg took his MSc at the Selmer Institute for Secure and Reliable Communication at the University of Bergen. After starting off as a information security consultant, he made the switch to full time developer (and security geek) at Capgemini Norge AS, and is currently working for SpareBank 1. He is a Certified Information System Security Professional (CISSP) and a member of the Norwegian Open Web Application Security Project (OWASP) chapter.

Using Java-based frameworks and Cloud-services to cheat our ways through life is knowledge worth passing on to others.
Verden er urettferdig. Hvorfor må de med lengst ben ta til takke med dårlige seter på et fly? Hvorfor skal de som er best i quiz alltid vinne quiz'en? Hvorfor skal man alltid stille seg bakerst i køen? Hvorfor skal flaks og tilgjengelighet bestemme om du får gå Birken eller se Justin Bieber i Spektrum? Hvorfor er det aldri jeg som skriver "FIRST" i kommentarfelter på nye artikler. Ved å benytte fantasi, nevenyttighet, teknologier, rammeverk og biblioteker så kan verden bli enda mer urettferdig - men, til din fordel. I dette foredraget vil vi presentere egne og andres prosjekter der f.eks Web scraping er blitt benyttet for å manipulere systemer til egen fordel. HTMLUnit, Cloud, XMPP, E-Mail, Fiddler, Android dekompilering, LittleProxy og mange andre løsninger er satt i system for å snike og jukse eller forbedre verden. Vi viser konkrete eksempler på hvordan man kan benytte Java-baserte biblioteker og Cloud-tjenester for å minimere antall ærlige dager i IT-hverdagen. Konkret så viser vi deg hvordan man skaffer Justin Bieber billetter, få tilgang til låste profiler på Sukker.no, hvordan man alltid får nødutgang på fly og hvordan man blir nummer en på Ruzzle.
Jobber hos Nets Norway AS og sitter ved nødutgang hver gang han flyr samt at han er tittelhaver igjennom tre år på deiligst.no (i en rettferdig verden).
Jobber hos Nets Norway AS og er anerkjent som kongen over nettspill.

Code examples are frequently copied and pasted. Example code should therefore be the best quality code you will ever write. This lightning talk will lead you through five steps on your path to writing exemplary code.
Når vi tar i bruk et nytt bibliotek eller rammeverk hopper mange av oss over dokumentasjonen og går rett til eksempelkoden. Dessverre er eksempelkode ofte full av feil og mangler. Det har forekommet at feil i eksempler har ført til alvorlige problemer i produksjon. Enten du skal skrive eksempelkode i en blogg eller lage en eksempelapplikasjon for et utbredt API er det viktig at eksemplene er av topp kvalitet. Med bakgrunn i erfaringer fra å skrive eksempelkode til det sentrale sikkerhetssystemet til en av Norges største finansinstitusjoner vil lyntalen gi deg fem gode råd til hvordan du kan skrive eksemplarisk kode.
Kristian er Senior systemutvikler og medeier i Kantega AS med mastergrad fra NTNU. Han har jobbet som javakonsulent siden 2005 og har erfaring fra en lang rekke prosjekter. Kristian har stor sans for håndverksmessig kvalitet og har nylig anvendt denne sansen i et forretningskritisk sikkerhetssystem der kvalitet er helt avgjørende.

Many web applications has the need to push updates to a page in order to keep it up to date and display new information. In the Lift framework this is done with Comet Actors. This lightning talk will address challenges and possible solutions, using examples from a real life project.
I mange web-applikasjoner ønsker man å “pushe” oppdateringer til en side for å kunne holde den oppdatert og vise ny informasjon. I Lift-rammeverket benytter man "comet actors" for å løse dette. Denne lyntalen tar for seg utfordringer, mulige løsninger og prosjekterfaringer fra bruk av Lifts comet actors.
Torbjørn Vatn er seniorkonsulent og fagleder for “Scala & JVM”-faggruppa i Bekk Consulting. Har vært interessert i Scala og alternative JVM-språk i del år. Fra mars i fjor har han jobbet heltid på et prosjekt som bruker Scala og Lift som teknologi.

Continuous delivery teams are delivering ideas continuously and long before ohers have finished their first iteration. How do they do it? We will present a maturity model containing tools to accomplish this, and share experiences with several of them. Each one adds immediate value, and you shouldn't do them all at once.
Kontinuerlige Leveranser og Devops praktiseres av svært mange skal man tro buzzen. Ved hjelp av nye verktøy og prosesser dytter virksomheter idéer ut til sine kunder før andre er ferdige med sin første iterasjon. Det er kunden som bestemmer når noe skal ut i produksjon, ikke IT. Og dette får de til uten å kompromisse på kvalitet. Hvem kunne ikke tenke seg å ha det sånn? Hvordan får de det til? Vår erfaring er at det er lite hensiktsmessig, og til en viss grad svært farlig, å forsøke å få til dette i ett jafs. En mer fornuftig tilnærmingsmåte er å bygge stein for stein basert på tilstanden man befinner seg i, og gradvis forbedre situasjonen. Vi har laget en modenhetsmodell for kontinuerlige leveranser som inneholder teknikker og verktøy som bringer en nærmere målet, og det fine med å være på denne "reisen" er at hvert steg gir stor verdi i seg selv. I foredraget vil vi presentere noen erfaringer på godt og vondt med å implementere steg i modellen. Vi vil starte med å presentere modenhetsmodellen, for deretter å ta for oss noen av teknikkene vi har hatt erfaringer med. Disse er; effektiv bruk av versjonskontroll, branch by abstraction, feature toggles, deployment pipelines med Jenkins, infrastruktur som kode med Puppet, virtualisering av produksjonslike miljøer for utvikling og test (Virtualbox, Vagrant), one-click deploy (og tilbakerulling), nedetidfri produksjonssetting og håndtering av databasemigrering (og tilbakerulling).
Stein Inge leder BEKK sin faggruppe for Kontinuerlige Leveranser og DevOps og jobber for tiden som tech lead for teamet som utvikler Digipost. Med bakgrunn som både drifter og utvikler er han spesielt interessert i å bygge bro mellom drift og utvikling. Han har tidligere holdt foredrag på blant andre JavaZone, Smidig og Roots.
Sveinung jobber som utvikler hos BEKK. For tiden fokuserer han på Kontinuerlige leveranser og DevOps, og hvordan man gjennom dette kan forbedre kvaliteten på produktet og redusere "waste". Han har tidligere presentert på Smidig og Akademy.

Live pair programming of the norwegian screencast Zombie TDD.
Zombie TDD er en norsk screencast-serie med testdrevet JavaScript på både klient og server. I dag setter Christian og Magnar seg ned med emacsen og parprogrammerer tre nye episoder foran publikum. Det blir utvikling av en ny feature, så du kan henge med selv om du ikke har sett alle episodene. Se hvordan to typer som digger JavaScript angriper problemer og gjør koden testbar.
Christian is a passionate programmer currently working at gitorious.org where he does everything from JavaScript to Ruby to Unix systems tuning. He is the author of Test-Driven JavaScript Development, and he maintains several open source projects, including the recently released test-framework Buster.JS and the popular mocking framework Sinon.JS. After dark you may find him tinkering with his Emacs setup, coding Lisp and slowly being devoured by the world of functional programming.
Jeg heter Magnar og er en glad framsieutvikler. Jeg er deleier i Kodemaker, jobber til daglig hos FINN, og om kvelden utvikler jeg blant annet eventyrspillet Adventur Delux, pomodoro-verktøyet mytomatoes.com og en screencast om at emacs rocker. Jeg har også en blogg med screencasts om testdrevet javascript, zombier og mafia på zombietdd.com.

Eager to use key-value databases? Finding it difficult to use it correctly? This talk will describe the best patterns for organizing your data in a key-value store. The talk will also present good patterns for using more advanced key-value stores as Redis.
Etter hvert som nosql blir mer og mer populært blir behovet for gode patterns stort. Det er en fordel å organisere dataene sine så godt som mulig, slik at det blir enkelt å finne tilbake til dem senere. Dette kan være en utfordiring når man ikke har lite erfaring med key-value stores. Dersom man bruker gode patterns vil det føre til vakker kode, bedre ytelse og mer logisk organisering av dataene. Foredraget vil se på patterns som gjelder alle key-value stores, samt patterns for mer avanserte databaser som Redis.
Ole-Martin Mørk er ansatt som Scientist i Bekk Consulting med eksplisitt fokus på Cloud og noSQL. Han har jobbet som utvikler siden 2000, stort sett i BEKK. Han har vært involvert i en stor mengde prosjekter både for offentlig og privat sektor og vært borte i det meste av sql-databaser. Siden 2008 har han hatt fokus på cloud og nosql og har etterhvert bygd opp god erfaring på bruk av teknologien. Han har holdt en rekke presentasjoner om emnene de siste årene.

Demonstrasjon: Foredragsholderen stiller et spørsmål og publikum svarer, hele publikum. Ved hjelp av en webapp på mobilen kan svarene vises direkte på slidene.
De fleste som hadde fjernsyn på nitti-tallet har hørt om Tande-P og "mentometerknappen". Hva om man kunne ha en "mentometerknapp" i en presentasjon, der publikum gir direkte tilbakemeldinger vha smarttelefonen sin? Ideen er ikke ny, men det er foreløpig ingen som har benyttet den på et så intelligent publikum (så møt opp)! Her får du en demonstrasjon av noen av de fantastiske mulighetene som ligger i dette!
Truls har tidligere jobbet som foreleser for dataingeniører og sett behovet for å få tilbakemelding fra publikum underveis i en presentasjon.

Hvem av oss kan si at vi aldri har drømt om å ha superkrefter? Kommandolinjeninjakrefter! Slik at du kan bevege deg raskt og lydløst over tastaturet, ha et stort arsenal av effektive verktøy og ha muligheten til å gjøre de kjedelige rutineoppgavene om til noe som er gøy?
Blir du satt ut når noen knoter ned noen kryptiske kommandoer i konsollet? Tenker du - DET DER - DET vil jeg også lære? Har du lyst til å lære nye triks eller gjenoppdage lure kommandoer du har glemt? Kanskje du bare har lyst å bli mer effektiv, eller trenger et nytt samtaleemne til neste familiemiddag? Kom til live kommandolinjeninjashow og ta svart belte i kommandolinjetriks! Du kan også bidra og briljere med dine skills! Det blir noen små premier for bidrag fra salen og en overraskelse på slutten.
Rustam Mehmandarov har mange års erfaring som utvikler, teknisk prosjektleder og leveranseansvarlig. Han har interesse for smidig utvikling, webutvikling, arkitektur og geografiske informasjonssystemer. På fritiden er han veldig glad i å trene, når han ikke sitter i en mørk kjeller og koder Python og Java. Ellers er han over gjennomsnittet glad i Linux, selv om han også er på en veldig god fot med Windows.

Lag gode commits, og ta kontroll over commit-historien. Gjennomgang av to kraftige verktøy for å hjelpe deg på veien.
Om du jobber med git til hverdags så er det enkelte operasjoner som gjøres veldig ofte: lage små gode commits, skaffe seg oversikt og manipulere commit-historien. Med kun kommandolinjen kan det være lett å miste oversikten, her finnes det nyttige verktøy som kan være til hjelp. Dette blir en praktisk gjennomgang av gitk og git gui som kan hjelpe deg med å bli tryggere og mer effektiv med disse oppgavene.
Utvikler i Iterate, synes det er viktig at versjonskontroll blir gjort på en god måte og da er ikke veien langt til en stor interesse for git. Ivar har i flere prosjekter hjulpet andre utviklere til en bedre forståelse og bruk av git.

Forvaltning av enterprisesystemer behøver ikke å bety kjipe verktøy og tungrodd prosess . En enkel arbeidsflyt som likner et Open Source-prosjekt, sammen med tett integrasjon mellom verktøyene i utviklingsmiljøet kan gjøre selv noe så kjedelig som obligatorisk code review før merge til en positiv ting.
Forvaltning av enterprisesystemer trenger ikke å bety kjipe verktøy og en tungrodd prosess som gjør alle involverte misfornøyde. I Oslo Kommunes integrasjonsprosjekt sjonglerer vi nesten 100 komponenter på en integrasjonsbuss, men organiserer arbeidet som om det skulle vært et vilkårlig github Open Source-prosjekt. Tett integrasjon mellom verktøyene i utviklingsmiljøet sentrert rundt Jira, Github og Jenkins har gjort selv noe så banalt som obligatorisk codereview før merge til en postitiv del av hverdagen som utvikler.
Øyvind jobber som utvikler hos Knowit i Oslo. I ca. to år har han jobbet på et stort offentlig enterprise Javaprosjekt hvor han mellom vanlige utviklingsoppgaver har brukt tid på å strømlinjeforme utviklingsmiljøet.

Null har ingen semantisk verdi, er ikke typesikkert, og årsaken til verdens vanligste Exception. Lær hvordan man kan erstatte Null med Option og sov bedre om natten.
Null er en mare og en pest og en plage i java. Null har ingen semantisk informasjon i seg selv, og er årsaken til verdens mest utbredte Exception. Dogmatisk og aggresiv fjerning av null i kildekoden skaper mer robuste applikasjoner som er lettere å vedlikeholde. Lyntalen viser korte eksempler på hvordan man kan gjøre dette i Java ved hjelp av functionalajava sin fj.data.Option.
Atle Prange er senior systemutvikler i Kantega. Han har 10 år som profesjonell java-utivkler bak seg, og har de siste årene krydret hverdagen sin med Scala og CoffeeScript.

Lyntalen gir ein introduksjon til søkeløsninga Elasticsearch og viser korleis du enkelt kan implementere det i ditt prosjekt.
Skal du innføre søk i løsninga di er det ofte to open source prosjekt som peiker seg ut. Dette er ein intro til det nyaste, og etter mi meining det beste alternativet, Elasticsearch.
Eg har jobba i Knowit i 12 år, og har i denne perioden jobbet med vidt forskjellige prosjekter og kunder. Veldig mykje store statlige og halvstatlige bedrifter som NSB, Statens Vegvesen og DSB. De siste tre årene har eg jobba med den aktuelle kunden, og har hatt daglig forvaltning av systemet, og har vore sentral i analysefasen av prosjektet.

Er du redd for Scalaz? Har du hørt skrekkhistorier og fått velmenende råd om å holde deg unna? La meg stilne frykten og vise hvordan jeg som nybegynner tok tak i Scalaz, hvordan jeg utforsket funksjonell programmering og hva det gir meg i dag!
Få biblioteker er så myteomspunne som Scalaz. Det florerer med skrekkhistorier om uforståelige metodenavn med fylte og åpne stjerner, abstraksjoner som kun fungerer i en streng matematisk verden og strukturer du ikke finner igjen i kildekode. Sitater av typen "hold deg unna hvis du vil beholde fornuften". Jeg må innrømme det - jeg var livredd første gang jeg så på Scalaz. Samtidig hadde jeg hørt at "validering med Scalaz er fantastisk" og "bare man kommer over kneika" - og kjente nysgjerrigheten pirret. Dette måtte bare sjekkes ut! Spør meg i dag om det var verdt det! Gjett… La meg stilne frykten og vise hvordan jeg som nybegynner tok tak i Scalaz, hvordan jeg utforsket funksjonell programmering og hva det gir meg i dag!
Trond Marius jobber som utvikler, teamleder, teknolog og sjefskonsulent i Mesan. Han har lang erfaring med Javabasert systemutvikling. De siste årene har han fulgt Scala tett og har brukt språket i flere prosjekter. Trond Marius leter konstant etter effektive løsninger og ny teknologi som gjør hverdagen som utvikler enklere.

En utviklers sukk over udokumentert oppførsel og manglende standardisering på Android-plattformen, og hvilke problemer dette medfører.
Android-plattformen møter stadig nye utfordringer når det gjelder det å få applikasjoner og nettsider til å se og oppføre seg riktig på ulike devices og skjermstørrelser. Jeg ønsker å ta publikum på en kort tur gjennom egne erfaringer på området, vise hvor ille det kan bli, og fortelle litt om hva man kan gjøre for å få en litt lettere hverdag. Vendor-spesifikke tilpasninger og stygge hacks må ofte til for å få applikasjonen til å gjøre det man ønsker og framstå på ønsket måte for alle enheter. Disse problemene kan minne om nettleserproblematikken for ti-femten år siden, der varierende grad av støtte og ulike tolkninger av standarder gjorde livet vanskelig for web-utvikling.
Etter tre år som konsulent der arbeidet handlet om alt fra tunge, databasesentrerte serverside-applikasjoner til javascript frontend, har Ola det siste året slått seg ned i NRK. Der har han jobbet med mobiltilpasning av websider og apputvikling for iOS og Android. Som litt over gjennomsnittlig interessert i både gadgets og media har han funnet seg godt til rette og hadde hatt en perfekt hverdag dersom det ikke var for disse hersens brukerene og de idiotiske dingsene de insisterer på å bruke.

Vi har en Krevende Kaos-Kråke (KKK) på server-rommet. Den ble født der og vi er dens foreldre. Skal man levere sikre og stabile systemer så må man håndtere solskinnsdager like bra som Kråke-dager.
Vi har en Krevende Kaos-Kråke (KKK) på server-rommet. Den ble født der og vi er dens foreldre. Skal man levere sikre og stabile systemer så må man håndtere solskinnsdager like bra som Kråke-dager. Vi kjører systemene våre i miljøer der Kråka skrur klokken tilbake, fyller opp disker, minne og databasen. Den bytter encoding, gjerne midt i en fil, og gjerne flere encodinger flere ganger i samme fil. Kråka roter også til kundeutvekslingene - når den flyr så mottar vi duplikater, triplikater og kråkeskit. Vi har stor tro på fri kråkeoppdragelse - vi ønsker ikke å oppdra Kråka, men heller tilpasse verden slik at vi kan leve med en kråke i server-rommet.
Jobber hos Nets Norway AS som arkitekt og ornitolog og er ansvarlig for å levere sikre og stabile systemer med høy endringsgrad. Skyter fugl på fritiden.
Jobber hos Nets Norway AS som utvikler og taxidermist og jobber daglig med å introdusere feil i systemet for å holde Kråka aktiv. Har planer om å ta jegerprøven.

Hva er mulighetene når trafikken og datamengden i Solr blir for mye å håndtere? SolrCloud lar deg distribuere søket så du får utnyttet hele clusteret ditt.
Søk har blitt et forventet interface til mange typer applikasjoner. Hva skjer når trafikken og datamengden blir vanskelig å håndtere? SolrCloud er samlebegrepet for de distribuerte mulighetene som ble introdusert i Solr 4. Vi ser på konseptene som utgjør SolrCloud og hvordan oppsettet gjøres i praksis. Vi går også gjennom resultatene av ytelsestester for å se hva man kan forvente.
Alexander har nylig begynt som utvikler i FINN. Før det har han jobbet som konsulent med internsystemer innen forsikring. Han har en mastergrad ved Monash University i Melbourne hvor han spesialiserte seg innen distribuerte systemer og var involvert i forskning innen trådløse sensornettverk.

Gjør en applikasjon dynamisk ved å integrere scriptspråket lua!
Lua er et elegant og kompakt scriptspråk som har blitt brukt til å skreddersy spill som Sim City og World of Warcraft. Hvorfor ikke gjøre det samme med Java-applikasjonen din? Å gi vertsskap til et scriptspråk gir uante muligheter til å lage fleksible og tilpasningsdyktige løsninger. I denne presentasjonen får du se hvor lett det er å komme igang med Lua-scripting av Java-applikasjoner. Gjennom praktiske og visuelle kodeeksempler får du se hvordan Lua kan gi dynamisk liv til et statisk Java-GUI ved å tilordne forretningsregler til grafiske komponenter. Reglene lar seg enkelt laste på nytt mens applikasjonen kjører; det er ingen grunn til å rekompilere og redeployere. Nye lag av funksjonalitet kan enkelt legges på etterhvert, for en stadig rikere applikasjon. Med Lua i verktøykassen blir GUI-programmering i Java morsomt igjen!
Har 9 års erfaring fra spillbransjen og har utviklet titler som Conan og The secret World. Begynte som konsulent i Computas i 2013 og ser klare paralleller mellom de to bransjene. Er opptatt av innovasjon, nye teknologier og liker å gjøre programmering kult. Kommer fra en bransje der brukerne har ekstreme krav til fleksibilitet, noe som farger hans syn på hvordan ting skal gjøres.

Via eksempel kode ser jeg på hvordan en webapplikasjon kan få redusert forsinkelse ved sidelasting med HTTP/2.0, SPDY Push og Jetty.
Uansett om du bygger webapplikasjonen din for 10 eller 10 millioner brukere, så er utfordringene med forsinkelse ved sidelasting den samme. HTTP/2.0 (tidligere kjent som SPDY) er laget for å gjøre lasting av sider raskere. Dette oppnås ved å bygge mer intelligens inn i måten man leverer ressurser på. Via eksempler vil jeg se på hvordan Jetty implementerer HTTP/2.0 på server- og klientside. Dette inkluderer: * Hvordan utføre enkel HTTP/2.0 kommunikasjon * Multipleksing av ressurser * Intelligent push av ressurser før de blir etterspurt. Lyntalen vil være nyttig for alle som er nysgjerrige på HTTP/2.0 , og ønsker å se hvordan det fungerer i praksis.
Espen Fossen jobber som sikkerhetssjef og utvikler i Kantega. Har de siste årene jobbet med sikkerhet og utvikling for flere større virksomheter i Norge. Ved siden av sikkerhet er Espen er opptatt av å prøve ut ny teknologi, og spesielt den som kan by på bedre og sikrere løsninger. Espen sitter for tiden som leder for programkomiteen for Sikkerhet og Sårbarhet, en sikkerhetskonferanse som arrangeres årlig i regi av Dataforeningen.

Man hører stadig om nye teknikker for å utnytte moderne flerkjerne-prosessorer og problemer knyttet til parallell programmering. Denne presentasjonen viser hvordan vi har løst en del slike problemer ved hjelp av grid-teknologi og viser hvordan noe av dette kunne vært løst på en bedre måte med å bruke Akka og actors.
Det siste året har vi jobbet med å bygge systemer basert på en egenutviklet prosessmotor som kjører på grid-produktet Hazelcast. Tanken er å kunne definere oversiktlige prosesser for mottak og prosessering av data på en distribuert data-grid. Parallellitet og asynkrone operasjoner løses med en kombinasjon av distribuerte jobb-kjøringer og distribuering av data på flere noder. Etterhvert som vi har implementert fler prosesser har vi støtt på et økende behov for mer fleksibilitet med tanke på å definere asynkrone prosesseringssteg og bedre utnyttelse av ressurser. Vi ønsker å bygge fleksible systemer som enkelt kan tilpasses ulike behov og som kan skaleres dynamisk for å maksimere ytelsen. Dette er grunnen til at vi har begynt å se på Akka som alternativ/supplement til Hazelcast der målet er å få bedre utnyttelse av ressurser kombinert med fleksibel feilhåndtering og skalering. Gjennom en rekke konkrete eksempel viser vi hvordan Akka kan gi stor verdi på Java-prosjekter som har behov for parallellitet på serversiden :)
Eivind jobber som fagsjef for Java i BEKK og har mange års erfaring som arkitekt og utvikler for Java-baserte løsninger. De siste årene har han jobbet hovedsaklig med systemer for mottak og prosessering av store datamengder. Eivind er lidenskapelig opptatt av programmering og hvordan man kan løse tekniske utfordringer på best mulig måte. Han har holdt presentasjoner på mange tidligere JavaZone-konferanser.

Skeptisk mot e-valg? Da bør du i hvert fall vite hvilke sikkerhetstiltak som faktisk er på plass under årets e-valg, slik at du ikke bruker feil argument under neste diskusjon!
Hvordan kan du stole på at e-stemmene for Stortingsvalget blir talt opp riktig? Sammenlignet med andre land har nordmenn alltid hatt stor tillit til myndighetenes håndtering av valg, men ekstern verikasjon skader aldri. Hvordan vet du at e-stemmene ble håndtert riktig? Er det f.eks. mulig å sjekke om en melding ble dekryptert riktig, selv om du ikke har tilgang til den hemmelige nøkkelen? Ja, det er mulig! Er det mulig å sjekke om innholdet i to krypterte meldinger er det samme, selv om du ikke kan lese innholdet og de krypterte meldingene ikke er like? Ja, det er mulig! Og er det mulig å sjekke om to lister med krypterte meldinger inneholder det samme, uten å vite noe om innholdet eller hvilken krypterte melding som korresponderer til hvilken andre krypterte melding? Ja, også det er mulig! Alt dette høres kanskje ut som svart magi, men dette er faktisk byggeklossene brukt til å verifisere e-stemmene i årets Stortingsvalg. Men det er mer som skal til enn kryptografisk magi for å gjennomføre en slik verifikasjon. Verifikasjonen skal f.eks. kjøres live fra en vanlig laptop under valgnatten, så parallellisering og gode loggmeldinger er viktige for at det skal være mulig. Vi vil også belyse litt av arkitekturen til e-valgsystemet, og noen av de andre tiltak som ble utført for å sikre opptellingen.
Filip van Laenen er sjefsteknolog hos Computas. Han har mer enn femten år erfaring i IT-industrien, og har jobbet som både utvikler, teknisk prosjektleder og fagleder for sikkerhet og software engineering. Han er spesielt interessert i sikkerhet, kryptografi og kodekvalitet. I 2011 implementerte han komponentene for å verifisere e-valg, og vil sannsynligvis gjøre det samme igjen til Stortingsvalget i år.

Har du opplevd å sende modulen din til testing, og alt du får tilbake er teite meldinger om fontstørrelse, ordlyd, formulering og plassering på skjermen? I så fall er det på tide å begynne å programmere det som ikke har noen front-end! Bakgrunnsjobber, middleware, batch, mulighetene er endeløse og gledene er mange!
Hadde det ikke vært mer interessant å sette fokus på den delen av koden hvor hjernecellene faktisk får bryne seg på annet en formattering av tekstfelter og knapper? Denne lyntalen er en hyllest til kodeskrivingens mange gleder og til fryden over å kunne konstruere logikk rett fra hodet uten ytre distraksjoner. Man vil få en kjapp introduksjon til enkle metoder som kan hjelpe programmereren med å holde arbeidsdagen produktiv og gøy, samt en uhøytidelig "rant" over mengden langtekkelige og, i den store sammenhengen, uvesentlige småproblemer knyttet til å lage en front-end.
Vidar jobber som sjefskonsulent hos Mesan AS. Han er en teknisk arkitekt og programmerer med 16 års erfaring i bransjen, og var før det en ivrig hobbyprogrammerer allerede fra en alder av 10 år. Ren og effektiv kode samt tilsvarende arkitektur har hele tiden vært en pasjon, selv om erfaringene tilsier at omverdenen ofte vektlegger helt andre aspekter når det kommer til stykket. Han har jobbet med både front-end og back-end i sitt virke, men har fått sin favoritt i området hvor logikken får bli på sitt mest ubesudlede.

Testdrevet javascript med RequireJS og Jasmine med automatisk mocking av avhengigheter og stubbing i Mockito-stil.
Tester i javascript kan være vanskelig nok å sette opp og vedlikeholde. Et modulsystem som RequireJS gjør det betydelig enklere, men det kommer også med sine utfordringer. Denne lyntalen vil demonstrere hvordan man kan utnytte mulighetene i RequireJS ilag med et testverktøy som Jasmine til å skrive lettfattelige og vedlikeholdbare tester hvor man har fokus på hva koden skal gjøre uten innblanding fra omverdenen. Dette involverer isolering av modulen som testes med automatisk mocking av avhengigheter og stubbing i Mockito-stil.
Gunnar er Java-konsulent hos jPro AS og har mange års erfaring med utvikling av brukergrensesnitt. Han er opptatt av å bruke testing som dokumentasjon og hjelpemiddel for å forstå problemdomenet som en helhet, og er pådriver for BDD og TDD for å skape solide og vedlikeholdbare komponenter. Foruten koding på dagtid, og hobbykoding og familieliv på kveldstid, bruker Gunnar sin resterende tid på å drikke øl og se motorsport.

Patching representations in HTTP APIs can be hard, but no longer, JSON Patch is here.
Har du noen gang ønsket å kunne delvis oppdatere ressurser i et API? Da kan man bruke feks HTTP Patch metoden, som var lansert i RFC-5789 Problemet som skal løses er å oppdatere deler av en JSON representasjon. Dette kan gjøres via JSON-PATCH, nettopp lansert i RFC-6902. Jeg kommer til å bruke et Scala api som jeg har laget for dette.
Consultant at Arktekk. Despot of HTTPCache4j, frequent speaker of HTTP-like subjects. REST-advocate. Dabbles with serveral languages, like Scala, Clojure and Haskell. Clearly a "dys"functional programmer ;)

En introduksjon til Java Native Access (JNA), stormannsgalskap og hvordan man implementerer taskbar og desktop i Java.
Det var en vakker vinterkveld med upåklagelig skiføre, men jeg var syk og måtte derfor være inne og trøsteprogrammere. Jeg startet prosjektet "jna-example" med ingen annen ambisjon enn å bruke JNA (Java Native Access) til å kalle én stusselig nativefunksjon. Lite ante jeg at prosjektet i løpet av noen få timer skulle utarte til en fullt fungerende taskbar ... men jeg klarte ikke å stanse: Enkelheten, hastigheten og maktfølelsen var berusende. Snart var virtuelle desktoper i Windows en realitet og ikke lenge etter ble startmeny, batteriovervåking og andre widgets definert gjennom en pluginbasert arkitektur. Nå har jeg forstått at jeg trenger hjelp: Jeg trenger en sal med negative tilhørere! Noen må fortelle meg at det er galskap å implementere dette i Java... Vi ser på: - Alt du trenger for å starte ditt eget prosjekt med JNA. - Hvordan nativekall fra ren javakode er mulig. - Representasjon av structer, pekere og annet. - Morsomme anekdoter om Win32 og X. - Arkitekturerfaringer fra prosjektet. - Demo av hvor langt galskapen har brakt meg.
Stian Grenborgen har akkurat startet i Steria, men har en bakgrunn som programmerer og systemarkitekt i Nets.

Har du opplevd at feilsøking er vanskelig, fordi loggen du leser er umulig å forstå? Eller at viktig informasjon rett og slett mangler? Eller bryr du deg ikke om loggene i det hele tatt? Da er du ikke alene, og jeg vil gjerne dele 5 enkle tips som kan spare deg timesvis av hodepine!
Har du opplevd at feilsøking er vanskelig, fordi loggen du leser er umulig å forstå? Eller at viktig informasjon rett og slett mangler? Har du irritert deg over debug-linjer som bare gir mening til utvikleren som skrev dem, og nå fremstår kryptiske? Eller bryr du deg ikke om loggene i det hele tatt, fordi de inneholder altfor mye informasjon? Da er du ikke alene, og jeg vil gjerne dele 5 enkle tips som kan spare deg timesvis av hodepine! Logging er applikasjonens interne grensesnitt!
Anders er systemutvikler og medeier i Kantega AS, sivilingeniør i Industriell Matematikk, med spesialisering innen abstrakt algebra. Han brenner for enkle løsninger.

This speach examplifies ways of using default methods in Java. Contains examples on how to use and not to use default methods in Java.
Irriterer du deg over interfacer som krever implementasjon av en drøss metoder du ikke har noe forhold til ? Sløser du tid på å implementere kode som godt kunne vært skrevet en gang for alle ? Ønsker du å legge til metoder i API-et, men tør ikke fordi det knekker andres kode ? Java 8 introduserer default methods. Dette tillater implementasjonskode ikke bare i klasser, men også i interfacer. Samtidig beholdes bakoverkompatibilitet. Denne lyntalen viser eksempler på bruk av default-metoder. Eksemplene viser hvordan default-metoder - gir mulighet for miksin-klasser - kan kombineres med generiske typer - ikke bestandig er like lette å forstå - kan ødelegge bakoverkompatibilet Lyntalen viser at default-metoder er noe man tjener på å ha i sin verktøykasse, at de kan gi fleksible design men at de ikke passer for alt.
Svein Otto er senior systemutvikler hos Kantega AS. Han har hatt systemutvikling som levebrød i over 30 år. Han har de siste 12 år programmert Java, med innslag av JavaScript, AspectJ, JavaCC, Groovy og Scala. Tidligere år i C/C++, Mary, Pascal, Simula, Lisp, Prolog. Svein Otto har spesiell interesse for programmeringsspråk.

Noen enkle funksjoner gjør bash shellet ditt til en fryd å jobbe i. Det er mange å ta av, men her er noen av mine favoritter som benyttes daglig.
Fire enkle tips for å gjøre bash shellet ditt bedre å jobbe i: * Up up up * Jeg vet hvor du bor Git * Historikk slik den burde være * Tab-completion med kontekst
Jobbet som utvikler og system-arkitekt i Telenor i 8 år før jeg gikk inn i CMS-verdenen hos Enonic for 4 år siden. Det første jeg tar backup av er .bashrc-fila min.

Gjør code-review til en lek med pull-requests.
Lei av å måtte lete rundt i commit-loggen for å finne de relevante commitene til en endring? Lei av å ikke se det store bildet i havet av endringer? Samle nye features i pull-requests og få oversikt med en gang slik at du kan gjøre code-review kjappere og bedre enn før.
Master i Datateknikk fra NTNU og jobber som utvikler hos BEKK i Trondheim. Arbeider primært med webteknologi, med et dykk i stacken nå og da. Interessert i alt som kan gjøre utviklerhverdagen enklere og mer effektiv.

After a successful proof-of-concept in 2012, we present the pitfalls from implementing grid computing at the most important project in Tax Norway.
Etter en vellykket proof of concept i 2012 har Skatteetaten innført grid computing det viktige prosjektet for Modernisering Av Grunnlagsdata (MAG). Denne sesjonen presenterer erfaringene fra implementasjonen, med fokus på fallgruvene vi møtte underveis. Dette inkluderer kostnaden av redundans og flytting av data, kjøring av distribuerte jobber, kompakt representasjon av objekter, produksjons- og driftsarkitektur samt testing av tekniske krav og robusthet. Vi tar til slutt en en titt på alternative plattformer og teknologier til grid-teknologi.
Trond Arve Wasskog er utvikler, arkitekt og CTO i Bekk Consulting. Han har jobbet med utvikling på Java-plattformen i hele sin karrière, og satt sentralt både i PoC-en og i MAG-prosjektet.

I denne lyntalen ser vi på hvordan 2-faktor autentisering faktisk virker, hvor sikkert det er og hvordan man kan angripe metoden. I tillegg ser vi på hvilke begrensninger 2-faktor autorisering har, samt hvor kost-effektivt det er.
2-faktor autentisering blir mer og mer vanlig i dagens samfunn. Det brukes til alt fra innlogging i nettbank til mobile applikasjoner og spill. 2-faktor autentisering krever at en bruker benytter seg av to av tre faktorer for å identifisere seg selv; Noe brukeren vet Noe brukeren har Noe brukeren er De fleste har hørt om 2-faktor autentisering, men hva er det egentlig som foregår? Hvor sikre kan vi være på en angriper ikke klarer modifisere informasjon vi sender og kan vi stole på at informasjon vi mottar er fra den som påstår å ha sendt det? I denne lyntalen ser vi på hvordan 2-faktor autentisering faktisk virker, hvor sikkert det er og hvordan man kan angripe metoden. I tillegg ser vi på hvilke begrensninger 2-faktor autorisering har, samt hvor kostnads-effektivt det er. Hva skal til for å hacke deg inn i nettbanken? Hvordan kan du få tak i selvangivelsen til sjefen? Hvor lett er det å hacke Steam kontoen til kompisen? Kom og finn det ut!
Ragne Elisabeth Henriksen har en sivilingeniørgrad i Industriell Matematikk fra NTNU. Hun skrev masteroppgave om anonymitet i mobil kommunikasjon og er spesielt interessert i sikkerhet. Etter endt studie begynte hun å jobbe som IT-konsulent for Visma Consulting. Der har hun jobbet siden sommeren 2012. Hun jobber for tiden med forvaltning av nettsidene til Norad og Norsk Filminstitutt gjennom Enonic CMS. Hun er en frontendutvikler som hovedsakelig jobber med design, arkitektur og programmering i javascript, XSLT, HTML5 og CSS3.

Bruker applikasjonen din log4j? Vurderer du å bytte til logback, men er usikker på de faktiske gevinstene? Frykter du at det tar mye tid å skrive om applikasjonen? I denne lyntalen viser jeg hvorfor og ikke minst hvordan du skriver om applikasjonen din til å bruke logback.
Bruker applikasjonen din log4j? Vurderer du å bytte til logback, men er usikker på de faktiske gevinstene? Frykter du at det tar mye tid å skrive om applikasjonen? I denne lyntalen vil jeg gå gjennom de viktigste fordelene med logback sammenlignet med log4j. I tillegg vil jeg vise hvordan man går frem for å skrive om en applikasjon som bruker log4j til å bruke logback, og hvilke utfordringer man kan støte på og hvordan disse kan løses.
Henrik har en mastergrad i Informatikk fra Universetet i Oslo, og har jobbet ett år som konsulent i BEKK Consulting hvor han jobber som Java-utvikler. Som medlem av faggruppen Programmeringsspråk har han også en interesse for alternative språk og programmeringsparadigmer.

Søkemotorer kan løse langt fler utfordringer enn en søkeboks gir. Du har kanskje et søkeproblem uten å være klar over det?
Elasticsearch, en open source søkemotor bygd på Lucene, får stadig mer oppmerksomhet - ikke bare fordi den er glimrende til å løse typiske søkeproblemer, men også fordi den kan brukes til analyse- og "big data"-utfordringer. Foredraget gir en oversikt over hva søkemotorer er gode på, relaterte problemer du kommer over, hvordan Elasticsearch kan bidra – samt hvordan den passer inn i teknologistacken din. Det er ingen tutorial, men med et relativt høyt tempo og eksempler med realistisk kompleksitet gis en oversikt over hva som er mulig. Vi runder av med hvordan Elasticsearch kan klassifiseres i mylderet av "NoSQL"-databaser.
Alex er sivilingeniør i datateknikk fra NTNU, med fordypning i databaser og søkemotorer, bl.a. med masteroppgave for FAST. Som med-gründer og utvikler i Found, en norsk leverandør av søk som en tjeneste, har han jobbet med søkeløsninger de siste syv årene – og Elasticsearch de siste to. Når han ikke hopper ut fra fly for å ta på skyer, drifter han og Found AS hundrevis av Elasticsearch-clustre i skyen - bl.a. for New York Public Library, TED og LiveNation.

Noen ganger trengt en backend til mobil-idèen din? Helios kan hjelpe deg! Helios er enkel og rask mobilbackend som dekker de fleste behov!
Mange app-prosjekter strander fordi man trenger en form for sentral server for å knytte sammen klientene sine. Ideen din trenger kanskje sentral lagring i skyen, push-meldinger, konfigurasjon eller brukerhåndtering? La meg introdusere Helios! Fra mannen bak rammeverket AFNetworking og IOS-bloggen NSHipster, Matt Thompson, kommer Helios. Kort fortalt er helios en app-backend basert på ruby, sinatra og postgres som er skreddersydd for å deploye til heroku. Helios spiser din CoreData-modell og gir deg et rest-api for lagring i skyen, den gir deg også push-services og brukerhåndtering. Det beste med Helios er ledsagerbibliotekene til iOS, dette er biblioteker som (relativt) sømløst lar deg koble appen din til den heroku-hostede backenden.
Java backendutvikler som til vanlig jobber med enterprise java serverløsninger. Har mobilutvikling som en guilty pleasure, og har jobbet mer og mer med det de siste årene.

Lær hvordan Angular.js kan brukes til å lage nestegenerasjons applikasjoner i nettleseren.
Hvordan AngularJS enkelt lar deg lage en moderne webapplikasjon, selv med kjente og trauste Spring og Hibernate på serversiden. Dersom du lager webapplikasjoner og brukeropplevelse er noe du bryr deg om, så burde Angular være av interesse for deg. Angular oppgraderer nettleseren og lar den gjøre ting du knapt trodde den var i stand til. For et drøyt år siden satte vi oss som mål å lage landets første brukervennlige regnskapssystem. På fritiden. Spring og Hibernate kjente vi godt nok til å vite at de ikke ville stå i veien. På klientsiden stod det verre til, det eneste vi egentlig var sikre på var hva vi ikke ville bruke (ExtJs, GWT...). Vi trengte noe med superkrefter. Vi trengte AngularJS.
Trygve Laugstøl jobber som utvikler og fagsjef i Nets.
Joakim Blomskøld jobber som eneste utvikler i Profsys. Han har mer enn 10 års erfaring med Java og webutvikling.

Hvordan gjøre hobbyprosjekter som ender opp i ingenting om til prosjekter som gjør at du utvikler deg selv som programmerer og får mer selvtillit i den daglige utviklingsjobben.
Har du noengang programmert natt og dag på et hobbyprosjekt, for så å plutselig arkivere det for evig tid uferdig i nærmeste versjonskontrollsystem? Har du 50 uferdige prosjekter på GitHub og føler at du ikke får nok igjen for all tiden du bruker på det? Jeg vil i denne talken presentere tips for å få mest mulig ut av hobbyprosjekt; både for egen mestringsfølelse, og karrieremessig.
Juniorkonsulent hos Nav for Visma Consulting. Har holdt på med utallige hobbyprosjekter i utallige forskjellige webrammeverk som aldri har kommet noe lenger enn utviklingsserveren. I det siste tenkt mange tanker om hvordan løfte hobbyprogrammeringen til nye høyder så jeg kan dra nytte av det i arbeidsdagen.

Groovy er et uttrykkskraftig programmeringsspråk med mange bruksområder. Presentasjonen viser hvordan man kan bruke Groovy for å skrive bedre og mer lesbare enhetstester i Java.
Hvordan skrive bedre og mer lesbare enhetstester? Groovy er svaret. Groovy er et enkelt og uttrykkskraftig programmeringsspråk for javaplattformen. Med sin enkle og smidige syntaks, rike bibliotek og ikke minst, muligheten for å integrere med vanlig javakode, fremstår Groovy som et kraftfullt språk med mange bruksområder. Et av disse er enhetstesting. Ved å kombinere Groovy og JUnit så har man praktisk talt alt man trenger for å skrive en fullverdig enhetstest. Groovy har nemlig innebygd støtte for både mocking og stubbing og i tillegg så har man tilgang på enkle API som gjør det superenkelt å verifisere resultater. Presentasjonen gir en introduksjon til hvordan man kan bruke Groovy for å teste javakode.
Rune Høivik er utdannet sivilingeniør fra NTNU, og jobber som utvikler i Visma Consulting. Han har over 8 års erfaring med utvikling på javaplattformen og har deltatt på store prosjekter innefor både offentlig og privat sektor. Rune er genuint opptatt av kodekvalitet.

Ruby on Rails er nok ikke det første folk tenker på når man har ett enterprise økosystem bygd opp rundt Java. Denne lyntalen vil beskrive hvordan det er mulig å faktisk kjøre Ruby on Rails applikasjoner selv om man er bundet til Java tung enterprise arkitektur.
Ruby on Rails er nok ikke det åpenbare teknologivalget når man sitter dypt i enterprise Java verden, men i vinter implementerte Oslo Kommune 2 nye fagsystemer i (J)Ruby on Rails. Applikasjonene måtte oppfylle krav om å kunne releases, deployes, og kjøres på Java miljøet som allerede fantes på Oslo Kommunes platform. I lyntalen vil jeg gå igjennom hvilke teknologier vi brukte, hvilke problemer vi støtte på, og hvordan vi integrerte Ruby on Rails for å sømløst kunne bygge og deploye applikasjonene på platformen, som om de var en helt vanlig Java applikasjon.
Jon er en utvikler med over 6 års erfaring, nå ansatt hos Knowit Objectnet. Er opptatt av å finne gode helhetlige løsninger, og har gjort dette på både store og små prosjekter. Trives like godt med front- og backend, og for tiden jobber han på Oslo Kommunes integrasjonsplattform med &quot;litt av alt&quot;.

Tetris er et klassiskt spill hvor mye av utfordringen ligger i å holde kompleksiteten nede. For å lykkes med det, kan det være lurt å tenke litt fremover, og ikke bare neste brikke. Noen ganger kan det også være lurt å ta en pause, for å ta tilbake kontrollen. Mye av dette kan også relateres til softwareutvikling.
En gjenganger i mange prosjekter er kompleksitet. Den vokser gjerne naturlig etterhvert som prosjektet går fremover. Men ofte opplever jeg også at mye av kompleksiteten kunne vært unngått dersom vi hadde gjort en bedre designjobb. Nå som alle skal være smidige, er det mange som har sluttet med design. Vi starter bare å kode, og forsøker å endre oss når vi får tilbakemeldinger. Men det er ikke alle endringer som er like lette å gjøre i etterkant.
Terje jobber i dag for WebStep, og har mer enn 10 års erfaring. Han har et sterkt engasjement for utvikling og applikasjonsarkitektur, og er opptatt av kunnskapsdeling og å skape verdi. Tidligere har Terje holdt lyntaler om "Kjenn ditt domene - bruk av verdiobjekter" (JavaZone 2011), "Ikke gå i luksusfellen" (Smidig 2011) og "Vertikal vs. horisontal inndeling av kode" (JavaZone 2012).

Se for deg en ideell verden hvor utviklingsmiljøene dine for store, tunge enterprise-prosjekter settes opp out-of-the-box, og kan reverteres til en ryddig og feilfri tilstand hvis noe skjærer seg. Drøm eller virkelighet - virtuelt utviklingsmiljø er begge deler!
Se for deg en ideell verden hvor utviklingsmiljøene dine for store, tunge enterprise-prosjekter settes opp out-of-the-box, og kan reverteres til en ryddig og feilfri tilstand hvis noe skjærer seg. Drøm eller virkelighet - virtuelt utviklingsmiljø¸ er begge deler!
Dag Willy er "lead developer" på en stort javaprosjekt i Computas. Han har 12 års erfaring fra bransjen, og bred erfaring fra SOA-implementasjon, Java EE og Smalltalk.
Harald er teknisk prosjektleder i Computas. Han har jobbet med store javaprosjekter i 7 år, og er også fagleder for Java i bedriften.

Jeg kan fortelle hvorfor drift bør elske cloud og PaaS. Men det er ikke sikkert utviklere vil like grunnene.
Noen ganger føles det som om drift bare holder igjen, helst vil unngå applikasjoner, oppdateringer og utviklere. Hvorfor kan vi ikke gjøre noe spennende? Det er trist å fortsatt holde på med relasjonsdatabaser når alle snakker om NoSQL. Det er kjipt å måtte bruke JSF når alle snakker om rike klienter i HTML5 og JavaScript. Hvis man bare fikk bestemme selv. Litt self service på cloud? Som Heroku? Så kunne man blitt mye mer effektiv og hatt det morsommere på jobb. Fett! Nå er det mange grunner til at man ikke kan ta i bruk Heroku i organisasjoner. Men hva hvis man kan gjøre det samme på sine egne servere? En egen Platform-as-a-Service? Da vil faktisk mange av hindringene forsvinne, vi må bare overbevise drift først... Jeg kan fortelle hvorfor drift bør elske cloud og PaaS. Men det er ikke sikkert utviklere vil like grunnene. Jeg vil gi en kjapp oversikt over hva som finnes på markedet for Platform-as-a-Service in-house, og noen betraktninger om hva som du må se etter. Vi har gjort oss noen efaringer, og har noen midlertidige resultater.
Anders jobber som utvikler og arkitekt hos Miles i Oslo. Han har i det siste jobbet såpass mye med Bash og Linux at han har begynt å kalle seg for drifter. I utformingen av systemer er smidig systemutvikling viktig, og han forsøker å balansere effektivitet og hastighet med forutsigbarhet og stabilitet i produksjon. Han har erfaring fra små, store, bra og dårlige smidige prosjekter, men lærer stadig nye ting. Gjennom erfaringen med drift og ansvar i produksjon har han erfart hvor viktig det er å få hele verdikjeden til å spille sammen, ikke bare utvikle kjapt. Det finnes få ting som er så gøy som å legge ut noe i produksjon én dag, måle den neste, og legge ut en korreksjon den tredje dagen.

Lær hvordan man implementerer og tar i bruk tofaktor autentisering ved hjelp av Google Authenticator.
Har du brukere som benytter «JavaZone2013» som passord? Har nettstedet ditt data som bør sikres bedre? Eller ønsker du rett og slett å tilby brukerne dine en sikrere innloggingsvariant? De fleste av oss går i dag rundt med en mobiltelefon i lomma. Mobiltelefonen kan enkelt benyttes i en tofaktor autentiseringsløsning ved hjelp av Google Authenticator. Google har utviklet mobilapplikasjonen. Det som gjenstår for deg er å ta dette i bruk på nettstedet ditt. I løpet av denne lyntalen vil du lære hvordan man implementerer støtte for tofaktor autentisering ved hjelp av Google Authenticator.
Jostein har jobbet med Javautvikling i 9 år og har en genuin interesse for både Java og sikkerhet. Det siste året har Java-verden virkelig fått erfart at det finnes et viktig fagfelt som heter sikkerhet. Denne oppvåkningen fører forhåpentligvis til at både Java i seg selv og flere Java-applikasjoner blir sikrere enn i dag. Jostein hjelper til med å holde fokus på sikkerhet i Java-verden. Til daglig jobber han som Senior Software Engineer hos Steria.

Lyntalen går gjennom 10 praktiske eksempler på bruk av Guava biblioteket og ser på hvordan det passer sammen med Java 8.
I dagens hverdag med blant annet Maven er det veldig lett å legg til og fjerne artefakter fra applikasjonen vår. I denne lyntalen kommer det 10 grunner til at du skal legge Guava biblioteket til på classpathen. Til slutt ser vi på hvordan vi kan bruke Guava sammen med Java 8.
Ingar Abrahamsen er utdannet elektroingeniør på HiO og jobber som utvikler hos Visma Consulting. Han har 3 års erfaring fra konsulentbransjen og har stor fokus på god kodekvalitet.

Ren XML kan transformeres til hva du vil: HTML, JSON, iCal - Kun fantasien setter grenser. Lær hvordan med et kræsjkurs i XSLT og XPath.
XML er noe man møter i mange sammenhenger, enten man vil eller ikke. Ønsker du å velge ut et spesifikt subsett av data fra en XML-kilde, med kun en setning? Ønsker du å transformere XML til HTML, tekst eller JSON? Xpath og XSLT er kraftige verktøy for å manipulere og transformere XML, som det kan være nyttig for enhver programmerer å kjenne til. Lær de viktigste konseptene, se de i bruk på konkrete eksempler og plukk opp noen tips på veien fra en som bruker det til daglig.
Kjell Ivar jobber i Visma Consulting, og har i 2 år jobbet med frontendutvikling via Enonic CMS for kunder som Norad, Norsk Filminstitutt og NAV. Utvikling av sidemaler via bruk av XML-datakilder, og transformering av dette til f.eks. HTML via XSLT og Xpath er en stor del av dette arbeidet. Kjell Ivar har ellers en stor interesse for interaksjonsdesign, HTML5, app-utvikling og javascriptrammeverk.

Å skrive sitt eget programmeringsspråk er en deilig opplevelse. Vi skal lære å skrive en interpreter for et enkelt lisp-språk, ved hjelp av Groovy, på under 50 minutter.
Lær Lisp, Groovy, og hvordan interpretere virker ... på under en time. Vi bruker forskjellige programmeringsspråk hver dag. Mange av oss er innom Java og JavaScript, kanskje php, eller Clojure, eller Groovy eller Ruby... og vi tar disse språkene egentlig for gitt. Men ... hvordan er de laget? Hvilke bevegelige biter har de? Hva gjør de forskjellige bitene? Hvordan kan jeg lage mitt eget programmeringsspråk, om jeg vil? Den store hemmeligheten er at dette egentlig ikke er så vanskelig. Hvis vi bare bruker litt tid på hver bit, for seg selv, og peprer den med tester, forsvinner magien, og bare kode står igjen. Deilig, deilig kode. (PS. Du trenger ikke kunne Groovy for å følge med her, jeg har valgt Groovy nettopp fordi konseptene blir så klare, språket står ikke i veien.)
Jeg er en Kodemaker som har programmert siden Sharp MZ-721 var den kuleste datamaskinen man kunne ha på et gutterom (for den kom med kassettspiller, og vi kunne kopiere spill med pappas dobbelkassettspiller). Det var da spill kom i form av lange listinger i blader, som vi tastet inn, og det fantes kommandoer som het PEEK og POKE. Jeg mener at det er minst like viktig å ta vare på den store programmeringsgleden, som å programmere for å tjene til livets opphold.

Vi ser på avgjørelser relatert til prosjektgjennomføring, organisasjon, arkitektur og teknologi. Var det noen som tenkte på forvaltning av applikasjonen når prosjektet hadde fullt trykk?
Det er i dag mye oppmerksomhet rundt effektivisering av prosjekter. Man snakker om metodikker, teknologier og rammeverk. Ofte fokuseres det på rammeverk og teknologier man raskt kan komme i gang med, mens andre ganger snakker man om ansvarlighet og tar sikte på "velprøvde" teknologier og standarder. Dette foredraget tar sikte på å bevisstgjøre hvordan avgjørelser som gjøres i prosjekt og organisasjon påvirker forvaltningen av produktet i årene som kommer. Gjennom eksempler fra virkeligheten forsøker vi å belyse hvordan avgjørelser, både små og store, påvirker effektiviteten i forvaltning. Vi ser på avgjørelser relatert til prosjektgjennomføring, organisasjon, arkitektur og teknologi. Var det noen som tenkte på forvaltning av applikasjonen når prosjektet hadde fullt trykk? Er organisasjonen rigget for å håndtere forvaltning av selvbetjeningsapplikasjoner? Er det alltid like lurt å sikte på felleskomponenter og gjenbruk?
Jobber til daglig som Manager og Fagleder for Java i Bekk Consulting As. Har jobbet i mange år med både utvikling av hyllevareprodukter og som konsulent for bedriftsmarkedet både i Norge og i utlandet. Lang erfaring med Linux, C, Python og Java. Jobber både som utvikler, arkitekt og teknisk prosjektleder.

“Clever code” can often be difficult for novices and people without the same skill-level as the person who wrote it. Can the code be a strong negative contributor to future use of time when maintaining the code? What does this say about the consistency of the group and how we work?
I en artikkel fokusert på teknisk gjeld, kommer Ward Cunningham med en interessant uttalelse. "Når et team jobber mot et mål ved å skrive kode, kan vi måle produktiviteten som forholdet mellom fokus på målet og fokus på koden. Vi kan si at koden har høy kvalitet, når produktiviteten forblir høy selv ved forandringer i team og mål". Sett at du jobber i et team med ganske forskjellige kvalifikasjoner. Og la oss si at den mest erfarne utvikleren lager kode som krever dyp forståelse av språket. Vil denne koden være et positivt eller negativt bidrag til fremtidig tidsbruk når koden skal forandres senere? Har dette noe å si for ønsket sammensetting av team og arbeidsmåte? Er det gjort bevisste valg hvorfor man trenger å ta opp teknisk gjeld og når den skal betales? Er nye språk som Scala eller paradigmer som funksjonell programmering et skjult kjempelån?
Erlend Flaten jobber som konsulent hos Antares Gruppen AS. Han har jobbet som utvikler siden 2005. Mye av arbeidet de siste årene har vært å oppgradere og videreutvikle forskjellige halvgamle systemer. Dette har inspirert til å finne frem til metoder å lage kode som er mest mulig hensiktsmessig for videre vedlikehold. Han jobber sammen med andre konsulenter fra Antares Gruppen AS for å samle erfaring for å jobbe effektivt med å håndtere teknisk gjeld.

Med din eksisterende kunnskap om webteknologier kan du både lage native applikasjoner for Firefox OS, og lage webapplikasjoner som utnytter mobil hardware på flere plattformer.
De som har vært med siden 90-tallet vil kanskje huske en softwaregigants frykt for at Netscape skulle gjøre operativsystemet overflødig. Nettleseren har ikke bare gjort operativsystemet overflødig, nå er den operativsystemet. I Firefox OS kan du skrive "native" applikasjoner til en mobil plattform med HTML, CSS og JavaScript. Med litt omtanke kan du også få applikasjonene til å virke godt på andre mobile plattformer. De første mobiltelefonene med Firefox OS har dukket opp, og prosjektet støttes av flere tunge aktører (pluss vår egen Telenor). Dette kan bli en plattform å følge med på i kampen for et alternativ til Android og IOS, og API'ene som blir standardisert gjennom Firefox OS kan også viske ut skillet mellom nativ og web på andre plattformer.
Håvard har syslet med webteknologier siden Netscape 2.0 var hot, og har fulgt Mozilla-stiftelsen tett i mange år. Han har utviklet for flere forskjellige mobilplattformer, og har tro på at åpne plattformer kan rive ned &quot;hagemurene&quot; for mobilapplikasjoner.

Erfaringer fra utvikling av Ruters billettapplikasjon med spesiell fokus på hvorfor den ble utviklet som tre native-applikasjoner.
I løpet av en kort høst ble Ruters billett applikasjon for Android, iOS og windows phone utviklet. Dette foredraget forteller historien om hvorfor vi valgte å implementere løsniningen som tre native applikasjoner heller enn å gå for en multiplatformløsning. Innledningsvis vil multiplatform vs native bli diskutert før både gode og dårlige erfaringer fra prosjektetgjennomføringen vil bli delt.
Tobias er fagsjef i Know IT Objectnet. Han har 16 års erfaring fra konsulentbransjen hvor han stort sett har jobbet med utvikling av store mellomvareløsninger implementert i Java. Tobias har tidligere holdt foredrag på rOOts, JavaZone, Kunnskapstinget og flere andre konferanser. Han er styremeldem i dataforeningen østlandet. Tobias er tidligere styremedlem i javaBin og satt i JavaZones programkomite fra 2004-2009. Tre av disse årene fungerte han som leder.

Det er vanskelig å sette opp et søk som gir gode resultater med norsk innhold. Jeg vil gi deg en kjapp innføring i hvordan en søkeindeks ser ut og hvordan du får et kvalitetssøk.
Sliter brukerne med lite relevante resultater når de bruker søkeløsningen din for norsk innhold? Gir «autocomplete» overflødige forslag for det samme ordet? Får du null treff hvis ikke søkeordet skrives nøyaktig som i dokumentet? Denne lyntalen forteller deg hvorfor det er slik og hva du kan gjøre for å skape en bedre søkeopplevelse. Jeg tar utgangspunkt i søk med Solr og gir deg en kjapp innføring i hvordan en søkeindeks er bygd opp, hva som er spesielt for søk på norsk, og hvordan du får et kvalitetssøk med norsk innhold.
Marvin er systemutvikler hos Kantega AS. Han er sivilingeniør i datateknikk med fordypning i intelligente systemer. Han startet som som Java-utvikler i 2007 da han ble med i studentavisa Under Dusken. Hans karriere i Kantega startet i 2009 hvor han jobbet deltid frem til han i 2011 fullførte mastergraden sin og fikk fast ansettelse. Han har jobbet med forvaltning og utvikling av flere store java-applikasjoner, blant annet CMSet som driver Trondheim kommunes nettsider og indeksering av disse.

Denne lyntalen gir ein kort innføring i Websockets og viser korleis du kan bruke av Atmosphere-rammeverket til å støtte "push" av meldingar frå server til nettleser.
I webapplikasjonar no til dags har ein ofte behov for å pushe hendingar fra serveren og ut til nettleseren så fort dei oppstår. HTTP egnar seg dårlig til denne typen interaksjon, men opp gjennom tida har ein brukt ulike skitne triks for å få det til likevel. Nye protokollar og initiativ slik som Websockets og HTML 5 Server Side Events gjer dette mykje enklare og betre, men då må ein forholde seg til ein jungel av implementasjonar og API-er. Denne lyntalen dreier seg om korleis ein kan la Atmosphere-rammeverket skjule denne kompleksiteten og lage push-applikasjonar utan å måtte uroe seg så mykje over teknologien som ligg bak.
Kenneth jobber i Accenture og har meir enn 10 års erfaring som utvikler, drifter og løsningsarkitekt. I dag jobber Kenneth med mykje spennande frontend- og backendteknologi i eit av dei største IT-prosjekta i Noreg. Han synest det har skjedd utrulig mykje spennande med webteknologien dei siste åra og at vi aldri har hatt betre verktøykasse for å kunne lage flotte og brukarvennlege webapplikasjonar.

Har du noensinne irritert deg over spam i loggen og ønsket å kunne fjerne det der og da? Er det opplysninger som skjules i loggen som du gjerne skulle fått frem? Har du noensinne ønsket å logge innholdet i én type SOAP-melding, men uten å måtte logge alle SOAP-meldinger til enhver tid? Da vil denne lyntalen vise deg hvordan!
Å kunne gjøre tilpasninger til en kjørende applikasjon kan gi bedre kontroll i et produksjonsmiljø og gi færre utrullinger og kortere rundtur ved test og utvikling. Logging er en standardfunksjon i de fleste applikasjoner, og det kan gi mange fordeler å gjøre det mulig å endre logg-oppsettet dynamisk. I denne lyntalen vil jeg vise hvordan ulike SOAP-meldinger kan logges uavhengig av hverandre, og vise hvordan man enkelt kan legge til dynamisk kontroll av hva som skal logges.
Torstein har jobbet med systemutvikling i 12 år. Han har jobbet med flere store javaprosjekter der systemintegrasjon og kjøretidskontroll har vært viktige aspekter.

Apache Pig er en plattform for å analysere store datamengder med Hadoop. I denne lyntalen gir jeg en kort gjennomgang av Apache Pig, og viser hvordan det kan brukes til å prosessere terabyte av data ved å skrive et halvt dusin linjer i konsollet.
Apache Pig er en plattform for å analysere store datamengder med Hadoop. Pig tilbyr et skriptspråk, Pig Latin, og en kompilator som produserer sekvenser av MapReduce-jobber. Pig Latin er et tekstlig, høynivå skriptspråk som gjør MapReduce en hel del lettere å jobbe med. I denne lyntalen gir jeg en kort gjennomgang av Apache Pig. Jeg vil plassere Pig i økosystemet rundt Hadoop og se på hvordan Pig blir benyttet i den virkelige verden. Jeg vil gå gjennom Pig's filosofi, syntaks og kjøretidsmiljø, og vise hvordan man går frem for å komme i gang med å analysere store datamengder med Apache Pig.
Jan-Erik er sjefskonsulent og teamleder i Capgemini. Han har 7 års erfaring med utvikling og arkitektur på Java-plattformen. For tiden er han opptatt av temaer som NoSQL og økosystemet rundt Hadoop.

"Finn rytmen med Agile utvikling!" sa jeg i 2004. Fant du den?
På JavaZone 2004 holdt jeg presentasjonen "Finn rytmen med Agile utvikling". Min påstand den gang var at "Agile utviklingsteknikker som test-drevet utvikling, kontinuerlig integrasjon, daglige stand-up møter og ukentlige iterasjoner skaper en rytme i prosjektet som er veldig behagelig og effektiv å jobbe i, både for utviklere og prosjektet som helhet." Etter 10 år og en rekke smidige prosjekter -- i inn- og utland, i offentlig og privat sektor, med samlokaliserte team og team spredt på ulike kontinenter -- vil jeg oppsummere hva som har vist seg å fungere, hva som ikke har fungert, og på hvilke områder jeg opplever det er størst forbedringspotensiale. Foredraget er basert på egne erfaringer, forskning og sure innspill fra gode kollegaer.
Nils Christian nyter å hjelpe team å levere software som gleder både brukere og sponsorer. Som konsulent er han å finne i ulike roller hvor han får praktisert dette gjennom coaching i smidig test- og utviklingsmetodikk, kravspesifisering, systemarkitektur og utvikling. Nils Christian er sivilingeniør fra NTNU og partner i Scienta.

Demonstrasjon av Dropwizard for en solid, RESTful, Java backend-tjeneste med kun time proven, solide og etablerte standarder, bibliotek og rammeverk.
Demonstrasjon av Dropwizard for en solid, RESTful, Java backend-tjeneste med kun time proven, solide og etablerte standarder, bibliotek og rammeverk.
Holger er utdannet sivilingeniør i datateknikk fra NTNU. Siden skolebenken har han jobbet i 3 år som konsulent i Bekk Consulting, hvor han nå er fagleder for programmeringsspråk. Han har også grunnlagt og vært med å utvikle slidifier.com.

Experience report of using Clojure in a (almost) real word project.
Når Submitit systemet (som brukes til å registrere forslag til foredrag på Javazone) skulle byttes ut ble fristelsen til å skrive en web server med Clojure for stor. I denne lyntalen vil jeg oppsummere mine erfaringer med å bruke Clojure i et økosystem hvor det skal fungere i en webserver, kunne kommunisere med et baksystem og kunne deployes som en war. I tillegg er det implementert mailutsending og Captcha. Jeg vil gå gjennom noe som fungerte bra og noen tabber som kostet tid og krefter.
Anders jobber i Steria som løsningsarkitekt og utvikler. Han har mer enn ti års erfaring som systemutvikler. Han brenner for å lage enkle løsninger til komplekse problemer, og er alltid på utkikk etter verktøy til å hjelpe han med dette. Etter å ha jobbet en del med Clojure har han funnet ut hvor gøy funksjonell programmering er og ønsker å dele dette med flere programmerere. Anders har tidligere holdt foredrag på blandt annet Javazone og Smidig konferansen.

Skriv mer forvaltbare og mindre skjøre javascript-tester med page objects.
Testing er vanskelig. Testing i frontend er enda vanskeligere. Å skrive gode javascript-tester krever disiplin og en stødig hånd. Hvis ikke, ender du fort opp med en uforvaltbar smørje der mange tester feiler hver gang du endrer et klassenavn eller flytter på et inputfelt. Skal du i tillegg teste en arbeidsflyt i en single-page app må du også tenke på mocking av ajax-kall. Til sammen blir dette fort vondt å teste og testene fort uleslige. For å rydde opp i kompleksiteten kan vi pakke interaksjonen med viewene inn i page objects.
Sveinung jobber til daglig som konsulent i BEKK. Som håndverker bryr han seg sterkt om kodekvalitet, testing og automatisering. Han har tidligere presentert på JavaZone, Smidig og Software. Det siste året har han sittet på et frontend-tungt prosjekt i en stor norsk bank. Applikasjonen var en single-page app skrevet i Backbone i et komplekst domene, med store views og høye krav til testing.

Hvordan man enkelt kan lese og manipulere XML-filer i Clojure ved hjelp av Clojures implementasjon av Zipperdatastrukturen.
XML er ikke alltid enkelt å prosessere, spesielt ved ulogiske strukturer og manglende skjemadefinisjoner. I overgangen fra Java til Clojure må man fortsatt behandle mye XML. Jeg skal vise hvordan man enkelt kan lese og manipulere XML-filer i Clojure ved hjelp av Clojures implementasjon av Zipperdatastrukturen. Ved bruk av disse metodene vil behandling av XML data gå lekende lett.
Lars jobber som utvikler hos Iterate og prøver å bruke Clojure der det er mulig.

Erfaringsforedraget beskriver utviklerens hverdag i et stort integrasjonsprosjekt og hvordan prosjektet i praksis håndteres med bruk av metoder som feature branching, pull requests, DevOps, kontinuerlige leveranser innenfor ITIL, og teknologi som github, puppet, nagios og release/deployment med rubyscripts.
En av Norges største bedrifter, Oslo kommune, har utviklet en omfattende integrasjonsplattform basert på åpne biblioteker og standarder, best practice for deployment, lastbalansering, konfigurering, overvåkning og organisering av tjenester. Denne vedlikeholdes til enhver tid av et 20-talls utviklere på oppdrag fra 40-50 forskjellige interessenter med sine egne krav, planer og leveranseløp. Alt sammen muliggjøres ved delegering av ansvar til de enkelte utviklerne, som også drifter plattformen. Erfaringsforedraget beskriver utviklerens hverdag og hvordan prosjektet i praksis håndteres med bruk av metoder som feature branching, pull requests, DevOps, kontinuerlige leveranser innenfor ITIL, og teknologi som github, puppet, nagios og release/deployment med rubyscripts.
Jan Henrik er Cand. scient. og har 15 års erfaring med serverside Java-teknologi, både J2EE og lettvektsrammeverk. Han jobber i dag for Knowit som teknisk prosjektleder, arkitekt og utvikler for et større offentlig IT-prosjekt. Jan Henrik er fagleder for DevOps i Knowit og en ivrig lettvekts-fantast som forsøker å jobbe mot smidige arkitekturer og løsninger.
Rune har i sine drøye 10 år i bransjen jobbet mye med arkitektur og utvikling på Java-plattform i større enterprise systemer. Både på klient- og serverside, og både med tunge J2EE-servere og lettvektsrammeverk. Idag jobber han for Knowit som teknisk-/løsningsarkitekt og utvikler på et større offentlig IT-prosjekt.

Lyntalen vil ta for seg hvordan konseptene fra Rulespeak er brukt med norsk språk i et stort offentlig utviklingsprosjekt. Det vil vises hvordan forretningsregler er høstet og dokumentert på en strukturert måte på norsk. Rulespeak består av ett sett av nøkkelord som brukes for å beskrive forretningsregler med norske setninger, samt et sett av "Dos and Don'ts".
Har du noen gang lurt på hvordan du best kan samle inn alle forretningsreglene i systemet du skal lage? Opplever du ofte at kravspesifikasjonen ikke er så tydelig som man du skulle ønske? Da er det kanskje fordi du eller kravstiller ikke har vært presise nok i formuleringene, og ikke skiller godt nok mellom forretningsregler og kravspesifikasjon. Rulespeak er et sett av "best practices" på hvordan man skriver forretningsregler i naturlig språk (Engelsk). I denne presentasjonen får du et glimt av hvordan konseptene i Rulespeak også kan brukes på norsk og hvordan de har vært brukt i et stort offentlig utviklingsprosjekt.
Alf-Kenneth Aabel jobber i Decisive AS som seniorkonsulent hvor hans fokus er regelbaserte løsninger. Han har jobbet med slike løsninger i det offentlige siden 2006 og tenker alltid på hvordan beslutninger kan spesifiseres og implementeres. Et viktig mål for ham er å øke effektiviteten i løsninger ved hjelp av automatiserte beslutninger. Likhet for loven er et viktig prinsipp for ham. Før han ble en "regelrytter" jobbet han i mange år med med Javabaserte løsninger. Han er alltid nyskjerrig etter å forstå hvordan nye metoder og løsningsprinsipper kan bidra til bedre løsninger.

Clojure og Scala er to av de mest fremtredende funksjonelle språkene som kjører på JVMen. Ingen av språkleirene har mangel på verken høye ambisjoner, sylskarpe retorikkere og religøse følgere. Krydrer man det hele med den gode gamle "statisk vs dynamisk" debatten så er alt lagt til rette for en språklig hanekamp ingen har sett maken til på denne siden av tusenårsskifte.
Clojure og Scala er to av de mest fremtredende funksjonelle språkene som kjører på JVMen. Ingen av språkleirene har mangel på verken høye ambisjoner, sylskarpe retorikkere eller religøse følgere. Krydrer man det hele med den gode gamle "statisk vs dynamisk" debatten så er alt lagt til rette for en språklig hanekamp ingen har sett maken til på denne siden av tusenårsskifte. I denne presentasjonen skal vi se på både likheter og ulikheter mellom de to språkene. Med fokus på de funksjonelle egenskapene skal vi se på hvordan Clojure med sitt mål om å etablere en LISP i JVMen er fundamentalt forskjellig fra Scala som forsøker å forene objekt-orientert og funksjonell programmering. Vi vil diskutere deres sterke og svake sider og vise eksempler på hvor hvert språk virkelig viser seg fra sin beste side.
Etter en euforisk opplevelse på noen av de første Scalaprosjektene i Norge ble Alfred kastet tilbake i Javas evigbrennende flammer. Betaler han nå for sine programmeringssynder? Han har uansett personlig erfart hvordan valg av programmeringsspråk kan forandre både tankesett, løsninger og drivkraften til en programmerer.
Etter å ha konkludert med at Scala var for mainstream, valge Erik for tre år siden å lære seg Clojure. Siden den gang har han kjempet en tapende kamp med å evangelisere Lisp i en Java-frelst verden. Frustrasjonen over infiks notasjon og manglende parenteser drev han til slutt til å starte sitt eget selskap hvor han nå får daglig utløp for sin Clojure avhengighet.

Keen på å lære hvordan man lager en web-applikason som yter stabilt? Lyst til å lære mer om hvordan man skal tolke thread dumps og memory heap dumps? Da er denne presentasjonen for deg!
Presentasjonen gir en rask introduksjon til hva man skal tenke på når man skal lage en web-applikasjon som skal levere stabil ytelse over tid. Følgende teamer blir sentrale i presentasjonen: - Hvordan håndtere kostbare operasjoner - Hvordan unngå ressursmangel Det vil også bli kjørt en demo hvor vi genererer last mot en webapplikasjon med lastverktøyet Gatling (scala), monitorerer med JMX og analyserer thread dumps og heap dumps for å finne årsaken til problemer.
Stefan Magnus Landrø er manager i Bekk Consulting, og jobber til daglig med ytelsestesting av web-applikasjoner. Stefan er en aktiv bidragsyter i BEKKs javamiljø, og har tidligere holdt foredrag på blant annet JavaZone, Software og Smidig-konferansene.

Lyntalen tar for seg hvordan PowerMock kan benyttes til å teste kode som ikke lar seg teste ved hjelp av mock-rammeverk som Mockito og JMock. Videre presenteres det hvordan PowerMock ble tatt i bruk for å teste en 10 år gammel EJB-basert J2EE applikasjon uten eksisterende tester.
Mockito og JMock er eksempler på mock-rammeverk som benyttes i test-drevet utvikling. Men i en del situasjoner kommer disse rammeverkene til kort, f. eks. ved testing av gammel legacy kode og kode som benytter finurlige 3. parts biblioteker. Hvordan enhetstester man "utestbar kode" når man ikke ønsker eller ikke kan endre selve koden? Lyntalen tar for seg hvordan man kan løse slike vanskelige testsituasjoner med PowerMock, for eksempel mocking av statiske metoder, mocking av final klasser og mocking av hardkodede avhengigheter. Videre presenteres det hvordan PowerMock ble tatt i bruk for å skrive de første testene av en 10 år gammel EJB-basert J2EE applikasjon.
Thomas er utdannet sivilingeniør i datateknikk fra NTNU og jobber som arkitekt og utvikler i Visma Consulting. Han har 8 års erfaring med javautvikling i store, offentlige prosjekter og er svært interessert i kodekvalitet og testing. Thomas har jobbet både med nyutvikling og med modernisering av gamle legacy applikasjoner der innføring av automatiserte tester har vært kritisk for prosjektenes suksess.

Hvorfor vi er til, hva du kan lære bort til barn og hva vi gjør. Så litt om hvordan vi jobber med skoler, og hva skolene trenger hjelp til. Så forteller vi deg hva bedrifter kan gjøre, og hva du kan hjelpe til med.
Lær Kidsa Koding! har flere hundre medlemmer og lokale grupper i mange byer. Her gir vi litt bakgrunn og viser retningen videre. Hvor kommer digital kompetanse fra? Hvorfor skal du bry deg? Hvorfor bryr de seg i utlandet? Hva kan vi forvente å lære bort til barn i forskjellige aldersgrupper? Hvilke ferdige kursopplegg finnes? Hvem kan du snakke med for å hjelpe til? Hva gjør vi videre?
Simen Sommerfeldt, CTO Oslo hos Bouvet ASA og medlem av Østlandsstyret i Dataforeningen. Stiftet Lær Kidsa Koding! for å sørge for at barn kan få en mulighet til å skjønne og kontrollere en stadig mer digital verden.
Direktør internett og nye medier IKT-Norge og leder for Digitutvalget. Ble med tidlig i Lær Kidsa Koding! og koordinerer nå nettverket sammen med Simen

Eclipse er mye mer enn en IDE (og en av Twilight-filmene...). Eclipse er et OpenSource-miljø de fleste vet for lite om!
For to år siden trodde jeg - i likhet med alt for mange Java-utviklere - at Eclipse kun er en IDE. Etter det har jeg jobbet på et prosjekt hvor vi har bygget vår programvare på toppen av mange forskjellige Eclipse-rammeverk. Jeg har selv erfart at Eclipse-økosystemet er en skjult skatt, og etter å i tillegg ha deltatt på fire Eclipse-konferanser, ønsker jeg å spre det glade budskap: Finn ut mer om hva Eclipse kan tilføre ditt neste prosjekt!
Jeg jobber som systemutvikler i konsulentbedriften Itema, Norges beste arbeidsplass. Jeg har vært programmerer i 13 år, og siden 2011 har jeg jobbet på et prosjekt for Sintef MARINTEK, hvor vi lager en tykk-klient for simuleringer av ting i og under vann. Eclipse gjør at produktet vårt er ti ganger bedre enn om vi hadde startet fra null.

Sammenslåing av kildefiler, minifisering, optimalisering av bilder, erstatning av variabler brukt under utvikling, og selvfølgelig kjøring av tester og kodeanalyser. Grunt er et byggeverktøy skrevet i JavaScript basert på en fornuftig plugin-arkitektur som løser ethvert problem du måtte kaste på den.
En moderne nettside, nesten uansett hvor enkel den måtte være, må igjennom en rekke steg før den er klar for verdensveven. Sammenslåing av kildefiler, minifisering, optimalisering av bilder, erstatning av variabler brukt under utvikling, og selvfølgelig kjøring av tester og kodeanalyser. Grunt er et byggeverktøy skrevet i JavaScript basert på en fornuftig plugin-arkitektur som løser ethvert problem du måtte kaste på den. I tillegg er den ekstremt enkel å utvide. Basert på erfaringer fra flere prosjekter vil jeg demonstrere noe av det Grunt kan gjøre for deg.
Pål er utdannet sivilingeniør i kommunikasjonsteknologi fra NTNU og jobber som systemutvikler i Iterate AS. Han har jobbet med webutvikling i 10 år, og er alltid på utkikk etter måter å forbedre verktøy og prosesser i og rundt programvareutvikling .

Har du noen gang hatt behov for å strukturere eller filtrere store mengder tekst? Denne presentasjonen vil fortelle deg om hva slags muligheter som ligger i Unix-verktøykassen og når det passer å bruke den.
Moderne programmeringsspråk er kraftige saker; de kjemper om å overgå hverandre med høyere og hæere abstraksjonsnivåer. Men av og til kan den korteste veien til målet befinne seg i verktøy som ble laget før internett ble oppfunnet. Ofte gjelder det når man skal behandle store mengder tekst. Denne lyntalen vil gi en oversikt over Unix-verktøy for å strukturere og filtrere tekst.
Odin er en kodemaker som liker å fylle verktøykassen. Han elsker å programmere, men blir aldri så glad når utfordringer kan løses med elegante Unixkommandoer.

Se Christian og Magnar parprogrammere på nettspill med Clojure og ClojureScript.
Så du ZombieTDD for et par år siden? Magnar og Christian er tilbake med ZombieCLJ - en norsk videoserie med Clojure og ClojureScript. De setter seg ned med emacsen og parprogrammerer en ny episode foran publikum. Det blir utvikling av en ny feature, så du kan henge med selv om du ikke har sett alle episodene. Se hvordan to typer som digger funksjonell programmering angriper problemer og skriver tester.
Christian is a passionate programmer at Kodemaker. He is the author of Test-Driven JavaScript Development, and he maintains several open source projects, including the recently released test-framework Buster.JS and the popular mocking framework Sinon.JS. After dark you may find him tinkering with his Emacs setup, coding Lisp and slowly being devoured by the world of functional programming.
Jeg heter Magnar og er en glad framsieutvikler. Jeg er deleier i Kodemaker, jobber til daglig som konsulent, og om kvelden utvikler jeg blant annet eventyrspillet Adventur Delux, pomodoro-verktøyet mytomatoes.com og en screencast om at emacs rocker. Jeg har også en blogg med screencasts om testdrevet javascript, zombier og mafia på zombietdd.com. Og en til med Clojure og ClojureScript på www.zombieclj.no

Oslo kommune har en arkitektur med nesten 150 mikrotjenester (micro services). Lyntalen lister opp fordeler og ulemper med å ha en såpass løst koblet arkitektur, og viser hva en slik arkitektur muliggjør.
Denne lyntalen viser oppsummerte erfaringer fra et stort enterpriseprosjekt med kontinuerlige leveranser, der utviklerne jobber også med drift (DevOps). Alt dette er muliggjort ved hjelp av en ekstremt løst koblet heterogen arkitektur, der alle tjenestene er mest mulig uavhengig av hverandre. Arkitekturen har tjenester implementert i forskjellige språk (Ruby, Scala, Java, .NET).
Jan Henrik har 15 års erfaring med serverside teknologi på JVMen, både J2EE og lettvektsrammeverk. Han jobber i dag for Knowit som teknisk prosjektleder, arkitekt og utvikler for et større offentlig IT-prosjekt. Jan Henrik er fagleder for DevOps i Knowit og en ivrig lettvekts-fantast som forsøker å jobbe mot smidige arkitekturer og løsninger.

En demonstrasjon av nye, kule ting i ES6-standarden, og hvordan du kan ta dette i bruk i dag.
Klasser og moduler, proxy- og generatorfunksjoner, nye operatører som spread og rest. Listen av nye ES6-features fortsetter å vokse, og front-end-utviklere gnir seg varme og klamme i hendene. Mange av disse nye egenskapene ved JavaScript vil ikke bli bredt støttet av nettleserne før om flere år, men det er allikevel håp. Ved å bruke en kombinasjon av såkalte shims og transpilere kan vi dra nytte av alt dette i dag, og samtidig støtte eldre nettlesere. Jeg vil først demonstrere endel eksempler på hva som er mulig med ES6, før jeg viser hvordan dette kan finne veien ut til dine brukeres nettlesere i dag. Du vil sannsynligvis ende opp som mer nysgjerrig enn opplyst.
Pål er utdannet sivilingeniør i kommunikasjonsteknologi fra NTNU og jobber som systemutvikler i Iterate AS. Han har jobbet med webutvikling i 11 år, og er alltid på utkikk etter måter å forbedre verktøy og prosesser i og rundt programvareutvikling .

Bruker du Apache Maven, og gjør andre ting enn å kompilere koden din under bygging? Det kan hende du kan tjene på å definere deler av byggeprosessen din i et plugin, og kanskje kode egne steg i tillegg til dem andre plugins definerer. Jeg viser deg hvor lite som skal til for å definere et eget plugin og sette samme andre plugins for et tilpasset bygg.
Som javautvikler bruker du nok Apache Maven, og er klar over at det er mulig å bruke plugins til å påvirke byggeprosessen i Maven. Et plugin kan gjerne være veldig lite og gjøre kun én ting, så det skal lite til for at det er gunstig å laget et eget. Du trenger ikke ha spesielle steg i bygget for å ha nytte av at plugin. Dersom du har andre plugins du alltid bruker i prosjektene kan det være en god idé å lage et plugin for å samle disse. Da minsker du både antallet linjer i pom.xml og mengden som kopieres mellom prosjekter. I denne workshoppen går jeg gjennom det som er nødvendig å vite for å lage et plugin, hvordan du finner dokumentasjon og hvordan du får plugget det inn på riktig sted i bygget ditt.
Marvin er systemutvikler hos Kantega AS. Han er sivilingeniør i datateknikk med fordypning i intelligente systemer. Han startet som som Java-utvikler i 2007 da han ble med i studentavisa Under Dusken. Hans karriere i Kantega startet i 2009 hvor han jobbet deltid frem til han i 2011 fullførte mastergraden sin og fikk fast ansettelse. Han har jobbet med forvaltning og utvikling av flere store java-applikasjoner, blant annet Kantegas hjemmesnekrede CMS og applikasjoner som bygger på dette.

Denne lyntalen handlar om korleis bruk av JavaBean-mønsteret stikk kjeppar i hjula for draumen om ein rik domenemodell.
Javakode er ofte full av javabønner og bønneliknande klasser. Vi har blitt så vant med å bruke dette mønsteret at vi ofte ikkje tenker over at vi bruker det, og IDE-en oppretter gjerne getter- og setter-metoder for oss automatisk. Mange populære bibliotek og rammeverk, slik som Dozer og Spring, forventar også å kunne jobbe med bønner. Men det er likevel ikkje slik at alle klasser vi skriv bør kunne vere bønner. I denne lyntalen ser vi på korleis domeneobjekta mister evnen til å ha kontroll på eigen tilstand dersom dei også skal vere bønner, og kva konsekvensar dette har.
Kenneth jobber i Miles og har meir enn 12 års erfaring som utvikler, drifter og løsningsarkitekt. Han har jobba i bittesmå prosjekt og i kjempestore prosjekt, og med masse forskjellige programmeringsspråk og teknologiar. Av alt dette har han lært at god smak er viktigare enn "best practice", og at kode ikkje berre skal virke, den skal også vere robust, vedlikeholdbar og lett å forstå.

Serverne som kjører JavaZone sine systemer er provisjonert med Ansible. I denne erfaringsrapporten forteller vi hvordan vi har automatisert konfigureringen av miljøene, hva dette har gitt oss, og hvilke problemer vi har støtt på.
Det siste året har JavaZone sine systemer blitt flyttet opp i "ze cloud". Vi kan nå, med få tastetrykk, sette opp en brand spanking new server klar til å hoste systemene JavaZone avhenger av. Tiden da vi måtte holde orden på ssh-nøkler og konfigurasjonsfiler og "apt-get" ting for hånd er forbi. Ingen flere manuelle steg! Vi vil presentere hvordan Ansible har hjulpet oss, og si noe om hvilke problemer vi har møtt på veien. Hvilken verdi gir det å provisjonere? Hvordan er Ansible sammenlignet med andre provisjoneringsverktøy? Hvilke ting kan det være greit å være klar over når en tar i bruk Ansible? Vi sitter ikke med alle svarene. Vi er godt fornøyd med hva vi har fått til så langt, men har fortsatt mye vi ønsker å forbedre. Vi ranter, ehm, deler våre erfaringer, og kommer med noen tips som har hjulpet oss på veien.
Senior codemonkey i javaBin.
Senior codemonkey i javaBin.

Vegvesenet er i ferd med å bygge et nytt system for innsamling av trafikkdata i sanntid basert på Akka, Elasticsearch og OPC-UA. Her får du en gjennomgang av prosjektet, arkitekturen, erfaringer som er gjort i forhold til de valgte komponentene, clustering, skalerbarhet og ytelse og noen løsninger på utfordringer vi har møtt underveis.
Vegvesenet har tusenvis av trafikkmålestasjoner over hele landet med sensorer som kan måle en mengde data om kjøretøyene som passerer, for eksempel hastighet, lengde og vekt. Nå skal disse passeringsdataene samles inn, analyseres og arkiveres i sanntid. Til dette formålet utvikles en helt ny arkitektur i Vegvesenet basert på Akka, Elasticsearch og OPC-UA. Systemet må kunne håndtere de store samtidige datamengdene som kommer inn fra alle målestasjonene og skal gi grunnlag for ulike sanntidstjenester for trafikksentralene og publikum samt lagre dataene for senere statistisk analyse - et perfekt case for horisontal skalerbarhet med Akka og Elasticsearch? Denne presentasjonen vil ta for seg arkitekturen som ble valgt og vise styrker og svakheter ved de ulike komponentene, erfaringene vi har gjort oss i forhold til clustering, skalerbarhet og ytelse og hvordan vi har kommet oss rundt en del av utfordringene vi har møtt.
Jan Fredrik Wedén jobber i BEKK og har over ti års erfaring som systemutvikler, konsulent og arkitekt. Han har jobbet med systemer i alle størrelsesordner, fra små enbrukersystemer, via små og mellomstore løsninger til moderne webapplikasjoner og komplekse integrasjonsprosjekter og distribuerte systemer. Han kom tidlig inn i prosjekter som benyttet smidige teknikker og har ivret for automatisering av utviklings- og utrullingsprosessen og bruk av relevante metrikker for å forvalte og forbedre kodebasen. Etter en kort periode med gammeldags ASP-utvikling i begynnelsen av sin karriere har Jan Fredrik siden bygget sin kjernekompetanse på Javaplattformen innen enterprise- og webprosjekter. Han var innom EJB den gangen det var skikkelig hot og byttet til lettvektsløsninger og IoC-rammeverk ettersom det overtok tronen som det kuleste man kunne drive med. Prosjekter har vært skrudd sammen fra manuell kompilering via Ant-spaghetti og enkle Maven-prosjekter til automatiserte byggeservere som utfører og måler det meste. Han har jobbet med forretningssystemer og integrasjonsløsninger i bransjer som energihandel, bank/finans, utdanningssektoren og vegtrafikk. På fritiden har han stor interesse for bratt friluftsliv og er gjerne å finne på et fjell med ski under bena, klatrende i en fjellvegg eller syklende der motoriserte kjøretøy sjelden kommer frem.

Sjakk Programmering er en veldig sær hobby! Hva får programmerings entusiaster over hele verden til å bruke store deler av fritiden på å lage sjakk motorer? I et internasjonalt miljø konkurrerer de om å lage den beste sjakk motoren med høyest rating og så la sjakkmotorene duellere mot hverandre i en online arena? Litt historie rundt miljøet og litt forklaring til hvordan man lager en femmenalt god sjakk motor. Litt råd og erfaringer. Er du interessert til å delta i et miljø for utvikling av sjakk motorer? Vil du bli med å starte et sjakkprogrammeringsmiljø i Norge, Oslo?
Sjakk programmering startet på begynnelsen av 1950 tallet og Alan Turing lagde det første fungerende sjakk program i 1953. Siden den gang har programmerings teknikker utviklet seg og maskinvare blitt tusenvis ganger raskere. I dette århundret klarer ikke lenger de aller beste å slå en data maskin i sjakk. Ved siden av sjakk har det også utviklet seg et miljø rundt programmering av sjakk computere, der programmerere lar sine sjakk motorer konkurrere med turneringer og rating lister. Hva er dagens beste sjakk program? Vi skal se litt på historien til sjakk programmering og deretter se litt på sjakk programmerings teknikker. En sjakk computer regner ut lovlige trekk, evaluerer stillingene og itererer over mot-trekk. Vi skal se litt på trekk generering, brett representasjoner og standarder slik som FEN, ZobristKey, Polyglot og test-teknikker som Perft/Divide som enkelt kan sjekke at man genererer riktige trekk. Et sjakk program evaluerer en stilling på grunnlag av brikke og posisjons verdier og noen få posisjoner i forhold til andre brikker slik som dobbel eller alene bonde. Iterering over stillinger skjer iterativt dypere med de beste trekkene. Itereringsteknikker slik som minimax forbedres med alphabeta og PVS pruning. Når kan man gi et riktig bilde av stillingens verdi, selvsagt ikke i midten av en brikke utveksling derfor itererer man videre til der ikke lenger er mulige utvekslinger (Quiescence). Der er caching teknikker slik som Transposition tabeller med double-key og cuckoo-hashing. Man spesial programmerer sortering av trekk med merge/insertion sort og killer-move slots. Til slutt tester man sitt program og får en ELO rating og kanskje deltar på CCRL sin arena. Hvordan har jeg tenkt å komme til topps på CCRL sin rating liste? Hvordan forbedrer man ytelsen med multi-threading? Hvordan er Java i forhold til C og Assembly? Er der interesse nok for at du ønsker å delta videre i et sjakk programmerings miljø i feks Oslo?
Java programmerings entusiast og selverklert data nerd, dvs en som gjerne bruker mye av fritiden til programmeringseksperimenter og av ektefelle blir betegnet som kjedelig og asosial.

Hvilke fordeler får vi ved å bytte til en moderne web teknologistack for "Min Bedrift" i Telenor?
Når vi skal modernisere en applikasjon kan vi enten gjøre dette gradvis, eller vi kan bytte den ut. Webapplikasjonen "Min Bedrift" i Telenor får nå et stort ansiktsløft. Med brukeropplevelse i fokus, bytter vi ut hele frontenden med en moderne stack basert på teknologier som Less, Grunt, HTML5, AngularJS, Git, og et REST basert grensesnitt mot backend. Vi fokuserer på hvorfor vi har valgt å bytte ut frontend, men i stor grad beholde eksiterende backend. Og forteller om hvilke muligheter de nye teknologiene gir for et prosjekt med 15-20 utviklere og distribuerte team på tvers av landegrenser.
Full-stack utvikler med erfaring fra flere store prosjekter. Han har i en årrekke vært en aktiv bidragsyter til Accentures fagmiljø, og er lidenskapelig opptatt av kodekvalitet, enkelhet, og det å utvikle mot en konsekvent og hensiktsmessig arkitektur.
Forretningsutvikler med lang erfaring fra utvikling av digitale flater i Telenor. Blant annet jobbet med sosiale medier og selvbetjeningsløsninger for både bedrifts- og privatmarkedet. Jobber ut i fra filosofien: «Det handler ikke om hva du lager, men hvordan du lager det».

Små touchbaserte enheter er fine for å konsumere innhold. Input er derimot ikke fullt så bekvemt. Jeg tar utgangspunkt i de siste prosjektene jeg har vært med på og ser på hvordan vi har løst disse utfordringene her.
Man oppnår mye med riktig bruk av html. Hvis man i tillegg til standard webskjema legger på en tilpasset brukeropplevelse basert på Javascript kan man oppnå mye. For å sikre at alle får en funksjonell løsning er det viktig å bygge spesialløsninger basert på prinsipper rundt feature detection og progressive enhancement. Forskjellige nettlesere har også hver sine måter de prøver å hjelpe brukeren på. Det er ikke alltid det er fornuftig med autokorrektur, eller at alle verdier du noen sinne har tastet inn i et felt skal huskes. Dette kan styres på feltnivå. Hvordan kan man gjøre det så enkelt så mulig å dytte inn den informasjon som trengs, og samtidig gjøre dette på en måte som fungerer på tvers av alle mulige typer enheter, nettlesere og skjermstørrelser?
Utvikler med forkjærlighet for mobile flater. De siste årene har jeg jobbet i bank og med hvordan man kan gjøre tjenester lett tilgjengelig for folk uavhengig av hvilken enhet man bruker. Hvis man gir mobil interaksjon litt kjærlighet, så trenger det ikke være så vanskelig å gå gjort alt man trenger å gjøre enten man er på farten eller ligger flat ut på sofaen.

Erfaringsrapport om iterative endringer fra én stor applikasjon til et skalerbart, distribuert system. Pantemaskinene er det spesielle med dette systemet. De sender fra seg ulike typer data og har forskjellig hardware, embedded software, konfigurasjon og nettverk. Sentrale egenskaper: Skalerbarhet, robusthet, driftbarhet og krav om å aldri miste data.
I 2007 utviklet Tomra en tre-lags web-applikasjon for å overvåke, administrere, og rapportere på et hundretalls stasjoner for å samle inn tomflasker og annet resirkulerbart materiale. Applikasjonen ble godt mottatt, og demonstrerte for Tomra en ny måte å samle inn data på. Da Tomra ønsket å videreutvikle denne applikasjonen for alle sine returpunkter, dukket det stadig opp nye behov, og endringer ble iverksatt. Etter noen få år hadde et tyvetalls utviklere jobbet på applikasjonen, og vi endte opp med alle de klassiske problemene som ofte plager tre-lags databasesentriske monolitiske applikasjoner. I dette foredraget vil vi presentere konkrete erfaringer gjort i det vi har radikalt endret arkitektur for det som var en stor, monolitisk og databasesentrisk web-applikasjon. Systemet er nå distribuert i mange kodebaser og applikasjoner. Vi vil beskrive utfordringene med å gjøre disse endringene, og gevinstene vi oppnådde, samt hvilke nye utfordringer som dukket opp. Stikkord: Integrasjon med pantemaskiner, eventdrevet arkitektur, skalering, moderne teknologi (Neo4j, MongoDB, Http-endepunkter), pull-deployment, teknikker for å gjøre store, men trygge endringer.
Kim Christian har jobbet med pantemaskiner og tilhørende server-side systemer i 7 år. Han har vært med på å ta pantemaskinkommunikasjon fra analog dial-up til event-dreven kommunikasjon over TCP/IP og HTTP. Han har jobbet med alt fra å implementere proprietær krypto i pantemaskin kommunikasjonsprotokollen til å tune relasjonsdatabaser og 3-lags web-applikasjoner. Som tech-lead ledet han arbeidet med å ta Tomras nye back-office plattform fra monolitt til et stabilt og skalerbart distribuert system.
Erik brenner for arkitektur og utvikling på Java-plattformen. Han er spesielt interessert i komplekse og kompliserte problemstillinger som f.eks. distribuerte systemer som kommuniserer med hardware-dingser med krav til høy throughput, høy oppetid og lav latency. Erik er aktiv i community-miljøet i Oslo og tror OpenSource og deling av kunnskap er nøkkelen til å bli flink. Han er nestleder i Oslo Software Architecture meetup, medlem i Programkomiteen for JavaZone 2014 og er ellers ofte på Teknologihuset for å høre på eller holde foredrag. Erik er utdannet sivilingeniør data fra NTNU og har jobbet som konsulent siden 2007. Han jobber nå som sjefskonsulent for Altran.

Datomic, Clojure, Paredit, Facebook React. I denne presentasjonen skal vi snakke om å drive med data, i stedet for å drive med objekter og andre muterbare ulumskheter.
Webappene våre tar imot data, putter data i databaser, og returnerer data tilbake til brukerne. Kode er data. Når du skriver Lisp er dette åpenbart, men kode er data i alle programmeringsspråk. Brukergrensesnitt er data. Ofte enkodet i en objekt-graf, men likefullt data. Dette er en presentasjon om data-drevet programmering. Du vil lære hvorfor alt er immutable i Clojure. Du vil lære hvorfor Facebook React gjør det lett å drive med data i nettleseren. Du vil lære hvorfor du er pokka nødt til å lære deg Paredit. Du vil også lære at databaser ikke nødvendigvis trenger å være global muterbar state, den kan også være bare ren data (som aldri endrer seg), tro det eller ei.
Jeg er en konslulent som jobber i Kodemaker [1]. For tiden sitter jeg hos NSB og lager et system for å håndtere såkalte oppståtte avvik. Tidligere har jeg laget hele to systemer i Clojure (for ekte kunder!). Jeg jobber mest med webapper, både backend og frontend. Jeg skriver om funksjonelle databaser på http://dbs-are-fn.com/, og kan snakke i timesvis om immutability. [1] http://kodemaker.no

Virtuelle utviklingsmiljøer har blitt et de facto verktøy, men ytelse er fortsatt et ankepunkt. Med disse enkle (dog obskure) grepene kan vi snu problemet på hodet og få både høy fleksibilitet og høy ytelse på utviklerplattformen.
Gitt et "enterprise" standalone utviklingsmiljø med tung appserver, database, esb mm går det gjerne ikke så raskt om man kjører det på en laptop, og desto verre om det er inni en virtuell maskin. Imaget som utviklingsmiljøet ligger på kan like gjerne skrives til disk, og bootes "native". Driftsavdelingener benytter seg ofte av dette for å "tanke" maskiner, men det i seg selv gir ingen fleksibilitet. Med VirtualBox kan man fjerne skillet mellom virtuelt og native. Det virtuelle imaget kan konverteres til et disk-image, som skrives rett til en partisjon. Da kan man boote native på et eller flere slike images. I hvert image kan man lage "virtuelle" pekere til fysiske partisjoner, slik at man igjen kan boote disse i virtualbox. Man oppnår da at et utvalg utviklingsmiljøer til enhver tid er tilgjengelig både native og virtuelt.
Harald is a programming, technical architect who enjoys getting lost and finding a way in large, complex systems.

Oppsummerer svakheter ved hvordan vi vanligvis anslår usikkerhet i estimater og foreslår en bedre metode. Det vil bli kåret en norgesmester i estimering.
Estimater av utviklingskostnader er usikre. Studier viser at vi er enda dårligere til å angi usikkerhet enn vi er til å estimere. Vi trenger derfor bedre metoder for å angi usikkerheten. I presentasjonen oppsummerer vi resultater fra flere undersøkelser om svakheter i hvordan vi kommuniserer og håndterer usikkerhet. Undersøkelsene viser et stort behov for å klargjøre hva vi mener med estimater og hvor usikre disse er. De viser også at manglende kunnskap om hvordan man adderer usikre estimater trolig er dette en viktig kilde til overskridelser og at usikkerhetsintervaller (minimum-maksimum intervaller) stort sett er alt for smale. Selv når vi sier at vi er ”svært sikre” på å ikke gå over et maksimum-estimat så er det likevel ofte 30-40% sannsynlighet til å faktisk overskride maksimum. Vi har utviklet en metode som gir mer realistiske usikkerhetsestimater og presenterer erfaringer med denne. Metoden beskriver usikkerheten til et prosjekt basert på faktiske utfall i en referanseklasse av prosjekter likt det som estimeres. En kritisk suksessfaktor for metoden er tilgang på gode erfaringstall, og vi komme inn på hvordan man kan fremskaffe dette. I siste del av presentasjonen vil vi avholde NM i estimering, der den med best kunnskap om estimering i IT-prosjekter vil få tittelen norgesmester i estimering, en pokal og et gavekort på en bedre restaurantmiddag.
Arkitekt i Scienta AS. Er opptatt av at kundene skal få størst mulig avkastning på IT-investeringene.
Forsker og rådgiver innen kostnadsestimering. Jobber ved Scienta, Simula Research Laboratory og Universitetet i Oslo. Brenner for evidensbasert systemutvikling.

Denne lyntalen er myntet på deg som enten nettopp har startet å bruke git, eller som har brukt det en stund men uten gjøre noe særlig mer enn å pulle, committe og pushe. Bruker du sjelden eller aldri komandolinja, men skulle ønske du kom deg over terskelen for å gjøre det? Eller kanskje du begynner å bli lei av å bruke musa? Da kan disse 10 minuttene være akkurat den drahjelpen du trenger. Her blir det i hovedsak live "koding" med eksempler på git kommandoer du kan risikere å bli avhengig av!
Git blir stadig mer utbredt. Det de aller fleste har til felles er at de har gått fra et versjonshåndteringssystem til et annet. For min egen del så gikk jeg over fra svn til git for ca 5 år siden, og jeg syntes overgangen var stor. Plutselig hadde man et hav av muligheter, noe som i starten føltes litt skremmende. De senere årene har verktøystøtten blitt veldig mye bedre, og man kan gjøre det meste uten å røre kommandolinja. Jeg er redd dette også fører til at stadig flere bruker mindre av den funksjonaliteten som finnes i git. Målet med lyntalen er å vise når og hvordan man kan og bør bruke både kommandolinja, ide'en (i mitt tilfelle Intellij IDEA) og SourceTree på en fornuftig måte. Jeg vil også vise hvilke git kommandoer jeg bruker i det daglige, og eksempler på hvordan du kan lage enkle script for å gjøre flere git kommandoer i sekvens.
Jeg har brukt git de siste 5 årene og lærer stadig noe nytt! Jeg er genuint opptatt av å gjøre ting på en effektiv måte, og det formelig klør i fingrene når jeg ser utviklere bruke musa "halve dagen". Jeg ønsker å vise hvor lite som faktisk skal til for å bli mye mer effektiv, uten å bruke musa!

Offentlige instansfelt! Er det EN TING vi har lært, så er det at offentlige instansfelt IKKE ER LOV. Og DTO-er? Sånt går bare ikke an lenger. Hva skjer om vi med kaldt overlegger gir blaffen i begge deler, og kjører på? Advarsel: Denne lyntalen handler om Java.
DTO-er er fy-fy, iallefall er de blitt det nå, og innen JavaZone 2014 åpner dørene er de antagelig blitt straffbare. Offentlige instansvariable har vært fy lenge, og i land som bare er litt strengere enn her hjemme kunne man antagelig innført fingerkapping for udåden. Så hva om vi slår sammen disse praksisene og lar dem systematisk gjennomsyre hele serverside-arkitekturen? Da får vi neste generasjon DTO 2.0, eller D2O! Der alle felt er offentlige! Hva skjer da? Jo, vi som er på serversiden får et naturlig grensesnitt mot utenomverdenen. Der ute snakker de ofte JSON, eller andre lignende strukturer. Vi får et gjennomsiktig serialiserbart dataformat, som kan tjene som meldingsformater, eller som super-enkel speiling av databasen din. Vi får nye måter å manipulere, validere, sammenligne og simpelthen bare se på dataene våre. Typene våre kan flyte sammen, uten at vi mister kompilatorens vaktsomme blikk, og vi får objekter som gjør én ting og bare én ting: Beskriver og dokumenterer et API. Vi får, kort sagt, tilbake det våre forfedre kjente som data, og elektronisk databehandling, og det uten å måtte lære opp alle i Clojure. EDB – idag staves det IKT, imorgen staves det D2O, og uttales Dee Two Oh! (På engelsk iallefall.)
Har utviklet Java siden new Date().equals(new Date()) var usant. Erfaring med mye rart siden da, bla. helt andre språk. Jobber for tiden i Scienta, og sitter i JavaZones programkomite, som antagelig er eneste måte å snike slik vranglære ut til massene.

Elm er et funksjonelt språk som kompilerer til HTML, CSS og JavaScript. Designet for Functional Reactive Programming har språket som mål å gjøre utvikling av interaktive web-applikasjoner til en lek. Kom og se hva du kan (og ikke kan) gjøre med Elm.
Elm er et funksjonelt programmeringsspråk for weben som kompilerer til HTML, CSS og JavaScript. Målet er å gjøre det enklere å utvikle interaktive brukergrensesnitt på weben, da språket fjerner mye detaljer for utvikleren som man må forholde seg til i tradisjonelle språk som Javascript. Elm er skrevet i Haskell og er designet for såkalt Functional Reactive Programming (FRP), et paradigme som egner seg utrolig godt til å skrive svært interaktive web-applikasjoner med en deklarativ programmeringsstil. I denne lyntalen vil jeg gi en introduksjon til Elm, hvorfor det ble laget, og hvilke problemer språket prøver å løse. Videre vil jeg gi en intro til hva FRP er, og spesielt hvordan dette er implementert i Elm gjennom såkalte signaler. Til slutt vil jeg vise eksempler i Elm som forhåpentligvis gjør at du også får lyst til å teste ut Elm. Denne lyntalen garanterer livekoding og masse visuelle eksempler. Kom og se hva du kan (og ikke kan) gjøre med Elm.
Henrik Wingerei jobber i BEKK hvor han har jobbet som Java-utvikler i 2 år. Henrik er medlem i faggruppen Programmeringsspråk hvor han har jobbet mye med alternative språk og paradigmer. Henrik er overbevist om at man ved å lære seg andre språk, også vil bli bedre i sitt "eget" språk. Henrik har tidligere holdt foredrag på både JavaZone og meetups.

Vi skal ta en reise gjennom de største hendelsene gjennom tidene, hvordan du ble til og hvordan du kan være en gentleman.
Hendelser og hendelseshåndtering er i vinden som aldri før. Men hva er det egentlig? Er det farlig? Eller en helt naturlig måte å kommunisere og forstå historien? Vi tar eksempel fra Java-verdenen, og tar en titt på et hendelsesdrevet alternativ.
Kari er en entusiastisk utvikler/arkitekt og kursholder med mer enn 10 års erfaring fra softwareutvikling. Hun er fagleder for Java i BEKK Consulting. Hun har planlagt, sendt og mottatt events i en rekke bransjer og formater. Hun er nysgjerrig på hvor konsepter kommer fra og hvordan ord former software.

Må javaløsninger være store, tunge og vanskelige å deploye og drifte? Neida, selv en omfattende webløsning med Java, HTML5 og JavaScript kan være lekende lett å håndtere. Jeg viser deg en lettvektsløsning som lever 100% i skyen. Den kjører på en PaaS, skalerer bra og kan deployes på kort tid uten at brukerne legger merke til det.
Jeg deler erfaringer rundt utvikling og drift av en moderne javaløsning som kjører på en PaaS med Java som backend og HTML5 og JavaScript som frontend. Løsningen er omfattende med betraktelig kompleksitet; likevel er den holdt enkel og lettvekts, skalerer bra og kan deployes med en git push uten at brukerne legger merke til det. Jeg introduserer løsningen og arkitekturen som består av en Spring MVC og REST backend på en embedded Jetty. Datalagring er i MongoDB. Frontend består av Backbone.js, Require.js, Mustache templates, HTML 5, CSS 3 og LESS. Fra første dag i utviklingen har alt utelukkende levd i skyen: kildekode på GitHib, bygget av Jenkins på CloudBees, alle miljøer på Heroku, all data fordelt på MongoLab, WebSolr og Amazon S3, og er overvåket med New Relic, Loggly og Logentries. Jeg forteller om noen av de fordeler vi har av skydriften og de verktøyer som ofte følger med for f.eks. logging, provisjonering, overvåking og backup. Underveis vil jeg komme inn på hvordan vi har bygget inn prinsipper fra "The Twelve-Factor App" (http://www.12factor.net). Dette er viktige prinsipper for at en applikasjon kan kjøre i skyen, og handler bl.a. om eksterne services som add-ons, stateless applikasjoner, share-nothing arkitektur og horisontal skalering. Etter foredraget vil du ha sett at det går an å lage en omfattende, men likevel lettvekts javaløsning, hvor alt kjører 100% skybasert. Hvor lett og ofte vi kan deploye til produksjon og opprette feature miljøer. Og ikke minst, hvordan Inatur med dagens løsning klarer presset ved klokkeslettbaserte tilbudsåpninger, som var en av hovedutfordringene tidligere.
Manager og fagleder i Bekk Consulting. Med på å drive javaBin i Trondheim. Har en M.Sc. i softwareutvikling fra ITU i hjembyen København. Mikkel er en utadvent og engasjert utvikler som elsker JVM'en og det rike utvalget av språk og biblioteker i Java-verdenen. Han har bred erfaring fra utvikling av skybaserte løsninger og rike webapplikasjoner. Mikkel liker seg godt i Trondheim og den norske natur. På fritiden er han gjerne å finne på enten ski, terrengsykkel, eller fjellturer, og har sannsynligvis mer ski- og fjellutstyr enn den gjennomsnittlige nordmannen.

Dette er en workshop hvor vi fokuserer på de største og viktigste nyhetene i Java 8: Lambdauttrykk, Collections og det nye Stream-APIet. Workshopen er tre-delt hvor hver del består av en presentasjon av et tema etterfulgt av programmeringsoppgaver som deltakerne skal løse.
I workshopen starter vi med å lære lambda-syntaksen og hvordan lambdauttrykk passer sammen med funksjonelle interface og Single Abstract Method. Del to vil gå inn på funksjonelle begreper som filter, map og reduce og hvordan de brukes i det nye Stream-APIet og bruk av Optional. Siste del tar for seg andre nyttige metoder i Stream-APIet, parallelle- og uendelige strømmer og mer avansert Collectors-metoder. Etter workshopen vil deltakerne være kjent med lambda-syntaksen, vite litt om funksjonelle begreper som filter, map og reduce og kjenne til det viktigste i Stream-APIet. Det forutsettes ikke forkunnskaper i Java 8, men alle må ha med PC med Java 8 installert og en IDE med Java 8-støtte.
Bjørn er utdannet ved Universitetet i Bergen og har siden 2002 vært ansatt i Ambita. Han jobber for tiden som teknisk ekspert med fagansvar for Java og REST, men liker å utforske funksjonell programmering, Scala og Groovy på fritiden. Har siden juni 2013 vært med i ledelsen i javaBin Bergen.
Utdannet ved Høgskolen i Bergen. Har drevet med software-utvikling siden 1996 og java-løsninger siden 2002. Jobber for tiden som konsulent fra eget firma. Har de siste årene leflet med Scala, men håper java 8 skal gi litt av den samme boosten der man er bundet til java som språk. Har vært med på driften av javaBin Bergen siden starten i 2004.

En stegvis gjennomgang av et forslag til integrasjonsarkitektur. Vi begynner med blanke ark, og legger til ett og ett element, inntil vi har en komplett integrasjonsløsning. For hvert steg bruker vi konkrete eksempler for å se hva vi oppnår ved å legge til elementet.
Hvorfor er integrasjons så vanskelig? Hvorfor kan jeg ikke bare kjøpe en ferdig integrasjonsløsning? Hvor skal jeg begynne? Hva trenger jeg? Hva trenger jeg ikke? Hvor komplisert må en integrasjonsløsning være? Hvordan strukturere jeg en integrasjonsløsning? Denne lyntalen går igjennom et forslag til integrasjonsarkitektur, som har vært utgangspunkt for mange integrasjonsløsninger. Disse løsningene har vært av varierende størrelse, implementert med forskjellig teknologi, og laget for å løse forskjellige integrasjonsbehov. Gjennomgang vil kort, konsistent og konkret se på: Hvilke elementer en integrasjonsarkitektur kan bestå av. Hvilken nytte og hvilke utfordringer hvert element kan gi oss, og i hvilke situasjoner de gir en særlig verdi. Hvilke elementer som bør inkluderes fra første dag, og hvilke som kan legges til ved behov. Samt hvilke implementasjonsmuligheter som finnes for hvert enkelt element.
Arne har jobbet med arkitektur, design og implementasjon av integrasjonsløsninger i 17 år. Erfaring fra disse årene inkluderer: Dedikerte mellomvareløsninger. Store egenutviklede applikasjoner med mange integrasjonspunkter. Dyre, kommersielle mellomvareplattformer. Open Source integrasjonsplattformer. Rene Java integrasjonsløsninger. Han har holdt korte og lange kurs for selskaper som har hatt behov for å øke sin integrasjonskompetanse. Opplæringen har inkludert alle aspekter ved integrasjonsløsninger, med deltakere fra alle deler av organisasjonen. Arne er Cand.Scient. i informatikk fra Universitetet i Oslo, og jobber som sjefskonsulent i Embriq Consulting, der han er faggruppeleder for integrasjon og tjenestebasert arkitektur (SOA).

En workshop som gir en introduksjon til hva Docker er, og hva det kan brukes til. Vi kommer til å la deltagerene prøve ut de forskjellige delene av Docker, samtidig som vi forklarer hva de kan brukes til.
Workshoppen kommer til å gå igjennom en kort introduksjon til Docker, før vi går over på alle stegene som trengs for å produksjonssette en Java-applikasjon ved hjelp av Docker. Deltageren får prodsette en enkel applikasjon som kommuniserer med en database, som hver kjører i sin egen Docker-container. Krever installasjon av Vagrant og nedlasting av en virtuell maskin på forhånd. Dette er en halv-dags workshop.
Har jobbet med Devops og Java i BEKK, og spesielt på prosjekt hos Bring. Elsker å kunne prodsette flere ganger om dagen, og automatiserer så mye som mulig.
Utvikler med DevOps-tendenser. Tror veien til himmelen ligger i konfigurasjon som kode og hyppige prodsettinger.

En nyutdannet informatiker forteller om hvordan det er å jobbe som DevOps-utvikler på et stort integrasjonsprosjekt for Oslo Kommune. I dette prosjektet er det vanlig å prodsette kode allerede første dag på jobb.
Integrasjonsprosjektet i Oslo Kommune består av en plattform med mikrotjenester. Dette gjør at det er lett å drive utvikling uten å nødvendigvis ha innsikt i alle tjenestene. Pull requests mot en lokal Github-instans legger grunnlaget for effektiv QA av all kode som skal ut i produksjon. Deployment uten nedetid gjør at komponenter kan prodsettes når som helst. I denne lyntalen fortelles det om hverdagen for en fersk utvikler i et slikt prosjekt.
27 år gammel mann fra Sandnes, mastergrad i bioinformatikk fra Universitetet i Oslo. Har jobbet med medisinsk informatikk på Radiumhospitalet, og er nå konsulent i Knowit. Brenner for funksjonell programmering og begripelig kode.

Erfaringer, råd og anekdoter fra et av norges eldste Scala-prosjekter.
De siste fem årene har et team hos Knowit benyttet Scala som hovedprogrammeringsspråk. Teamet har utviklet et tosifret antall løsninger, fra enkle web-portaler og saksbehandlingsløsninger til autentiseringsløsninger og relativt kompliserte styringssystemer. Teamet har variert i størrelse fra 2 til 6 personer, og totalt har 15 utviklere vært innom teamet til nå. Foredraget vil gi verdifull innsikt i et av norges eldste Scala-prosjekter og tilhørerene vil få erfaringsbaserte råd de kan ta med hjem til egne prosjekter. Foredraget gir en oversikt over hvordan vi benytter Scala og noen få open-source rammeverk til å lage smidige og vedlikeholdbare systemer. Vi vil se på hvilke fordeler vi mener å ha oppnådd sammenlignet med tilsvarende Java-utvikling, som for eksempel bedret vedlikeholdbarhet og færre bugs. Men vi tar også opp baksiden av medaljen, problemstillinger vi kanskje ikke ville hatt i java. Til sist snakker vi om hvordan det har vært å benytte et programmeringsspråk som var lite kjent i organisasjonen da vi startet, og forklarer hvordan vi har løst utfordringer knyttet til opplæring av nye team-medlemmer, valg av rammeverk og byggeverktøy, etc.
Sigmund har jobbet som konsulent i Knowit siden januar 2007, og før det et par år i forskningssektoren. Siden august 2011 har han vært teamleder for Knowit’s største Scala-prosjekt. I tillegg til å være en lidenskapelig Scala-fanboy, setter Sigmund også pris på andre teknologier som gjør systemutvikling enkelt og greit. Han avskyr unødvendig kompliserte løsninger. Ved siden av konsulentrollen jobber Sigmund som pardansinstruktør på kveldstid, og bruker alt for mye tid på spill og øl.

Luksusfellen har blitt benyttet som en metafor for teknisk gjeld ved flere anledninger tidligere. Men da som oftest knyttet opp mot gjeld/kredittkort og ubetalte regninger. I denne lyntalen har jeg valgt en litt annen vinkling, og spør hva vi som foreldre/tech-lead kan gjøre?
Lyntalen er inspirert av en episode fra Luksusfellen på tv3 hvor moren gjør sønnen en bjørnetjeneste ved å hjelpe sønnen med den stadig voksende gjelden. I episoden får sønnen hjelp til å ta ansvar for egen økonomi og gjeld, og ikke løpe til mamma hver gang det dukker opp et nytt problem. Jeg ønsker med denne lyntalen og rette fokus på tech-leadens rolle, og hva denne personen kan gjøre for å begrense den tekniske gjelden i teamet/prosjektet. Tech-leadens viktigste oppgave er å være et forbilde og en foregangsmodell som de andre ønsker å følge. Han eller hun skal ikke nødvendigvis være utførende på alle oppgaver, men coache de andre deltagerne.
Jeg er en Java-utvikler/arkitekt med 13 års erfaring fra ulike prosjekter og bransjer. Jeg brenner for et godt håndtverk, gode løsninger som gir verdi til sluttbruker, og er ofte å finne på en av de mange gode Meetupene her i Oslo. Har holdt flere lyntaler tidligere på både JavaZone og Smidig med fokus på god kode, teknisk gjeld, applikasjonsarkitektur m.m. Til daglig jobber jeg som seniorkonsulent hos WebStep.

Ved å følge prinsippene for progressive enhancement får vi mulighet til å bruke det siste innen HTML5, CSS3 og Javascript samtidig som vi er garantert at nettsiden vår fungerer på eldre nettlesere. I denne lyntalen skal vi se nærmere på hvordan vi kan bruke Node.js til å parallelt tilby brukeren en ren HTML versjon og en JS støttet versjon av web-siden vår.
Er du lei av å bruke tid på å støtte eldre IE versjoner på nettsiden din? Ønsker du å benytte deg av de siste web-teknologiene, samtidig som du gir en god brukeropplevelse for alle? Vil du at brukeren skal kunne interagere med nettsiden med det samme den er lastet fra server, uten å måtte vente på at et hav av JS biblioteker laster? Progressive enhancement er en web-designstrategi som etterstreber å utvikle web-sider som fungerer på alle typer enheter, men som også gir deg mulighet til å benytte deg av de siste teknologiene på enheter som støtter disse. Ofte blir progressive enhancement web-sider delt inn i tre ulike lag: ett innholdslag i HTML, ett presentasjonslag i CSS og ett skript lag i Javascript. I denne lyntalen skal vi se hvordan man ved hjelp av Node.js enkelt kan konvertere en single page Javascript applikasjon, som er avhengig av Javascript støtte i nettleseren, til en applikasjon underlagt prinsippene for progressive enhancement. Vi skal gjøre dette med minimale endringer i koden og med en dramatisk reduksjon i lastetid for alle brukere.
Kittel er seniorkonsulent i Capgemini. Han har 5 års erfaring med utvikling av webapplikasjoner. For tiden jobber han mest med Javascript. Han er opptatt av å utfordre etablerte sannheter og finne nye måter å se på Javascript på.

Det finnes så mange roller i et IT-prosjekt. Det bemannes opp med prosjekteiere, prosjektledere, arkitekter, testere, Scrum-mastere, driftere, dba-er, programmerere – og ofte enda flere. Hver eneste en av disse bidrar til at prosjektene mislykkes, eller at de er unødvendig lite effektive. Bli kvitt dem. I ruinene etter apokalypsen sitter en fyr uten noe annet enn en laptop og full tilgang i produksjon. Det er han som skal sørge for at IT-prosjektene lykkes fra nå av. Han er "The Ultimate Developer".
Har du noen gang irritert deg over at en person med en annen rolle enn din egen har bestemt noe som er i strid med hvordan du selv mener jobben bør gjøres? For eksempel en arkitekt, en prosjektleder, en produkteier, en Scrum-master, en programmerer eller en driftsansvarlig. Har du noen gang tenkt at "om jeg fikk bestemme så...". Har du slått deg til ro med at "sånn er det bare" eller "siden alle mener det så har vel de rett"? Hva om alle andre tok feil og du hadde rett? Jeg vil kontemplere over hvorfor det store antallet roller er mer en hemsko enn et vellykket forsøk på ansvarsdelegering og utnyttelse av spisskompetanse. I foredraget vil jeg forsøke å vise hvorfor det er en hemsko, og også hvorfor vi har levd med den så lenge, og fortsatt lever med den. Jeg vil argumentere for at de eneste rollene som behøves for å få til vellykkede IT-prosjekter er den som skal tjene penger på det som lages, brukerne og "The Ultimate Developer".
Stein Inge is Practice Lead for Continuous Delivery and Devops at BEKK. He is a true Agile evangelist with 15 years of experience in both contributing to, and helping others to become better at producing excellent software together with demanding customers. He is also an experienced speaker at conferences and the founder of DevOps Norway Meetup.

På Java-siden har vi de siste årene sett et skifte mot forenkling - og ikke minst skepsis til etablerte rammeverk som Spring, Hibernate osv. Hvorfor trekke inn Spring bare for å instansiere objekter og få enkle transaksjoner til å funke? Samtidig har vi blitt tutet ørene fulle av Backbone, Angular, Ember og hva de nå heter - de ene JavaScript-rammeverket mer fantastisk enn det neste.
Eivind tar et skeptisk blikk på noen JavaScript-rammeverk han har vært borti - og viser hvor lett det er å skrive en del greier selv. Sammenligningen med Java og Spring og slående :)
Eivind er fagsjef for Java i BEKK. Han mener at programmering ikke er et håndverk man blir ferdig i utlært i - og oppdager stadig nye måter å lage enklere og ryddigere løsninger. Eivind er interessert i nye og gamle programmeringsspråk og paradigmer. Han bruker gjerne kvelden på å prøve ut ting han ikke rakk i løpet av dagen. Eivind har holdt presentasjoner på mange tidligere JavaZone konferanser - dette blir det 3. året på rad hvor han snakker om erfaringer knyttet til modernisering av datasystemer hos Skatteetaten.

Hvordan FINN bruker SOLR, Elasticsearch, Cassandra og Kafka til å matche 10 millioner koblinger pr dag mellom brukerenes lagrede søk og annonser som legges inn. Tidligere fikk du en epost om morgenen, nå kan du få varsel på din telefon sekunder etter at annonsen legges inn.
På FINN har brukerne lenge hatt muligheten for å lagre søkene sine til senere bruk, samt få daglig e-postvarsling på dette. Med inntog av nye enheter med mulighet push-varslinger ser vi at daglig varsling tilhører fortiden og har laget et system for å varsle brukerne mer eller mindre øyeblikkelig. Prospective search, alert, percolate, lagrede søk. Kjært barn har mange navn, men få implementasjoner. I vår søken fant vi veldig få referanser til hvordan dette kan gjøres med SOLR-indekser. Vi bestemte oss tidlig for at Elasticsearch' implementasjon (percolate) hadde mye bra ved seg, men det var ingen opsjon å bytte ut vårt primære SOLR-søk med Elasticsearch. Videre var det nødvendig med mange tilpasninger for å få systemet til å yte de volumene FINN har, spesielt på antall lagrede søk. Vi har laget en hybridløsning hvor oversetter mellom SOLR, FINN's eget søkeformat og ElasticSearch. Systemet lytter kontinuerlig til annonsetilgangen på hele FINN, og matcher dette opp mot alle brukernes totalt ca 600.000 lagrede søk. Treff pushes videre til FINN-strømmen, mobile enheter og epost. Presentasjonen vil gå gjennom løsningen i detalj, fra initielle betraktninger, via arkitekturen og implementasjonen, til testimplementasjoner og en betraktning av hva vi synes er bra og mangelfullt ved løsningen.
Fredrik har over 15 års erfaring med softwareutvikling hvorav 10 med søk. Han var med og starte opp aksjehandelstjenesten Stocknet, jobbet i FAST med implementering hos kunder, og har tilsammen jobbet med søk i FINN i 6 år. Fredrik brenner for å se nye måter å bruke søketeknologi på, og synes at noe av det mest spennende har vært nettopp å lage denne løsningen for prospektive søk i FINN. Når han ikke jobber med søk liker han å fotografere og bygge (og fly/kondemnere) quadcopters.

Hvorfor unødig tilstand gjør koden din dårlig, og hvordan unngå det med bare noen få enkle tommelfingerregler.
Lambdaer er fint, men man glemmer ofte den andre store lærdommen fra funksjonell programmering: tilstandsløshet. I denne lyntalen vil jeg argumentere for kostnadene ved unødig tilstandsfull kode, og vise med eksempler hvordan man med enkle grep kan kode i en mer tilstandsløs stil i helt vanlig Java, at det er minst like lett, og at koden blir bedre. Jeg fokuserer på pragmatiske, billige og lett forståelige tiltak, og det blir ingen funksjonell purisme, sære tredjepartsbiblioteker eller kryptisk syntaks.
Joachim Lous har 18 års erfaring som forsker og utvikler, spredt på en rekke språk og plattformer, men det meste av tiden med Java som hovedspråk. De siste 5 årene har han jobbet for Steria, på noen av landets største smidig-prosjekter. Brenner blant annet for brukervennlighet og clean code, som han anser som to sider av samme sak.

Lurer du på hva iBeacon er for noe? Og hva du kan bruke det til? iBeacon er Apples nye protokoll for kommunikasjon og mikrolokasjon over Bluetooth. Sannsynligvis går du allerede med en dings i lomma som kan både oppdage og fungere som en iBeacon. I denne lyntalen gir vi deg en rask innføring i teknologien, og viser deg hvordan du enkelt selv kan sette opp en iBeacon og lese den med din smarttelefon.
Denne lyntalen vil forsøke å gi tilhørerne svar på spørsmålene “hva”, “hvorfor” og “hvordan” rundt Apples iBeacon-protokoll. Apple reklamerer selv med iBeacon som en teknologi for å utvide lokasjonstjenestene i iOS, og har allerede begynt å bruke den i sine butikker. Med iBeacon kan man utvikle inndørs lokasjonsbaserte tjenester med stor grad av presisjon, og anvendelsene strekker seg fra varehandel til automatisering av hjemmet. Vi skal i tillegg til å fortelle hvordan teknologien fungerer, fortelle om eksisterende anvendelsesområder og skissere noen fremtidige. Vi skal vise deg noe av den hardwaren for iBeacon som finnes i dag, samt fortelle deg hvordan du kan bruke smartelefonen din som iBeacon til testing og utvikling. Videre skal vi fortelle litt om noen av de ulike leverandørene av både dingser og rammeverk, og vår erfaring med dem. Vi vil også gi en live demo av både muligheter og begrensninger med iBeacon. Til slutt vil vi gjerne vise hvor lite kode som skal til for at du selv kan komme i gang, og vi håper dermed å inspirere deg til å dra hjem og lage noe kult!
Hans Olav har en spesialisering innen algoritmer og grafikk og har jobbet i over syv år med utvikling av applikasjoner brukt til modellering og tolkning av oljereservoar. I 2012 tok han steget over i en ny tilværelse som fulltids mobilutvikler. Fokus på ny teknologi og engasjerende brukeropplevelse var viktige motivasjonsfaktorer. Stor stas den gangen, stor stas fremdeles.
Anders er en frafallen matematiker som har jobbet med systemutvikling som konsulent i 10 år, nå som seniorkonsulent i Knowit. Han har kodet mye på backend, men jobber gjerne i hele stacken og er for tiden interessert i mobilteknologi.

Hold presentasjoner på en helt ny måte! Jeg viser deg hvordan du kan bruke moderne webteknologier til å ta presentasjonene dine til et helt nytt nivå!
Nye og gamle webteknologier gir oss mulighet til å gjøre ting med presentasjoner som vi tidligere knapt kunne forestille oss! Live tilbakemeldinger fra publikum, live videokonferanse i slidene, animert 3D… mulighetene er grenseløse!
Passionate programmer who likes using technology to do quirky stuff to make everyday a little easier and a little more… weird.

Hvordan vise 3D-grafikk på web? Med denne presentasjonen vil du få innsikt i hva det er mulig å få til ved hjelp av WebGL i en moderne nettleser - også på iOS plattform. Samtidig får du praktiske tips om hvordan du kan strukturere koden din, spare tid i feilsøkingen og få god ytelse.
Presentasjonen vil gi en introduksjon til 3D-programmering, mer spesifikt i WebGL. Hensikten er å vise hvor enkelt det er å bruke nettleseren som plattform til å vise avansert 3D-grafikk med full hardware-aksellerasjon. Samtidig vil nybegynnere få hjelp til å komme i gang med et godt basis oppsett for utviklingsmiljøet sitt - og innspill til hvordan man kan gjøre feilsøking i et ellers komplekst og lite intuitivt programmeringsmiljø hvor man blant annet må skrive C-lignende kode uten støtte for hverken syntakssjekk eller logging og debugging. I presentasjonen vil det bli vist hva som er state-of-the art innen 3D-grafikk, og også hvordan man bygger opp en applikasjon - fra et helt enkelt Hello-World-nivå og opp til en godt strukturert løsning. Presentasjonen vil rundes av med fokus på praktiske hensyn man bør ta utenfor selve WebGL-koden, så som alternative 3D-biblioteker, hvordan man bør håndtere nettleserstøtte, og hvordan man bør tenke for å kunne flytte kode over fra webapper og til native applikasjoner.
Kristoffer Dyrkorn er Scientist i BEKK med lang erfaring fra store Java-baserte webløsninger. Ved siden av å være søkemotor-nerd er han spesialist på løsningsarkitektur, integrasjon og ytelsestuning. Han har en mørk fortid som 3D-programmerer, aller først i Pascal og 80286 assembly, og senere i OpenGL og C på Silicon Graphics maskiner. I moderne tid har han laget 3D-visualiseringer i WebGL av åpne data fra Statens Kartverk.

De fleste av oss bruker TODOs ofte, uten vi nødvendigvis tenker så mye på hvordan vi burde gjøre det. I beste fall kan TODOs kommunisere viktige ting for teamet, og øke kvaliteten av koden. I værste fall kan de skape mye forvirring og irritasjon. Så spørsmålet er, hvordan skal man bruke TODO's for få mest mulig ut av dem?
Har du noen gang vært i et prosjekt hvor kildekoden er full av uklare TODOs, som ligger der uten at noen egentlig vet hvorfor de er der? Har du noen ganger opplevd TODOs som skaper bare forvirring, eller irritasjon? Noen ganger sett TODOs som peker på en 5 år gammel JIRA-sak? Eller som er utkommentert? Eller som sier "fix me"? Hvis du synes dette høres kjent ut, så kan denne lyntalen være noe for deg. I denne presentasjonen skal jeg først vise noen veldig merkelige (eller morsomme) TODOs fra virkelige prosjekter, deretter belyser jeg grunner til det, hvorfor TODOs så ofte misbrukes, og konsekvenser av dette. Til slutt viser jeg noen enkle tiltak som kan hjelpe teamet ditt til å få mer ut av TODOs, og øke verdien til prosjektet istedetfor å skape forvirring og frustrasjon. Og forresten, visste du at det også finnes nokså skumle TODOs i kildekoden til Oracle sin Hotspot JDK (og de har vært der lenge)?
Senior utvikler i Kantega. Alltid ute etter nye, enklere eller bedre måter å gjøre ting.

I fjor høst startet et integrasjonsprosjekt med felles datamodell og tjenestebuss som utgangspunkt. Ett år senere har vi lyst til å til å dele erfaringer med hva som gikk bra og hva som gikk åt skogen. Stikkord: Mule, felles domenemodell, mikrotjenester, integrasjon.
Mens gode prinsipper for tjenesteorientering holder stikk, er behovet for en altomfattende tjenestebuss mer tvilsomt. Produktet byr gjerne på mer kompleksitet enn enkle løsninger på praktiske problemer, og blir gjerne anskaffet før man egentlig vet hva man trenger. Vi ser på hvordan Mule preget løsningen og manifesterte seg i konsepter man kunne vært foruten. Videre ser vi på hvordan overgangen til mikrotjenester gav en vesentlig forenklet arkitektur som fortsatt holder tjenesteorientert tankegods i hevd. Tanken bak virksomhetsbrede domene-modeller er god, men blir fort problematisk. Konseptet drev frem kompleksitet i kodebasen, og vi viser hvordan splitting til sub-domener med konsistente vokabular (bounded contexts) ble en mer farbar vei.
Utvikler i JPro. Jobbet med integrasjon og utvikling de siste ti årene.

UiO har utviklet en applikasjon for datainnsamling over nett, som nå brukes til innsamling av ekstremt sensitive data. Denne lyntalen oppsummerer viktige valg som er gjort for å holde sikkerheten på et høyt nivå samt skalere for flere hundretusen besvarelser.
Nettskjema er en egenutviklet Java applikasjon bygd på spring/hibernate/Freemarker/Jboss/Oracle. Applikasjonen brukes for all type datainnsamling og påmeldinger på UiO. Forskningsmiljøer på UiO, spesielt innen medisin og psykologi, har lenge sett behovet for å kunne samle inn store datamengder av høy sensitiv art. For at forskningen skal kunne foregå over lengre tid, er det ofte et ønske å koble data mot sykehusregistre og følge utviklingen til enkeltpersoner i etterkant. Det er også et behov for å kunne levere data fra hvilken som helst enhet (nettbrett, telefon, PC etc.) fra hvor som helst i verden. USIT lanserte i april 2014 en løsning der forskere kan la respondentene logge inn via IDporten til DIFI, svare på et skjema som PGP-krypteres og lagres i Tjeneste for sensitive data (TSD). TSD er et tilbud til alle Universiteter og Høyskoler i Norge og består av en intern infrastruktur på eget sikkert nett. Løsningen med Nettskjema og TSD vurderes som ekstremt sikker og skalerer til flere tusen samtidige innleveringer på alle typer enheter og nettverk. Denne lyntalen oppsummerer de tekniske valg som er gjort for å kunne holde det høye nivået av sikkerhet, skalerbarhet og brukervennlighet som løsningen idag tilbyr.
Dagfinn Bergsager er gruppeleder for webutvikling på sentral IT på UiO (USIT). Han er utdannet ved IFI på UiO og har lenge jobbet med løsninger for datainnsamling til forskning på UiO.

I store organisasjoner som driver programvareutvikling vil det alltid foregå mange utviklingsaktiviteter i parallell og for å oppnå kontroll implementerer organisasjoner ofte standarder innen teknologi. Spørsmålet er hvor stor grad av teknologistandardisering er egentlig hensiktsmessig?
I en stor organisasjon med mange utviklingsprosjekter sier magefølelsen at man må styre, ellers har man ikke kontroll og det blir kaos. En måte å styre på er å definere standarder for hva man har lov til å bruke av teknologi. Kjent og styrt teknologi betyr at man kjenner konsekvensene av den teknologien man bruker, dets styrker og svakheter. Man har (i hvertfall en opplevd) kontroll på risiko. Men hva skjer i praksis? Har du noen gang opplevd effektiv standardisering av teknologi som ikke er til hinder og som har gitt målbar effekt? Motpolen til standardisering er å la prosjektene velge fritt og bruke den kompetansen de har til å utvikle løsningene sine effektivt. Og hvorfor ikke, dette sklir jo ut uansett, bare prosjektene blir store nok så gjør de som de vil. Og det er kanskje ikke så dumt? Alle utviklere har lyst til å være effektive. Man vil benytte teknologi som passer til den oppgaven de er satt til å løse og man vil levere verdi. I denne lyntalen vil jeg presentere en måte å gjøre teknologistandardisering som både gir utviklingsprosjektene spillerom til å være effektive, samtidig som det langsiktige forvaltningsperspektivet ivaretas.
Morten jobber som konsulent i Miles og er fagansvarlig for arkitektur. Han har lang erfaring som arkitekt fra en rekke store selskaper og er opptatt av å se løsninger og prosesser i sin helhet. For Morten er det viktig at teknologi og løsninger skal komme av et forretningsmessig behov. Forvaltning av løsninger har en spesiell plass i Mortens hjerte!

Hvorfor er det en god idé å la teven din bruke ultralyd til å snakke med Android- mobilen din? Med ultralydteknologi kan vi oppdage og sikkert bevise at et sett av devicer befinner seg i samme rom. Vi skal forklare deg hvordan, og grave oss ned i signalbehandling og problemer som må løses for å få ultralydkommunikasjon til å virke.
Datamaskiner og andre dingser bruker gjerne kabler eller radiobølger til å snakke med hverandre, mens folk pleier å basere seg på lyd. Derfor er vi vant til lydens egenskaper; når vi lukker døra forventer vi litt privatliv. Radiobølger respekterer ikke disse grensene, de går rett gjennom gulv, vegger og lukkede dører. Men hva om vi lar dingsene bruke lyd til å snakke med hverandre, akkurat som vi gjør? Smarttelefoner og PCer har jo høyttalere og mikrofoner uansett, og hvis de bruker ultralyd vil de ikke forstyrre oss mennesker! Denne teknologien kan brukes til alt fra å forbedre innlogging i nettbanken til å dele presentasjonen i dette foredraget. Vi skal se på utfordringer rundt akustikk, modulering og koding, og vise hvordan de kan løses. Vi kommer til å spille en del lydsignaler og vise en android-demo, ja du kan til å med få se presentasjonen på din egen dings hvis du har med deg en.
Ragnvald har jobbet med programvareutvikling i 15 år, de siste 8 i Tandberg og Cisco med videokonferanseprodukter. Han behersker mange språk, deriblant Java, C, C++, Python Objective-C og portugisisk. Han gløder opp hvis du snakker om vannski, paragliding, algoritmer, toppturer, wakeboard, kiting, snowboard eller været.

Lambda og streams er ikke bare syntaktisk sukker men åpner opp for et helt nytt tankesett i Java. I denne lyntalen ser vi på ett enkelt kodeeksempel og viser hvordan dette bedre løses i Java 8.
Ofte uttrykker Java-kode HVORDAN et problem er løst, mens HVA problemet faktisk er ofte er vanskeligere å forstå ved bare å lese koden. Med Java 8 streams og lambdauttrykk så kan vi endelig snu på dette, slik at intensjonen er tydelig uttrykt i koden, mens både utvikleren og den som leser koden slipper å forholde seg til implementasjonsdetaljene. I eksemplet ser vi hvordan man kan gå fra eksterne til interne iteratorer og bruke patterns fra funksjonell programmering for å oppnå robust og lesbar kode.
Utvikler og arkitekt med 25 års erfaring, de siste 14 hovedsakelig innenfor Java. Konsulent i Bouvet. Forsker på slekta i den mørke halvdelen av året, og leter gjerne geocacher i den andre.

Vi har alle vært der. Man må vurdere om man skal kaste gammel programvare fordi han som skrev koden pensjonerte seg for noen år siden og er veldig dårlig dokumentert. Men er det et spørsmål om å kaste alt og starte på nytt? I denne lyntalen presenterer jeg noen tips og triks for å gjøre om din legacy kode til å bli moderne og endringsvillig igjen.
Å ta i kode som du ikke kjenner eller ikke er testet er nesten som å be om problemer. Du vet at det kommer til å brekke og det kommer til å skje på verst tenkelig tidspunkt. I denne lyntalen vil jeg gå igjennom noen verktøy som alle utviklere bør ha i verkøykassen og noen forslag på hvordan man sakte men sikkert over tid kan få gammel kode til å blomstre igjen. Jeg kommer til å snakke om målingsverktøy, hva slags tester man bør skrive og hvordan gjøre ting som å bytte ut databasen.
Smidig entusiast med lang konsulenterfaring.

Tingenes Internet - eller Internet of Things - er et av de mest hypede trendene akkurat nå. Utfordringen er å forstå hva som er hype, og hva som virkelig kan gi verdi. I tillegg er det en rivende teknologisk utvikling, med mange aktører som "kapper land". Nye allianser inngås hele tiden. Fagsystemer kan også dra nytte av denne utviklingen, under helt andre forutsetninger. Du kan få forståelse for alt dette gjennom å prøve deg på litt hobbyelektronikk og noen enkle standarder og verktøy som MQTT og Node.red, som er ypperlig for å drive prototyping av Internet of Things systemer i bedrifter. Du vil dermed kunne få idéer til hvordan du kan involvere fysiske sensorer og indikatorer for å øke utstrekningen og verdiene av de fagsystemene du jobber med.
Først vil jeg gjennom en liten science-fiction fortelling vise hvordan IoT virkelig kan tjene oss i fremtiden. Og vi har en vei å gå innenfor sikkerhet, forretningsmodeller, personvern og standardisering før vi kommer dit! Så går jeg over til å beskrive de mest lovende teknologiene og standardene, før jeg viser en live demo med en en sonar, Arduino, Raspberry PI, node.red MQTT, en snakkende hodeskalle, sensorer og Minecraft! Jeg kommer til å gå detaljert gjennom MQTT og Node.red - teknologier som blant annet brukes av IBM for å raskt kunne lage prototyper på Internet-of-things prosjekter for store bedrifter. Dette kan være relevant for deg, da de fleste konsulentselskaper og firmaer etterhvert vil komme borti tingenes internett. Jeg kommer til å vise meldingsflyt, kildekode og hvordan du selv kan komme i gang. Og om du rekker det, kan du i likhet meg meg lage en liten animatronics-velkomst som skremmer barna på Halloween...
CTO i Bouvet Oslo, mangeårig programmerer, stifter av bevegelsen "Lær Kidsa Koding!" og medlem av Østlandsstyret i Dataforeningen. Jeg er varamedlem i instituttrådet for informatikk ved HIOA

Hva kan DU gjøre for å begrense den globale overvåkningen som vi alle blir utsatt for på Internett? I denne lyntalen får du vite litt om hva HTTPS er og hvorfor alle nettsider bør tilby en sikker tilkobling. Og ikke minst, hvor enkelt det er å sikre din egen nettside.
Det er liten tvil om at bruk av HTTPS vanskeliggjør den globale innsamlingen av data som utføres av etterretningsorganisasjoner over hele verden. Vi som utvikler og konfigurerer nettstedene der ute kan faktisk gjøre mer enn vi selv tror for å redusere overvåkningen. Denne lyntalen gir deg en kort innføring i HTTPS, hvorfor du bør bruke det på nettstedet ditt og til slutt en demonstrasjon av hvor enkelt det er å ta i bruk.
Jostein har jobbet med Javautvikling i 10 år og har en genuin interesse for Java, sikkerhet og personvern. Etter at det ble kjent i hvilken skala overvåkningen i dag skjer på nettet er det mange som har stilt seg selv spørsmålet om hva man selv kan gjøre. Jostein har bestemt seg for å spre kunnskap om hvordan sikkerhet og personvern henger sammen, og hvordan dette kan utnyttes til å få bedre personvern på nettet. Til daglig jobber han som Senior Software Engineer hos Steria.

Hva skjer når man tar en gjeng med ivrige designere og utviklere, gir dem en spennende utfordring og kort tidsfrist? Med dagens frontend teknolog og sterk fokus på brukeropplevelse gikk vi fra en abstrakt idé til realisering av ny feedback app på tre uker. Tilbakemeldingene har bare vært positive og snart lanseres appen for 280 000 brukere.
Vi deler våre erfaringer på hvordan dagens frontend teknologi understøtter entreprenørselskap og muliggjør raskere time-to-market. Vi jobbet med konseptutvikling, grafisk design og teknisk løsning i parallell i et team bestående av 3 interaksjons designere, 3 utviklere og én arkitekt. Vi fikk på oss tre uker og frie tøyler til teknologivalg og arbeidsmetode. Resultatet ble myOpinion (myopinion.accenture.com) - enkel, brukervennlig, morsom og transparent måte å gi øyeblikket tilbakemelding. Appen har blitt brukt på over 20 eventer, fått toppscore og er i ferd med å bli lansert globalt i Accenture med potensielt 280 000 brukere/ansatte.
Ismar er teknisk arkitekt i Accenture. Han er ansvarlig for interne hackathons og entreprenørskap i tillegg til å være ansvarlig for teknisk arkitektur på en av Norges mest spennende frontend prosjekt hos Telenor.
Anna er interaksjonsdesigner og frontendutvikler i Accenture og jobber til daglig i Accenture's innovasjonslab på Blindern. Anna har øye for detaljer og tenker alltid på brukerens behov først.

Det finnes et utall plattformer for å lage webapplikasjoner; så hvorfor skal du vurdere Clojure? Fordi det gir deg mer kontroll, raskere feedback og færre bugs.
Clojure representerer et radikalt alternativ til webutvikling med objektorienterte språk. Det absolutt viktigste prinsippet bak Clojure er enkelhet. Det første spørsmålet som dukker opp er hvilket webrammeverk bør man bruke? Så snart du er komfortabel med Clojure så innser du at Clojure-kode vanligvis er enklere og mer gjenbrukbar enn det du er vant til. Dermed så gir det ikke så mye mening å gå til et altoppslukende rammeverk a la Rails med de begrensningene det kan medføre; men heller sette sammen det du trenger ut fra enkle komponenter til å få den oppførselen som passer i din løsning. Et annet sterkt argument for Clojure er den korte feedbackloopen man kan oppnå når man utvikler i et REPL. Kom for å bli kjent med webutvikling i et språk som vil forandre måten du tenker på.
Odin er en Kodemaker og sivilingeniør i datateknikk som liker å fylle verktøykassen. Etter å ha jobbet med Clojure er han nå overbevist om at funksjonell programmering ofte kan lede til mer robuste løsninger på en raskere måte.

FINN Reise besluttet i 2012 å bygge et nytt flysøk fra grunnen av. Dette innebar at man måtte integrere seg mot rundt 25 eksterne partnere for å innhente live flytilbud. Camel og Groovy viste seg å være en meget god kombinasjon når mange forskjellige formater skulle samles til ett.
For å få til en enklest mulig integrasjonsprosess falt valget tidlig på Camel. Etter noen iterasjoner for å skrive selve integrasjonene der vi prøvde forskjellige Java- og Groovy-varianter, falt valget på Groovy. Camel er bra på å sy sammen små biter, mens Groovy er bra på transformasjon av data. Det blir lite og oversiktlig kode for å integrere en ny leverandør. I denne presentasjonen vil vi først og fremst vise en masse bilder av kameler, men vi vil også fortelle om prosessen som tok oss i mål. Andre ting som vil bli omtalt er testing med Camel, trådhåndtering og connection pools og hvordan man starter og stopper en integrasjon on the fly.
Audun har jobbet som utvikler og arkitekt i nesten 10 år. Han liker store kompliserte systemer, diskusjoner, og ting som google lager.
Per Jørgen har jobbet som utvikler siden dot.com-bølgen på slutten av 90-tallet og finner fortsatt motivasjon og indre glede i en test som lyser grønt.

Dette er et foredrag om hvordan vi må ta vare på kreativiteten og skaperkraften i oss alle. Foredraget bruker mye av matrialet fra boken: "Drawing on the right side of the brain", som er en klassiker innen kreative yrker. Hvordan fungerer vår hjerne, og hvordan fungerer den ikke? Hva skjer når hjernen vår ser et symbol i en arkitektur-tegning. Når kommer eureka øyeblikkene, og hvorfor kommer de da? Og hva kan vi lære av dette når vi skal skrive dokumenter og figurer om software? Dette er et foredrag med et stort glimt i øyet, som alle som har vært i nærheten av et utviklingsprosjekt vil få mye ut av.
Vi som skriver kode, må ofte forklare hvordan noe fungerer. Vi må forklare det til andre som skriver kode, samt alle andre som trenger å vite hvordan løsningen vår fungerer. Av og til må jeg også "forklare løsningen" til meg selv! Da holder ikke alltid kode. Heller ikke prosatekst dekker våre behov for kommunikasjon. Vi må tegne "kode". Men hjelper det da med formelle systemer som UML? I dette foredraget ser vi på hvorfor vi må tenke utenfor formell notasjon, og hvorfor vi har havnet i et uføre der formell notasjon er det vi kan.
Trond en engasjert løsningsarkitekt og systemutvikler ansatt i Steria, med erfaring fra bank/finans, luftfart og offentlig forvaltning. Han har jobbet som konsulent, grunder, og som leder av avdelinger i forskjellige firma. Med sin brede bakgrunn trives han best i krysningspunktet mellom forretning og teknologi. Medarbeidere beskriver Trond som energisk, løsningsorientert og som et naturlig samlingspunkt med stor autoritet. Trond er en kjent profil i smidigmiljøet i Oslo og har holdt mange foredrag, og vært med å dra i gang mange initiativ, som Smidig 2008 og XP meetup.

GUI-programmering i Swing er pyton! Nå som JavaFX er kommet på banen, er det mulig å omvende en innbitt Swing-hater til å faktisk like å lage brukergrensesnitt?
Hater du å programmere GUI? Vil du heller kutte av din høyre arm fremfor å fikle med foreldede Swing-komponenter? I såfall er du i godt selskap med foredragsholderen, som har skydd gui-programmering som pesten. Men er det håp for bedring når Swing snart er historie og JavaFX tar over? Foredragsholderen har testet ut JavaFX i et hobbyprosjekt, og deler av sine erfaringer fra en gui-haters synspunkt.
Anne Landro har jobbet med programmering i mange år. Den siste tiden har hun hatt mest fokus på det funksjonelle aspektet av systemutvikling. Hun liker godt å prøve forskjellige roller, og trives best når hun kan få en god forståelse av helheten og behovene bak et system.

Moderne applikasjoner har høye krav til både ytelse, skalerbarhet og responstid. Vi har stort sett mange prosessorer til rådighet, men hvordan utnytte dem på best mulig måte? Hvordan kan en oppgave parallelliseres? Hvordan behandle mange oppgaver samtidig? Hva med skalering ved økende/varierende trafikk?
Eivind viser grunnmekanismene i JVM'en for trådhåndtering og parallellisering, og hvordan moderne rammeverk som Akka og RxJava kan tilføre enda bedre kontroll. Vi går gjennom en del typiske fallgruver og viser hvordan disse kan unngåes og hva man bør være ekstra oppmerksom på. Det hele bygges i stor grad rundt eksempler fra ekte prosjekter. Eksemplene er hentet fra moderniseringen av Skatteetaten sine datasystemer, hvor Eivind har jobbet de siste 3 årene.
Eivind er fagsjef for Java i BEKK. Han mener at programmering ikke er et håndverk man blir ferdig i utlært i - og oppdager stadig nye måter å lage enklere og ryddigere løsninger. Eivind er interessert i nye og gamle programmeringsspråk og paradigmer. Han bruker gjerne kvelden på å prøve ut ting han ikke rakk i løpet av dagen. Eivind har holdt presentasjoner på mange tidligere JavaZone konferanser - dette blir det 3. året på rad hvor han snakker om erfaringer knyttet til modernisering av datasystemer hos Skatteetaten.

Monolittiske systemer er vanskelige å endre, tidkrevende å lære, skalerer dårlig, og får byggesystemet til å svette. Likevel er monolittiske arkitekturer de mest populære. Vi lager nye monolitter hele tiden, selv om vi kanskje i utgangspunktet prøver å la være. Hvordan kan vi slutte før vi får vondt i magen?
Motstykket til monolitter er modulære arkitekturer, hvor mindre, selvstendige, funksjonelle moduler bygger på hverandre gjennom veldefinerte grensesnitt, og hvor hver modul utvikles, testes, og forvaltes for seg av ulike team. Dette foredraget er historien om første etappe av to prosjekter som søker å modularisere hvert sitt monolittiske system, en heftig web applikasjon og et massivt baksystem. Begge skrevet i Java. Det ene 10 år gammelt, det andre 20 år ungt. Som så mange monolitter så ble ingen av de to systemene designet for å være monolitter, men har derimot utviklet seg til å bli det over tid. Vi vil fortelle om vår motivasjon for å modularisere monolittene, hva vi har lært i arbeidet med å (re-) definere hva som skal være egne moduler, hvordan vi har gått frem for å trekke kildekoden fra hverandre, hvilken tilnærming vi har brukt i grensesnittdesignet, samt hvilke tanker vi har gjort oss rundt forvaltningen av modulene i etterkant. Foredraget vil inneholde referanser til relevant forskningsarbeid og reelle eksempler.
Nils Christian nyter å hjelpe team å levere software som gleder både brukere og sponsorer. Som konsulent er han å finne i ulike roller hvor han får praktisert dette gjennom coaching i smidig test- og utviklingsmetodikk, kravspesifisering, systemarkitektur og utvikling. Nils Christian er sivilingeniør fra NTNU og ansatt i Scienta.
Trond er utvikler og arkitekt med flere års erfaring fra å jobbe med monolittiske JEE systemer og kjenner godt utfordringene med disse. Jobber nå som konsulent for Scienta og har som fokus å hjelpe bedrifter med å bygge modulariserte systemer, ofte med hjelp av domene-drevet design (DDD) og hendelsedrevet tjenesteorientering (EDA + SOA).

Salesforce1 plattformen er en "multitenant cloud service" (forbrukermodelltjeneste?) som blir stadig mer aktuell her i Norge. Men hva er egentlig multitenancy, hvordan håndterer de over en milliard transaksjoner om dagen og ligger faktisk alle kundenes data i den samme databasen?
Målet med lyntalen er å gi en innføring i hvordan Salesforce ser ut "under panseret". Lyntalen gi en innføring i begrepet multitenancy før den vinkler over på hvordan Salesforce ser ut i forhold til en tradisjonell applikasjonsserver. Videre går man over på strategien for skalering hvor Salesforce har valgt bort virtualisering og heller lagt opp arkitekturen sin til å være optimalisert for skalering i skyen. Vi går så inn på hvoran metadata arkitekturen ser ut og hvordan relasjonsdatabasen til salesforce ser ut og hvordan man lar Salesforce, brukeren og tredjeparts leverandører jobbe og oppdatere det samme systemet uten nedetid.
Jobber i Capgemini Norge AS, har jobbet som Salesforce utvikler siden 2011
Jobber i Capgemini Norge AS, har jobbet som Salesforce utvikler siden 2011

Du vet ikke hva nettsiden din er lastet med hvis den blir utsatt for XSS-scripting eller datainjeksjoner. Vi vil gi deg en kjapp introduksjon og how-to til bruk av CSP, et regelsett som kan redde deg fra hacker-angrep og sikre lasten din.
Har du sikret nettsiden din i dag? Hvis ikke, kan du fortsatt rekke det før dagen er omme. CSP er et enkelt regelsett som lar deg definere hvor du får lov til å hente ressurser fra, og som derfor gjør webapplikasjonen din flere hakk sikrere. Vi leder deg trygt gjennom noen av webverdenens farer med veldefinerte regler, og viser deg hvordan du kan sikre nettsiden din på 10 minutter. Og sove bedre om natten.
Åshild jobber i Capgemini som Java-utvikler. Hun har mer enn tre års erfaring med systemutvikling. Hun synes applikasjonssikkerhet er interessant, og liker å finne enkle løsninger på å forbedre dette i programutvikling.
Mikael jobber i Capgemini som Java-utvikler. Han har mer enn fire års erfaring med systemutvikling, og leder sikkerhetsgruppen i Capgemini Oslo. Han er er opptatt av sikkerhet, ikke bare i software, men også om hvordan bedrifter bør tenke rundt sikkerhet generelt.

Med MAG- og EDAG-prosjektene har Skatteetaten etablert en mikrotjenestearkitektur. Som en forutsetning for kontinuerlig leveranse skal tjenester kunne utvikles, testes, rulles ut, forvaltes og driftes uavhengig av hverandre. Denne sesjonen presenterer løsninger og problemstillinger i en mikrotjenestearkitektur, som tjenesteregistrering og -oppslag, API-utforming og bakoverkompabilitet, robusthet, skalerbarhet og driftsovervåkning.
Skatteetaten er i en prosess der de ser på hvordan de kan senke forvaltningskostnadene, øke endringsevnen i systemporteføljen, og bygge systemer som i større grad vil svare på fremtidige utfordringer. De har etablert et arkitekturmålbilde som legger stor vekt på skalerbarhet, testbarhet, vedlikeholdbarhet, driftbarhet og automatisering. “Modernisering av grunnlagsdata (MAG)”- og “Elektronisk dialog med arbeidsgivere (EDAG)”-prosjektene realiserer deler av målbildet. Hør om erfaringer fra disse prosjektene med fokus på automatisert utrulling, miljøer og versjonering, konfigurasjon og koordingering mellom tjenester, overvåkning og verktøy for drift og administrasjon. Vi ser på hva som fungerer, hva som fortsatt skaper friksjon og aktuelle alternativer som kan forbedre de utfordringene vi står ovenfor.
Trond Arve Wasskog er utvikler, arkitekt og CTO i Bekk Consulting. Han har jobbet med utvikling på Java-plattformen i hele sin karrière, og er nå løsningsarkitekt for MAG og EDAG
Anders Sveen er utvikler og arkitekt hos Miles i Oslo. Han har i det siste jobbet såpass mye med Bash og Linux at han har begynt å kalle seg for drifter. I utformingen av systemer er smidig system-utvikling viktig, og han forsøker å balansere effektivitet og hastighet med forutsigbarhet og stabilitet i produksjon. Han har erfaring fra små, store, bra og dårlige smidige prosjekter, men lærer stadig nye ting. Gjennom erfaringen med drift og ansvar i produksjon har han erfart hvor viktig det er å få hele verdikjeden til å spille sammen, ikke bare utvikle kjapt. Det finnes få ting som er så gøy som å legge ut noe i produksjon én dag, måle den neste, og legge ut en korreksjon den tredje dagen.

DRY er viktig, men vanskelig når du må kombinere JavaScript og Java i Maven-baserte prosjekter. Hør hvordan du gjør det med Maven WebJars.
Ofte har man lyst til å bruke JavaScript over hele fjøla, men er tvunget til å holde seg til et statlig prosjekts tunge arkitekturkrav om å bruke Maven og pakke alt i en jar-fil. Da blir det ofte copy/paste av JavaScript-kode mellom forskjellige moduler, istedenfor at man holder seg til DRY-prinsippene. Med Maven WebJars kan man på en enkel måte pakke ned felles JavaScript som er modularisert med require.js i en jar-fil og gjenbruke mellom prosjekter.
Javakonsulent og fagmanager for .js hos Visma Consulting som fordriver dagene med å lage REST-grensesnitt og Backbone-applikasjoner hos Skatteetaten. Lidenskapelig opptatt av JavaScript, men sørgelig klar over at man noen ganger må gå med på kompromiss og kaste ut npm, bower og grunt.

Har du noen gang vært redd for å gjøre massive omskrivninger av koden din for å øke lesbarhet? Har du noen gang vært nervøs ved bytte av server, versjoner etc? Automatisert regresjonstest er din reddende engel!
Hva gjør man når: ...det er særdeles høye krav til kvalitet og regresjonsfeil er utelukket? ...man må endre en applikasjon med nærmest ingen testdekning? ...når tester kun dekker den delen av programmet som er endret, men ikke annen funksjonalitet? Vi har utviklet en fri programvareløsning for automatisert blackboxtesting. Denne pakken hjelper deg med å fange input og output fra systemet ditt i produksjon, og deretter bruke denne inputen og outputen som henholdsvis testinput og testfasit. Det er støtte for å ta opp og spille av databaseendringer, HTTP-kall og servicekall i Java. Gjennom automatisering blir blackbox regresjonstest en god løsning for de fleste systemer. I dette foredraget vil vi presentere en komplett løsning for fullautomatisert regresjonstest. Vi ser hvordan man kan unngå tidkrevende fallgruver som det å vedlikeholde en testgrunnlagsdatabase, manglende systemgrenser, batchmareritt og løsninger med sveiv. Vi forklarer løsning i dybden, med utfordringer vi møtte på underveis slik som CSRF-beskyttelse og andre kompliserende faktorer.
Stian Grenborgen jobber som sjefsutvikler/arkitekt i Steria. Han er for tiden hos Landbruksdirektoratet. Gjennom arbeid her, og gjennom bakgrunn som systemarkitekt i BBS/Nets, har han gode kunnskaper omkring utviklerdesignede testløsninger. Stian har holdt en rekke foredrag, blant annet på JavaZone og hos UiO.
Anders jobber i Steria som løsningsarkitekt og utvikler. Han har mer enn ti års erfaring som systemutvikler. Han brenner for å lage enkle løsninger til komplekse problemer, og er alltid på utkikk etter verktøy til å hjelpe han med dette. Anders har tidligere holdt foredrag på blandt annet Javazone og Smidig konferansen.

Lyntalen gir et innblikk i arkitektrollen, og hvordan man kan gå frem for å bli arkitekt i et team. Målet er at du også får økt bevissthet på din rolle i ditt nåværende og fremtidige prosjekt.
Høsten 2010 fikk jeg for første gang rollen arkitekt i et prosjekt, og jeg hadde da mine ideer om hva det innebar å være arkitekt. Etter fire år i rollen har disse forestillingene blitt ganske kraftig endret. Kom og hør når jeg forteller om min reise mot arkitektrollen, mine tanker om hva det innebærer å være arkitekt i et prosjekt, hva som har vært og er vanskelig, og alt jeg har fått ut av reisen.
Jon-Thomas er en arkitekt og seniorutvikler med 15 års erfaring fra konsulentbransjen og fra produktutviklingsfirma i Australia. Han har siden endt utdannelse opparbeidet seg bred erfaring innen design og utvikling av ytelseskritiske applikasjoner på Microsoft og Oracle sine plattformer. Jon-Thomas har allsidig prosjekterfaring: Alt fra teamleder og utviklerroller i prosjekt med over 120 deltakere; via totalansvar for arkitektur, utvikling og kundekontakt i enmannsprosjekt; til arkitekt og seniorutvikler i større prosjekt hvor han har fulgt applikasjonen gjennom hele livssyklusen. Han er en dyktig, entusiastisk og pålitelig medarbeider og teammedlem. Som arkitekt og utvikler er Jon-Thomas opptatt av høy kvalitet i alle leveranser, og benytter kjente metoder og patterns i arbeidet. Han er opptatt av å være oppdatert på teknologi og metodikk, samarbeider godt, og jobber aktivt for å få ut det beste av alle rundt seg.

Nysgjerrig på app-utvikling for Chromecast? Start her.
Chromecast er en dings fra Google som du kobler til HDMI-inngangen til tv-en, og som lar deg streame filmer og musikk fra f.eks YouTube og Netflix. Heldigvis har Google gjort Chromecast API-et åpent for utvikling av tredjeparts-apper, noe som åpner for artige muligheter. Dette lynforedraget gir deg en oversikt over arkitekturen i Chromecast, hvilke begreper som brukes, retningslinjer for UX, ninjatriks for testing og debugging, en kjapp titt på API-ene, og ikke minst hvilke begrensninger plattformen har. Foredragsholderen har implementert casting av musikk og film i streaming-tjenesten Subsonic (subsonic.org) og vil vise noen eksempler fra det.
Java old-timer, grunnlegger av Subsonic, partner i Scienta.

PostgreSQL har noen egenskaper som gjør den til en halvblods MQ som få er klar over. Denne lyntalen viser raskt hva mulighetene og begrensningene er og hvordan vi har brukt PostgreSQL som MQ i fiken.no.
1) En rask oversikt over tilstanden en kobling til en postgresql-server kan være i 2) Hva som kreves på JDBC-siden 3) Viser de utility-klassene som vi har brukt i Fiken.no for å bruke postgresql som en måte å få til push mellom applikasjoner, samtidig som man plukker opp meldinger som feiler via bakgrunnsjobber. Eksemplene vil gå fra frontend med AngularJS tilbake til backend og tilbake til en annen frontend hvor man oppnår det man pleide å tro at man trengte ActiveMQ eller tilsvarende til for å oppnå.
Trygve Laugstøl jobber gründer og webutvikler i fiken.no.

Hva betyr AES_128_CBC, hva er forskjellen mellom ECDH og ECDHE, hvor lang bør en nøkkel være og hvilken versjon av TLS er riktig å bruke?
Det siste året har det blitt tydelig for alle at integritet og konfidensialitet er viktig når man kommuniserer på internett, En velkjent teknikk for å få til dette er å bruke TLS, Transport Layer Security (tidligere kjent som SSL, Secure Sockets Layer). TLS kan brukes for å legge til kryptering, integritetssjekk og PKI-basert autentisering på eksisterende nettverksprotokoller uten endre disse, og gir derfor en enkel måte å sikre eksisterende infrastruktur på. Den mest kjente anvendelsen av TLS er selvsagt HTTPS, som er HTTP gjennom en kryptert TLS-kanal. Men for å sette opp TLS er det en lang rekke konfigurasjonsvalg man må ta stilling til; versjon, nøkkellengder, utvidelser samt protokoller for nøkkelutveksling, autentisering, kryptering og meldingsvalidering. Da Yahoo, som den siste av de store tjenesteleverandørene på internett innførte TLS som standard høsten 2013 ble dette ikke gjort i henhold til gjeldende beste praksis. Når de store bommer på dette er det en indikasjon på hvor vanskelig det er å gjøre dette riktig. Denne presentasjonen vil gå gjennom hva TLS består av, hva som er anbefalt beste praksis for oppsett og hvorfor det, samt hva man ikke bør bruke. Fokus vil være på TLS isolert, uavhengig av hvilke protokoller man legger oppå, men det blir også vist eksempelkode i java og tips for konfigurasjon av vanlige web- og applikasjonsservere.
Jobber som rådgiver i Acando hvor jeg bistår store offentlige etater med å operasjonalisere IT-strategi gjennom virksomhetsarkitektur og systemarkitektur. Har de siste årene jobbet spisset med sikkerhet, hvor jeg har spesifisert sikkerhetsarkitektur og implementert sikkerhetsmekanismer som SAML, TLS og PKI.

Ved hjelp av 11 matematiske problemer som er enkle å forstå og som tilsynelatende har åpenbare løsninger, skal vi demonstrere at det ofte kan være lurt å stoppe opp og tenke seg om før man hopper på den mest innlysende løsningen.
Verden er ikke alltid som den fremstår, noe vi stadig får erfare. Kravene var ikke slik vi trodde, programmet vår gjør ikke akkurat slik vi tenkte. Vi går gjennom noen matematiske problemer som er enkle å forstå og som man intuitivt har en oppfattelse av løsningen på. Ved å gå gjennom løsningene og demonstrere hvordan man kommer frem til dem, og peke på hvor intuisjonen går feil, skal vi forhåpentligvis klatre litt nærmere kanten på den berømmelige boksen. Der det passer seg, kommer vi til å gå gjennom litt kode som demonstrerer løsningene, eller som demonstrerer fallgrubene. I noen tilfeller skal vi se raskt på hvordan lærdommen vi får fra matematikken kan påvirke kode vi skriver, og vi kommer til å se at dersom man ikke oppfatter kravspesifikasjonen riktig, blir resultatet feil.
Programmerer av natur, konsulent av profesjon. Ble introdusert til Java i 1999 og har stort sett blitt sittende fast i det siden. Har flere vekttall i matematikk enn de fleste, og mottatt lønn hovedsaklig for å programmere siden 2002. Liker å se på meg selv som en problemløser, enten problemet består i dårlig kode, feil kode, eller krav som er umulig å innfri innenfor andre gitte rammebetingelser. Har en forkjærlighet for å rive ned ting som ikke funker, for så å bygge det opp igjen, fremfor å lappe på det. Mener at litt mer matematisk bevissthet blant oss ville forbedret både kode og løsninger.

Er du lei av å google de samme kommandoene hver gang du skal sette opp et miljø? Lei av at TEST ikke er likt PROD? Mangler du god dokumentasjon av miljøene dine? Provisjonering lar deg automatisere en reproduserbar konfigurasjon, og det trenger ikke være vanskelig. Vi viser deg hvordan du kommer veldig enkelt i gang med provisjonering ved hjelp av verktøyet Ansible.
Vi skal se på hvordan du kan skrive infrastrukturen din som kode, ved hjelp av Ansible. Ansible følger en litt annerledes filosofi enn mer konvensjonelle provisjoneringsrammeverk som f.eks. Puppet. Det krever minimalt med boilerplate, og omtrent ingen eksisterende infrastruktur. Vi skal se på noen helt konkrete eksempler på hva man kan bruke det til, og vise et minimalt eksempel samt teknikker for å håndtere gjenbruk når en større infrastruktur skal provisjoneres.
Bendik jobber til daglig som utvikler i BEKK, hvor han jobber med alt fra backend til frontend. Han kommer opprinnelig fra Java-verden, men har i det siste vandret mer og mer inn i den funksjonelle verden. Han er også interessert i programmering som håndverk, og opptatt av pen og lesbar kode.

En workshop hvor du kommer raskt i gang med å lage din første AngularJS applikasjon. Vi viser litt teori, men hovedvekten vil være på praktiske øvelser. På slutten vil vi dele noen praktiske erfaringer fra en stor AngularJS applikasjon vi har laget (https://fiken.no). Vi vil også fortelle litt om hva som kommer i fremtiden for Angular.
Mer spesifikt vil vi gå igjennom: * Oppsett av en Angular-side/prosjekt * Dependency injection * Templates / Expressions * Filters * Directives * Routing
Joakim Blomskøld jobber som utvikler. Han har mer enn 10 års erfaring med Java og webutvikling.
Aleksander har lenge jobbet med backendsystemer i Nets, men jobber nå som gründer og web utvikler i Fiken (https://fiken.no).
Trygve Laugstøl jobber gründer og webutvikler i fiken.no.

Erfaringsrapport om da prosjektet jeg var på "plutselig" gikk over til å bruke Scala. Om opplevelsen av overgangen til både nytt språk og ny måte å tenke på fra ståstedet til noen som ikke var involvert i innføringen av det nye.
Jeg sitter intetanende og konfer java enterprise og xml-til-xml transformeringer. Livet er greit om enn noe grått, litt trist og litt frustrerende. Men, alt er bare litt og ikke mye og ikke voldsomt. Plutselig skal alt gjøres i Scala da ildsjelene™ har klart å drive det inn både i prosjektet internt og hos kunden. Dette blir en lyntale om overgangen til en helt ny måte å tenke på, fra imperativ til funksjonelt. Ja, det pakkes ofte inn i at Scala kjører på JVM og det er fine broer over til Java hvis man trenger det (ikke bli redd), og det er ikke SÅ forskjellig - MEN det det egentlig handler om når du sitter der, er at hele din vanlige måte å tenke på faktisk blir snudd på hodet. Dette blir en talk som inneholder personlige WTFs og brain-pains rundt denne overgang. Det handler også om hvordan man håndterer endringer som ikke er initiert av deg selv, rent psykologisk. Og, det blir svar på spørsmålet - hvordan er livet nå, fremdels bare litt vanlig trist?
Har jobbet som Java-utvikler for Knowit Objectnet i 5 år. Nesten hele denne tiden har blitt brukt på Oslo kommunes forvaltningsprosjekt, et java-prosjekt med mye xml integrasjoner. Før dette forsket jeg på ekspertestimering hos Simula Research Laboratory, hvor mye av tiden ble brukt til å undersøke på hvordan man gjør vurderinger og bedømmelser rent kognitivt ifm. usikkerhetsangivelser.

Lei av å jobbe med store monolittiske systemer? Det har den siste tiden vært mye hype rundt begrepet Micro Service Arkitektur (MSA). ThoughtWorks har plassert dette på sin teknologiradar under "trial", og Martin Fowler blogger om begrepet. Denne lyntalen vil gi deg en kort introduksjon til MSA og vil vise hvilke muligheter dette gir i forhold til en monolittisk arkitektur.
Inspirert av flere foredrag på fjorårets JavaZone bestemte vi oss for å teste ut denne arkitekturstilen på et prosjekt hos Forsvaret. I denne lyntalen vil jeg vise hvilke verktøy/teknologier vi har brukt for å få til MSA i praksis. Jeg vil også peke på andre relevante verktøy som finnes, og forklare hvilken påvirkning en slik arkitektur får på utvikling, drift og overvåkning. Til slutt vil jeg dele erfaringene vi har gjort oss og gi tips til hvordan du kan komme i gang med Micro Services i ditt neste prosjekt. Er dette en ny Silver Bullet? Bør du kaste deg på hypen og velge MSA i ditt neste prosjekt? Lyntalen avsluttes med en oppsummering av fordeler og ulemper med MSA.
Henrik jobber som konsulent i Bouvet, og er en faglig engasjert utvikler og arkitekt med fokus på Java, open source og smidig utvikling. Han liker å holde seg oppdatert på teknologi og trender, og har i det siste interessert seg spesielt for tjenesteorientering og verktøy/metoder for å kunne understøtte kontinuerlige leveranser (DevOps). Henrik er opptatt av automatisering og kontinuerlig forbedring, og foretrekker å bruke enkle teknologier og produkter. Han er interessert i arkitektur og liker å ha oversikt, samtidig som han alltid er opptatt av implementasjonsdetaljer.

I følge fossefallsmetodikken skal man gjøre mye planlegging og detaljering i forkant av en konstruksjonsfase, mens man i en smidig setting ikke gjøre den samme detaljeringen men heller avklarer og detaljerer ting undervis. Så hvor mye arkitekturarbeid bør man da gjøre i forkant?
Når har man gjort nok arkitekturarbeid og kan begynne å skrive kode? Skal man gjøre som i de gode gamle fossefallsdager og detaljere arkitektur og design komplett før man starter utvikling, eller skal man ikke gjøre noe arkitekturarbeid i forkant av utvikling og heller la arkitekturen dannes gjennom testdrevet utvikling? Satt på spissen er selvfølgelig svaret at ingen av disse ytterkantene er den beste måten å gjøre det på. Lyntalen vil se på hvordan man kan lage "akkurat sånn passe mye arkitektur" og hvordan man vet når man har gjort "sånn passe mye arkitektur".
Vegard jobber til daglig på prosjekter for BEKK. Her har han som regel ansvar for å lage, utrede og vurdere større arkitekturer eller gi råd til kunder om IT-strategi og teknologi. Arkitektur, kvalitet, forretningsforståelse, helhetlig tenkning og samspill er alle områder som Vegard er spesielt interessert i, og deler gjerne sin interesse for disse områdene.

BIG-IP benyttes som blant annet for implementere høy tilgjengelighet, lastbalansering og web-cache. BIG-IP er i bruk hos mange av de store driftsleverandørene og også hos aktører med større interne driftsmiljø. Likevel ses den ofte på som svart magi av mange utviklere og arkitekter. Applikasjonsutviklere og arkitekter er nødt til å ta mer kontroll over infrastrukturkomponenter som BIG-IP for å lage sikre og stabile løsninger. Dette foredraget tar sikte på å gi en introduksjon til BIG-IP for applikasjonsutviklere og arkitekter. Men utgangspunkt i applikasjonsutvikling og forvaltning vil det bli vist hva man bør ha kontroll på, hvilke konfigurasjoner man bør vurdere og hvilke feil man bør unngå.
Oppsett og endringer av lastbalanserer og andre komponenter for høy tilgjengelighet gjøres ofte kun som bestillinger til drift med liten eller ingen kontroll fra de som utvikler og forvalter applikasjonene. Bestillinger beskrives gjerne i lite konkrete vendinger og er ofte vanskelig for applikasjonsutviklere og arkitekter å bekrefte. Samtidig er det lite kjennskap blant applikasjonsutviklere hva BIG-IP kan gjøre, hva den bør og ikke bør gjøre og hvordan denne svarte magiske boksen virker. Konsekvensen er derfor ofte større eller mindre feil i BIG-IP oppsettet som kan gi varierende konsekvenser for applikasjonene. Utfordringer med BIG-IP er både relatert til nyutvikling og forvaltning, både av applikasjoner og CMS løsninger. Dette foredraget vil forsøke å gi en introduksjon til de viktigste og mest brukte konseptene i BIG-IP. Vi vil se på hvordan man typisk setter opp en applikasjon i BIG-IP. Tema som vil berøres er lastbalansering og lastbalanseringsalgoritmer, monitorering, regler (irules) og tilhørende testing, web-cache og ytelsestesting. Foredraget er i hovedsak basert på erfaringer fra virkeligheten og tar utgangspunkt i reelle problemer. Mange av momentene som tas opp vil også være overførbare til andre lasbalanserere og proxy-komponenter, men det tas utgangspunkt i BIG-IP.
Arkitekt med interesse for mer enn det som foregår i Java-koden.

I denne lyntalen vil du lære om kontekst i javascript, altså verdien av nøkkelordet "this" samt hvordan vi kan styre denne med javascripts egne funksjoninvokeringsmekanismer.
Kontekst i JavaScript er rare greier. *this* er aldri det du tror den skal være, og det later heller ikke til å være noen logikk å spore. I dagens rammeverkbonanza i javascriptverden er det ikke blitt noe lettere, ettersom mange av disse rammeverkene går i vei og setter mer eller mindre fornuftige kontekstverdier for deg rundt omkring i applikasjonen. Hvordan dette fungerer er en av tingene man bare er nødt til å lære seg dersom man skal beherske JavaScript. I denne lyntalen skal vi oppklare mysteriet ved å gå gjennom reglene for defaultverdiene av this, samt vise hvordan vi kan selv sette kontekst ved funksjonsinvokering gjennom call, apply og bind.
Frontendutvikler hos BEKK Consulting som jobber til daglig med utvikling og forvaltning av store javascriptapplikasjoner. Bakgrunn fra sivilingeniørstudiet i Kommunikasjonsteknologi ved NTNU. Lidenskapelig opptatt av JavaScript og webteknologi. I ledig tid bedrives det i stor grad strengbehandling i ymse former: gitartraktering, squashspilling og diverse programmeringsprosjekter.

En kjapp introduksjon til Web Components. Der jeg vi går igjennom de forskjellige delene som trengs for å bygge egne komponenter og demonstrerer noen komponenter som allerede er laget.
Som utviklere hopper vi mellom utallige frontend-rammeverk, og må gjerne lære oss et nytt rammeverk for hvert eneste nye prosjekt vi begynner på. Dette er både tidkrevende og en smule irriterende. Hadde det ikke vært deilig med en standard? Jo, og det synes også folkene bak HTML også. Web Components ligger i standardiseringsløpet, og er snart klart til bruk. Med litt polyfill kan vi begynne å bruke det allerede i dag. I denne lyntalen går vi lynkjapt igjennom, med enkle kodesnutter, hvordan man kommer i gang med å lage egne komponenter, samt å vise noen eksempler på hva Web Components kan brukes til. Web Components er kult!
Sigurd er Java-utvikler i Steria, med lidenskap for ny teknologi. Og han har jobbet med nye frontend-rammeverk som Angular.js og Knockout. For tiden jobber Sigurd som en innleid utvikler i Husbanken, der han jobber som frontend-utvikler for nytt søknadsskjema. Han har fulgt utviklingen av Web Components fra utsiden det siste året, og laget noen komponenter selv.

Interaktiv programmering er en teknikk som gir deg en umiddelbar nærhet til koden din og åpner opp for en ekstremt kort feedbackloop.
Alle vet at programmering er en treg prosess. Du endrer litt kode, bygger, venter. Hvis alt går bra så endrer du litt kode til. Etter hver så blir man vant til den store avstanden mellom koden og hva den faktisk gjør og tenker at dette bare er sånn programmering er. Men det trenger ikke være slik! Tenk om du slapp å simulere i hodet ditt hva hver kodelinje gjorde. Tenk om du kunne se effekten av endringene dine umiddelbart. Målet med presentasjonen er å demonstrere hva interaktiv programmering er, hvilke utfordringer man står overfor og hvordan det fundamentalt forandrer måten du utvikler på.
Odin er en Kodemaker og sivilingeniør i datateknikk som liker å fylle verktøykassen. Etter mange år med objektorientering, design patterns og mutasjoner er han nå overbevist om at fremtiden er immutable.

Skal du drifte et distribuert system er det viktig å enkelt kunne administrere og overvåke applikasjoner på ulike servere. Men alle som har prøvd å benytte JMX MBeans på eksterne maskiner vet hvor utfordrende det kan være. Hawtio and Jolokia to the rescue!
Jolokia er et genialt verktøy som enkelt kan eksponere JMX MBeans som et Web API. Hawtio er et utvidbart HTML5-konsoll som benytter Jolokia for administrasjon og overvåkning av JVM-baserte applikasjoner. Denne lyntalen vil gi en kort introduksjon til Hawtio og Jolokia, og vil vise hvordan du enkelt kan komme i gang med administrasjon og overvåkning av distribuerte applikasjoner. Lyntalen vil vise funksjonalitet gjennom en live demo! Så hvor "hawt" er egentlig dette konsollet? Jeg vil til slutt oppsummere erfaringene vi har gjort oss fra et prosjekt hos Forsvaret.
Henrik jobber som konsulent i Bouvet, og er en faglig engasjert utvikler og arkitekt med fokus på Java, open source og smidig utvikling. Henrik er fagleder for kontinuerlige leveranser og DevOps i Bouvet. Han synes det er rart at ikke flere kunder krever kontinuerlige leveranser, og mener dette bør være en naturlig praksis for alle smidige team!

Universell utforming handler ikke om ekstra løsninger for mennesker med funksjonsnedsettelser. Ved å tenke på de som har ekstra utfordringer når vi designer og utvikler nettsider, vil det føre til bedre løsninger for ALLE. Denne presentasjon vil gi informasjon om universell utforming som alle i utviklingsbransjen burde vite om, i tillegg til å vise noen enkle teknikker alle produktfolk, designere og utviklere bør kunne for å gjøre nettsidene bedre for alle.
Akkurat som en trapp er vanskelig å gå for en som bruker rullestol, kan nettsider være vanskelige å lese for en som er svaksynt eller en som er blind. Det finnes trapper med gangvei på tvers, som også er positivt for alle som har barnevogn eller en trillekoffert. På samme måte vil det at vi tar hensyn til en svaksynt som må forstørre en nettside flere hundre prosent, gjøre at vi samler det som hører sammen. For en svaksynt vil det gå fra umulig til mulig å forstå nettsiden, mens det vil for oss andre gå fra litt vanskelig til en mye bedre brukeropplevelse. Det finnes flere teknikker som er lette å gjennomføre, og som vil gjøre at vi finner utfordringer for mennesker med funksjonsnedsettelser. Disse teknikkene hjelper oss å lage bedre nettsider for alle. Presentasjonen vil også vise hva vi har gjort i FINN.no på området, som kanskje kan inspirere andre til å gjøre tilsvarende. Loven for universell utforming er kommet for å bli. I stedet for å tenke på loven som et pålegg, vil denne presentasjonen vise hvordan den heller kan være en inspirasjon til å lage gode nettsider for alle. Vi kan bli eksperter, og snart kommer resten av Europa for å lære!
Seniorutvikler i FINN.no. Hovedsakelig backend-utvikler med java som hovedspråk, men leker litt i alle lag. Ble engasjert i universell utforming i 2014, og har vært med å starte en grasrotgruppe av designere og utviklere i FINN.no som jobber med å spre kunnskap om universell utforming i FINN. Opprinnelig sivilingeniør i kommunikasjonsteknologi fra NTNU, og har jobbet på et EU-prosjekt om fremtidens mobile tjenester før FINN fra 2008.

Vi har alle kjørt `mvn clean install` for å bygge et prosjekt, men har du lurt på hva mer Maven kan gjøre? Hvordan Maven kan hjelpe oss redusere byggetiden eller få bedre kontroll slik at avhengighetene holdes oppdaterte?
Som gode utviklere bør vi kjenne bibliotekene og verkøyene vi bruker. Men når det kommer til byggverktøy ender vi ofte opp med å bruke en eller to kommandoer som vi kjører om og om igjen. Likevel har disse verktøyene ofte flere bruksområder og valgmuligheter som vi ofte ikke kjenner til eller har satt oss så godt inn i. Jeg ønsker i denne lyntalen å gi en kort introduksjon og vise hva mer Maven kan brukes til, med enkle tips som kan gjøre hverdagen litt bedre.
Software Engineer i Sopra Steria. Bidrar til en rekke open source prosjekter på fritiden. Brenner for kodekvalitet og testbarhet. Alltid lyst til å lære mer om bibliotekene, verktøyene eller økosystemet rundt prosjektene jeg jobber med.

Google Maps, OpenStreetMap og flere andre gir deg muligheten til enkelt å lage kart-funksjonalitet i løsningen din. Samtidig blir du da låst til datasettene, presentasjonen og funksjonaliteten og som er tilgjengelige via disse leverandørene. Denne workshopen vil gå igjennom hvordan du kan lage dine egne kart fra bunnen av og så publisere de på web. Vi vil basere oss på åpne data fra Kartverket og et utvalg gratisverktøy.
Etter det store frislippet av geodata for Norge har man nå mange nye muligheter for å lage egne, spesialtilpassede kart for ulike bruksområder. Denne workshopen vil vise hvordan dette kan gjøres, og dekke hele prosessen trinn for trinn - fra dataimport via grafisk design og fram til et ferdig webgrensesnitt med enkel funksjonalitet. Fokuset i workshopen vil være på enkelhet og å få til en fullstendig gjennomføring, men foredragsholderen vil her og der ta opp relevante problemstillinger i kartografi og GIS-systemer.
Kristoffer Dyrkorn er Scientist i BEKK med lang erfaring fra store Java-baserte webløsninger, både som utvikler, teamleder og løsningsarkitekt. Ved siden av å være grafikknerd og NoSQL-nerd er han spesialist på løsningsarkitektur, integrasjon og ytelsesoptimalisering.

Kan man bruke fjellvettreglene når man designer software? Ja. Jeg skal vise hvordan.
I 1967 døde 18 ungdommer i fjellet. Norges Røde Kors og Den norske Turistforening gikk sammen og lagde et enkelt sett med regler. Fjellvettreglene skulle hindre at flere liv gikk tapt på grunn av uvettig oppførsel. Kan de samme reglene hjelpe oss når vi lager software?
Kari er en entusiastisk utvikler/arkitekt. I vinterhelgene er hun ofte å finne enten på vei opp eller ned en fjellside.

Hva skjer hvis man religiøst følger pattern og metodikk? Noen eksempler hvor man burde vært mer pragmatisk.
I forbindelse med programmeringspråk blir det ofte diskutert metodikk og patterns. Hva er den nye rette metodikken? Hvilke patterns erstatter nå gårsdagens antipatterns. Når det kommer noe nytt eller ihvertfall et nytt navn på det, popper det alltid opp en del evangelister som forkynner hvor bra det er. Ideene kan være gode, men går det bra hvis vi følger det med en fanatisk iver? Foredraget tar noe få «highlights» på populære ideer som tatt for langt kan ødelegge applikasjonen din.
Erlend Flaten er utdannet Sivilingeniør i datateknikk fra NTNU. Til daglig jobber han som konsulent hos Acando. Han har jobbet som utvikler siden 2005. Det vil si ganske mange metodikker og pattern som har kommet og gått. Mye av tiden går til vedlikehold og videreutvikling av applikasjoner. Dette gir et godt innblikk i hvordan pattern holder seg over tid og kanskje blir teknisk gjeld etterhvert. Erlend jobber sammen andre konsulenter fra Acando for å skape en kultur og jobbe effektivt med å håndtere teknisk gjeld.

Hva ligger i rollen til en teamleder? Hva er det en teamleder bør fokusere på? Hva skiller en god teamleder fra en dårlig?
Teamlederrollen er ofte veldig uklar, og det er heller ikke en rolle man får så mye opplæring i. Jeg har tenkt mye på hva som ligger i denne rollen og kjent litt på kroppen hvilke forventninger som stilles, men likevel ikke uttrykkes. Hva er det minste en teamleder bør prøve å få til? Lyntalen er en oppsummering av hva jeg mener en god teamleder bør gjøre, men ikke minst også hvordan han/hun bør være personlighetsmessig for å best mulig støtte teamet sitt.
Jobber til daglig som manager i Bekk Consulting der jeg for det meste jobber som utvikler i Java prosjekter. Jobber for tiden som teamleder og syns dette er et veldig spennende felt. Bruker mye tid til å finne ut hvordan jeg best mulig kan støtte teamet mitt og legge til rette for at de kan jobbe best mulig, og samtidig sørge for at alle trives.

Med hundrevis av tjenester som prater sammen over nettverket er det ikke til å unngå at noen tjenester er nede. Vi ser på hvordan FINN.no har tatt i bruk Hystrix for å isolere oss mot feil, og samtidig få monitorering og visualisering på kjøpet.
Finn.no har de siste årene gått over til en arkitektur basert på microservices. Dette har ført til mange flere nettverkskall mellom tjenester, noe som har økt sårbarheten i systemet, der feil i tjenester tar ned andre tjenester. Vi viser hvordan Finn.no har brukt Hystrix siste halve året for å fjerne disse sårbarhetene. Vi vil ta for oss spørsmål som: - Hvor i stacken passer Hystrix? - Hvordan konfigurerer man Hystrix, og hvordan finner man fornuftige verdier verdier skal man bruke? - Hvilke deler av Hystrix passer best når? - Hvordan passer hystrix sammen med eksisterende løsninger for monitorering?
Audun har jobbet som utvikler og arkitekt i 10 år. Han liker store kompliserte systemer, diskusjoner, og ting som google lager.
Henning Spjelkavik har i det siste jobbet med både arkitektur, ytelse og skalering på FINN.no, i tillegg til å vedlikeholde én av Norges ledende karttjenester. Hans favorittverktøy er wireshark, bash og en liten leatherman.

Det skal ikke så mange tegnsettfeil til før frykten sniker seg inn. Kanskje tenker du ikke over det selv lengre, men sniker deg stille forbi en ensom Å naar du moeter den i en moerk bakgate?
Java har i utgangspunktet støtte for alle verdens tegn, men det er noen snubletråder på veien. Å håndtere tegnsett riktig er noe en hver utvikler burde kunne, men litt for mange lukker øynene og håper at det går greit. Kom for å høre hvordan du kan slippe å noen sinne se en � igjen.
Håvard overlevde Linux sin overgang til UTF-8 i 2002. Etterpå ble han utvikler i Kantega der han ofte brukte et annet OS en resten av teamet, så han fikk alltid skylda når tegnene ble feil. Han er også gammel nok til å vite hva en "code page" er.

junit-quickcheck er et verktøy for JUnit hvor man kan uttrykke generelle egenskaper i stedet for å teste med et antall eksempler, og denne lyntalen gir en rask introduksjon til dette.
Ofte er det hensiktsmessig å lage funksjonalitet av mer generell karakter enn domenet man utvikler et system for. Dette kan være alt fra små hjelpemetoder for strengmanipulering, til håndtering av brukerinput, og mye annet. For å teste dette bruker man som regel et lite endelig antall eksempler. Man må sørge for at eksemplene dekker alle corner-cases, og hva som anses som corner-case kan være direkte avhengig av implementasjonen. Dette skal i prinsippet bevise at logikken håndterer en massiv, og noen ganger i prinsippet uendelig, mengde ulik input. Hvis man i stedet kunne uttrykke "for alle strenger", "for alle heltall mindre enn", "for alle enums av type, unntatt" kan man slippe unna med færre tester, og man vil ikke få avledet oppmerksomheten av eksempler hvis innhold egentlig ikke har noen semantisk betydning for testenes utfall. junit-quickcheck er inspirert av tilsvarende verktøy for Haskell (QuickCheck) og Scala (ScalaCheck), og muliggjør at man spesifiserer egenskaper (property-based testing) fremfor å syntetisere eksempler for å teste kode. Denne lyntalen vil gi en introduksjon til junit-quickcheck i Java, og forutsetter ingen tidligere erfaring med property-based testing.
I am a developer at BEKK Consulting with a passion for clean, concise, and sound code. I have about 8 years of experience from Java projects, and still get a childish joy when seeing tests go from red to green. I believe TDD is not dead and still has an important role in software development. Currently during the day I am developing Digipost together with a bunch of awesome people at Posten and colleagues from BEKK. At night I am playing keys with some crazy guys in BEKK Band. I have an unhealthy affection for vintage synthesizers.

Det er viktigere at kode havner i riktig modul enn at vi har den korrekte dekorasjonen med javadoc, eller som kanskje Jan P. Syse ville sagt det: “Det hjelper ikke være på riktig hylle når du er i feil skap”
Det er enkelt å ha feil fokus, og det finnes bra verktøystøtte for det også, en klasse uten javadoc kan vi få til å bryte bygget hvis vi vil. Sikring av at kode havner på rett plass er ikke like enkelt. Tenk deg at noen rett fra gata skal jobbe med koden på ditt prosjekt, bryr vi oss om javadoc eller at koden skrives i riktig modul? Denne lyntalen handler om de enkle skissene vi trenger som guidelines, de som er langt viktigere enn javadoc.. .
Per Otto er fagansvarlig for Java og integrasjon i Eika og har jobbet med utvikling på Java-plattformen i over 15 år. I Eika jobber Per Otto i prosjekter og møter hele tiden utfordringer sammen med teamet for å finne løsninger og gode navn på moduler.

Har du ikke budsjettet til Facebook for å lage en moderne app? Apps laget i Meteor gir brukeren en moderne brukeropplevelse både på mobil og web, full-stack reaktivitet gjør at data sømløst deles mellom brukere i tillegg til at appen føles veldig responsiv. Lær hvordan du kan komme i gang med Meteor og lage awesome apps i morgen!
I denne lyntalen vil vi få en kort introduksjon til hva Meteor er og se på noen av prinsippene som ligger bak denne forholdsvis nye plattformen for å lage apps. Med betydelig mindre kode enn før kan man nå lage moderne reaktive apps på kort tid. Et språk overalt og isomorfisk kode gjør at koden kan kjøre på server og klient. Vi vil også se på hvordan man kommer i gang med Meteor, forstå hva en app består av og hvordan man tar i bruk ferdig pakker med funksjonalitet, og til slutt hvordan man deployer en app opp i skyen.
Kjetil er en teknisk arkitekt i Accenture hvor han i det siste har sett en på trender innen app-utvikling, som Internet of Things og cloud-løsninger, og hva dette krever av bedrifter som ønsker å henge med i tiden. Har et brennende ønske om å gjøre ting så enkelt som mulig.

Etter å ha utsatt en nødvendig refaktorerings/nyutviklingsjobb lenge ble vi nødt til å krumme halsen og sette igang: Nye krav og brukergrupper gjorde det nødvendig å nyutvikle registreringen av parter og aktører i Lovisa (domstolenes saksbehandlingsløsning). I denne lyntalen beskriver jeg hvordan vi grep problemet an, hva slags vurderinger vi gjorde underveis og hvordan vi fikk levert en forbedret og utvidet løsning til kunden.
Det er en stor utfordring å fornye virksomhetskritiske systemer med lang levetid. I denne lyntalen fokuserer vi på hvordan vi gikk fram for å refaktorere/nyutvikle en sentral komponent i Lovisa som har vært domstolenes sentrale saksbehandlingsløsning siden 2003. Den aktuelle komponenten for å registrere parter og aktører i en sak ble realisert av en utvikler sommeren 2004. Denne utviklereren har vært ute av prosjektet lenge, og vedlikehold og feature-creep i årene etter hadde skapt en komponent som var svært krevende å vedlikeholde og utvide. Sommeren 2014 bestemte vi oss derfor for å gå drastisk til verks med tre mål for øyet: 1. Forbedre vedlikeholdbarheten av Swing-komponentene med tilhørende view-controllere. 2. Forbedre brukergrensesnittet. 3. Støtte nytt behov for å registrere eiendommer fra Matrikkelen som parter i saker. Vi valgte å ikke nyutvikle Swing-koden fra scratch, da vi vurderte dette til å føre med seg for stor risiko. I stedet gjorde vi en trinnvis refaktorering av den eksisterende koden som gjorde at vi til enhver tid hadde en fungerende løsning i testmiljøet. Vi begynte med å få kontroll på kodebasen uten å gjøre funksjonelle endringer. Java-koden ble oppgradert fra 2004-kode til 2014-kode. Vi fikk på plass testdekning i form av enhetstester og TestComplete-tester. Vi tok i bruk oppgraderte rammeverk for brukergrensesnitt, samt rammeverk for å håndtere nøstede brukertransaksjoner. Dette reduserte kodekompleksiteten og skapte et godt utgangspunkt for å kunne utvikle ny funksjonalitet. Produksjonssettingen av den nye løsningen var vellykket, og det eneste vi angret på var at vi i et snev av manglende selvtillitt hadde videreført deler av den gamle løsningen via en property-styrt nødutgang. Dette viste seg å være helt unødvendig, og skapte bare problemer med kodeduplisering.
Programmerer, systemutvikler og teknisk arkitekt.

Tips og triks for å lage loggmeldinger som kan brukes til noe.
Gjennomgang av noen enkle triks man kan gjøre for å skrive loggmeldinger som gir god nytteverdi ved feilsøking, samt litt om hvordan man kan nyttegjøre seg av logger gjennom bruk av loggsøkeverktøy.
Seniorkonsulent hos Mesan, med erfaring fra bl.a. forvaltning. Har drevet en del med feilsøking og graving i logger, og har (smertelig) fått erfare forskjellen mellom god og dårlig logging når man feilsøker. Trives best i backend, og interesser inkluderer kodekvalitet og lesbarhet, samt det å gjøre jobben enklest mulig for de som skal drifte og videreutvikle det jeg lager.

Ti minutter om hvordan vi i et prosjekt sammen med kunden og kundens jurister brukte XML til å utvikle en selvdokumenterende modell for utledning av hvilke dokumenter som er påkrevd i innsendte refusjonssøknader.
Jeg føler ikke at jeg sparker inn noen dører når jeg sier at vi utviklere generelt er mindre begeistret for XML og når vi oppdager svakheter ved en teknologi eller anvendelsen av den svinger vi urovekkende ofte pendelen til det motsatte ytterpunktet. Jeg har med denne lyntalen ingen intensjoner om å overbevise deg til å flytte alle JPA annotasjonene dine tilbake i XML. Mine tilmålte ti minutter har jeg tenkt å bruke på å beskrive en snedig måte vi i et prosjekt sammen med kunden og kundens jurister anvendte XML, XSLT og Twitter Bootstrap til å utarbeide en selvdokumenterende modell for utledning av påkrevde vedlegg for en gitt søknad.
Tidlig i tennårene utviklet jeg en genuin interesse for programmering, Linux, kaffe og åpen kildekode generelt. Nå femten-ish år senere har jeg noe mindre hår på hodet (udefinert som damen på passkontoret valgte å si det når hun noterte hårfargen), men fortsatt den samme interessen. Nylig hadde jeg gleden av å konvertere det siste team medlemmet fra Windows til Linux for utvikling. For tiden jobber jeg for Acando AS og i et fantastisk hyggelig samarbeid med Helsedirektoratet og Pasientreiser ANS med å frigjøre en søknadsprosess fra konvolutter og frimerker ved å tilby en elektronisk løsning som om man skal være ærlig mange forventer i 2015.

Introduksjon til hierarkisk temporært minne, som er en modell av hjernens neocortex, for å gjenkjenne mønstre og finne avvik i Big Data. Noen eksempler hvor hierarkisk temporært minne kan benyttes for Big Data - datastrømmer.
Neocortex er et 4 mm tykt "teppe" i hjernebarken, som benyttes for gjenkjenning av mønstre, for å forutsi hva som kommer til å skje og for å finne avvik. Det strømmer kontinuerlig store mengder data gjennom neocortex fra våre datakilder som syn, hørsel og andre sanser, og neocortex setter dette i system med sitt hierarkiske minne. Med hierarkisk temporært minne (Hierarchical Temporal Memory, HTM) forsøker man å lage en datamodell av neocortex, og HTM er sånn sett en ny type nevrale nettverk. Teorien bak HTM utvikles raskt, men man har mye igjen før alle seks lag av neocortex er forstått og implementert i HTM - modellen. Allerede nå finnes open source kildekode, bl.a. "htm.java", og kommersielle løsninger som utnytter mulighetene med HTM. Datastrømmer fra Big Data - kilder som IoT, GPS-tracking, medisinske applikasjoner, serverovervåkning, finans, jordskjelvovervåkning er bare noen eksempler hvor HTM kan gjenkjenne mønstre og finne avvik.
Seniorkonsulent i Miles, med interesse for Java, Agile, IoT, BigData og kunstig intelligens.

Hvorfor skal vi bry oss med funktorer, monoider , bind og andre rariteter? Verden har sett nok funksjonelle one-linere uten kontekst! Bli med på en reise fra den objektorienterte verdenen til den funksjonsorienterte, med tips, triks og aha-opplevelser som vil fylle verktøykassen din med godsaker som fungerer i ekte prosjekter.
Som en som programmerer funksjonsorientert med Java daglig treffer jeg mange som etterlyser informasjon om hvordan man anvender funksjonell programmering i ekte prosjekter med betalende kunder og hva man kan få igjen for det. Jeg skal fortelle mine erfaringer og dele aha-opplevelser fra da jeg leste om ordet funksjon for første gang til jeg nå sitter og bruker kategoriteori for å lage programmer.
Utvikler med 15 års erfaring med java. Fattet tidlig interessen for FP, men har slitt med å få det til å passe i en java verden. Har 5 års erfaring med bruk av FP i java i ekte prosjekter.

Det er ikke din inngående kjenskap til kompilatoren som avgjør ditt bidrag til prosjektet, ei heller antal år med Java-programmering. Om du er en junior eller en senior er et spørsmål om holdninger og handlinger.
Selv om stillingsutlysninger på Finn.no skulle tilsi noe annet, er det svak korrelasjon mellom antall års erfaring og nivået på en utviklers bidrag i et prosjekt. Det er viktig med teknisk kompetanse, men uten de rette holdningene har det liten betydning. Det beste man kan gjøre for å øke verdien av sitt bidrag i et prosjekt er å reflektere over sitt forhold til følgende holdninger: Ubetinget ansvar Faglig integritet Grunnleggende ydmykhet Disse holdningene spiller videre inn på hvordan din kommunikasjon er, om du er etterrettelig, om du forhandler konstruktivt og om du mestrer dine følelser på en god måte.
Coming soon...

Består løsningen din av flere moduler? Vil du under utvikling og testing styre hvilke moduler og databaser du kjører opp på egen maskin og hvilke du lar gå mot eksterne miljøer? I denne lyntalen får du se hvordan et av Knowits prosjekter benyttet Boot2Docker og Docker Compose til å lage et lettvekts og orkestrerbart utviklingsmiljø av Docker-containere.
Med Docker har utviklere fått et kraftig verktøy for å pakke, kjøre og deploye software, og det kan i mange tilfeller erstatte fullskala virtualisering. Fordelene ved prodlike utviklings - og testmiljø og enklere deployment er det som ofte fremheves, men Docker kan også brukes til gi deg et enklere miljø på uviklermaskinen din. For å kjøre Docker på maskiner som ikke kjører Linux finnes det flere løsninger. Docker anbefaler i dag Boot2Docker, som er en lettvekts Linux-distribusjon som kun kjører Docker-containere i din Windows eller OS X maskin. Med Boot2docker kan flere kjørende containere dele filsystemet på maskinen din, og du kan lett kjøre opp et større antall containere som alle kjører separate moduler fra samme kodebase. Med Docker Compose (tidligere Fig) kan du orkestere den resulterende multicontainer-applikasjonen. Du kan definere de ulike Docker-containerne og avhengighetene mellom dem, og kjøre opp hele miljøet med én kommando. I denne lyntalen får du se hvordan Knowit benyttet denne teknologien i et prosjekt der utviklerne fant det tungvint å både dele utviklingsserver og kjøre opp løsningens ulike moduler lokalt. Med Boot2Docker og Docker Compose fikk de et lettvekts, fleksibelt og orkestrerbart utviklingsmiljø av Docker-containere. Du får se hvordan vi gjorde det i vårt prosjekt, og noen tips med på veien om hvordan du kan gjøre det samme.
Anders er en frafallen matematiker som har jobbet med systemutvikling i over 10 år, nå som seniorkonsulent i Knowit. Han har til nå ikke vært noen typisk devops-utvikler, så hvis han kan få grep på Docker kan helt sikkert du det også!

Å skrive kravspesifikasjoner er vanskelig. Og noen ganger blir resultatet mer komisk enn opplysende.
Vi jobber alle med kravspesifikasjoner på en eller annen måte. Vi blir stilt krav til og vi stiller krav til andre. Noen kravspesifikasjoner er beskrevet i detalj med mye formalitet, andre er uformelle og ufullstendige. I denne lyntalen vil jeg presentere noen eksempler på krav jeg har sett på trykk som er spesielt vanskelig å forholde seg til, og nesten på grensen av det humoristiske. Med konkrete forslag til hva som kunne vært gjort annerledes.
Jobber som rådgiver i Acando hvor jeg bistår store offentlige etater og private bedrifter med å operasjonalisere IT-strategi gjennom virksomhetsarkitektur og systemarkitektur. Har de siste årene jobbet spisset med sikkerhet, hvor jeg har spesifisert sikkerhetsarkitektur og implementert sikkerhetsmekanismer som SAML, TLS og PKI.

Java er en større verktøykasse enn du tror helt uten tillegg
Bruker du java rammeverk som Spring og Hibernate? Vet du hvorfor du gjør det? Har du tatt noen vurdering på om du faktisk trenger å bruke det? I denne lyntalen vil jeg demonstrere at koden blir mer lettfattelig og vel så effektiv hvis man unngår slike rammeverk, og holder seg til ren java. Kode vil bli vist.
Anders jobber til daglig som løsningsarkitekt og utvikler i SopraSteria. Han brenner for å lage enkle løsninger til komplekse problemer.

Maven 3.3.1 har fått bedre støtte for core extensions. I kombinasjon med continuous friendly versions gjør dette det mulig å få til continuous releases på både utvikler- og byggeserversiden på en elegant måte.
Denne lyntalen vil ta for seg hva maven støtter ut av boksen for continuous releases, hva og hvordan man kan legge til de resterende bitene, samt hva som fortsatt mangler i et større perspektiv. Det blir gitt en rask innføring i Core Extensions og mavens continuous friendly versions.
Utdannet fra UiO, master informatikk. Har tre år fartstid som Java-utvikler fra Nets Norway AS og jobber nå på Conax Norway AS. Har holdt undervisning/forelesninger som gruppelærer på UiO (INF1060, INF2270, INF[34]151). På in-house utviklerdager har jeg holdt to foredrag på Nets. Deltaker på JavaZone de siste årene. Jeg liker godt å holde presentasjoner, og håper å få muligheten på JavaZone.

Ofte trenger man å kjøre regelmessige batchjobber, og å overvåke resultatet av dem. Batchjobber kan ha avhengigheter og det kan være komplekst å bygge gode systemer for å håndtere dette. Hvorfor bruker du ikke Jenkins?
Jenkins har mye funksjonalitet som man kan bruke i forbindelse med batchjobber, monitorering, varsling og så videre. Er det så gøy å lage sitt eget batchsystem at du ikke vil bruke Jenkins? Eller har du ikke oppdaget at du kan bruke Jenkins som batch-motor? La oss se hva den kan gjøre for oss.
Keep It Simple Stupid - there are enough people making things complicated

Erfaringer fra FINN.no rundt recommender systems fra Item Similarity i Apache Mahout til User Based Collaborative Filtering i Spark MLlib.
Gjennomgang av hva vi har gjort på rundt det å anbefale annonser i FINN.no. Vi startet med Item Similarity i Apache Mahout i sent 2013. Vi startet med minne-basert modellgenerering og gikk så over til persisterte modeller. Lagret i filer som ble kopiert fra server til server. Sommeren 2014 introduserte vi Spark og MLlib og algoritmen ALS for User-Based Collaborative Filtering. ALS, Alternating Least Squares, er en Matrix Factorization modell som er bedre enn item-based/Item Similarity for implicit ratings. Matrix Factorization modeller krever mye minne og det å kopiere filer fra server til server var ikke noen varig løsing, så vi har gått over over til å lagre modellene for anbefaling i Cassandra, sammen med trafikk-dataene.
Lead developer for recommendations/anbefalinger i FINN.no. Har jobbet i FINN.no i 9 år og jobbet tidligere med en av de internasjonale satsningene til og FINN.no og var i en periode Søkearkitekt. Er aktiv i javaBin og arrangeringen av JavaZone .

Alle prosjekter gjør valg man skulle ønske man kunne gjøre om i etterpåklokskapens klare lys. Vi tar for oss 11 erfaringer fra MAG og EDAG i Skattetetaen, bakgrunnen for valgene og konsekvensene de medførte. Sannsynligvis greit å vite om ditt prosjekt står ovenfor tilsvarende problemstillinger.
Ifølge Oscar Wilde er "the only good thing to do with good advice is pass it on; it is never of any use to oneself". Allikevel vil vi beskrive 11 erfaringer som kan være nyttige for akkurat deg. Prosjektene MAG (Modernisering av grunnlagsdata) og EDAG (Elektronisk dialog med arbeidsgiver) nærmer seg avslutning, og har levert de første stegene i Skatteetatens moderniseringsmålbilde. Med et blikk i bakspeilet ser vi på designvalg som vi sannsynligvis ikke ville gjort om vi hadde hatt kunnskapen vi har i dag. Dette omfatter større og mindre valg som bruk av UUID som primærnøkkel, tilrettelegging av backup og restore, streaming, feilhåndtering, transaksjonstimeout og Jersey-avhengigheter. Rådene kan iallefall videreformidles til andre!
Trond Arve har vært løsningsarkitekt for MAG- og EDAG-prosjektene i Skatteetaten. Han er CTO i Bekk Consulting, og har et brennende engasjement for å forbedre leveranseevnen i vår industri, spesielt i offentlig sektor.

Erfaringsforedrag om arkitektur- og teknologivalg i open source-utvikling av sikkerhetskomponenter.
Systemer for autentisering, single-sign on og tilgangskontroll er tradisjonelt store, komplekse og dyre "enterprise"-systemer. Elsket av powerpoint-arkitekter og lisenspushere, men hatet av utviklere og DevOps-tilhengere. Kan Open Source og microservices være en bedre tilnærming? Tema for foredraget er hvilke valg som er gjort og hvordan disse har påvirket produktet og utviklerne. Microservices-arkitekturen står sentralt, men hovedpoenget er hva som har fungert godt og mindre godt. Kombinasjonen Open Source og sikkerhetskomponenter gjør at erfaringene kanskje vil overraske mange...
Erik brenner for arkitektur og utvikling på Java-plattformen. Han er spesielt interessert i komplekse og kompliserte problemstillinger som f.eks. distribuerte systemer som kommuniserer med hardware-dingser. Erik er aktiv i community-miljøet i Oslo og tror OpenSource og deling av kunnskap er nøkkelen til å bli flink. Han er nestleder i Oslo Software Architecture meetup, medlem i Programkomiteen for JavaZone og er ellers ofte på Teknologihuset for å høre på eller holde foredrag. Han er utdannet sivilingeniør data fra NTNU og har jobbet som konsulent siden 2007. Han jobber nå som sjefskonsulent i Capra Consulting.

Motivasjon er alfa og omega når det kommer til å ha det bra på jobb. Denne lyntalen vil gå gjennom hvorfor motivasjon er så viktig og gi deg noen konkrete tips til hvordan DU kan motivere menneskene rundt deg og bidra til en bedre jobbhverdag.
Tenk alt du kan få til hvis du er motivert på jobb! -Og tenk hvor tung hverdagen blir når motivasjonen uteblir. Denne lyntalen vil ta for seg noen betraktninger rundt hva som gjør en dårlig sjef, hva som gjør en god leder og hvorfor jeg mener motivasjon er nøkkelen til gode resultater. Etter å ha hørt på denne lyntalen vil du ha noen konkrete tips du kan bruke i din jobbhverdag for å motivere menneskene rundt deg. -Uavhengig av din rolle i organisasjonen.
Christina har 10 års erfaring som utvikler og prosjektleder. Hun er opptatt av å jobbe smart og fokuserer på det som får oss fremover, som team og prosjekt. Hjertet banker ekstra for smidige metoder og hun er stadig på jakt etter metoder som kan gjøre henne til en bedre smidig leder.

React.js har tatt framsida med storm. Men React.js kan også kjøre på serveren og rendre HTML som nettleseren kan vise med én gang. Med Java 8 sin Nashorn kan vi kjøre JavaScript på JVM, og det går ikke så verst fort heller. Vi ser på hvordan du får reactappen din opp å kjøre på Nashorn.
Ingen liker å messe med DOM-oppdateringer lenger. Alle er glade for å kunne organisere koden i enkle, gjenbrukbare komponenter. Men all denne javascripten har noen ulemper: koden må lastes ned og kjøres før du ser noe innhold på siden. Det kan gå fort, men er mobilen din treig, eller nettet ustabilt, blir brukeropplevelsen dårlig. I verste fall sitter du der, da, med en tom side og en vag følelse av at noe ikke helt stemmer. Søkemotorer har såvidt begynt å kjøre JavaScript, men det er trygt å anta at HTML fortsatt gir det beste resultatet når du kjemper om en god plassering i søkeresultatet. Vi ser på hvordan du kan med enkle grep kan kjøre reactkomponentene dine på JVM og viser teknikker for å parallellisere dette. Vi kikker på resultater fra hastighetsmålinger på FINN.no, og hvordan du optimaliserer JS-kjøringen på JVM.
Martin Solli er 37 år og jobber hos FINN.no, der han er framsideutvikler på FINN oppdrag. Han har jobbet med utvikling siden 1998, og har arbeidet seg oppover i stacken fra Linux-drift, via programmering i Perl, Python og PHP, deretter Ruby og Java, til JavaScript nå.

URLens rolle i APIet ditt endrer seg etterhvert som du går fra REST level 1 til 3. Noen av disse endringene er ikke selvsagte.
En vanlig attraksjon med RESTfulle APIer er hackable URLer. Når vi går fra tunge RMI-over-HTTP tjenester til REST er det fristende å lage pene URLer som beskriver med den største selvfølge hva den peker på, og som utviklere kan hacke på for å utforske APIet ditt. Første level REST gjør slike URLer nærmest til et krav, og kombinert med verbene i andre level har man et API man kan være stolt av. Men når du treffer level 3, er URLene forsatt dine venner? Jeg mener du må glemme dine hackable URLer om du vil gå hele veien til level 3.
Håkon er en utvikler som jobber for Miles Oslo A/S. Han har bred erfaring med å utvikle kommuniserende systemer, fra stormaskiner til mobiltelefoner og en hel del imellom. Han er interessert i selvbeskrivende, selvorganiserende, og selvrapporterende systemer og mener at alle systemer bør ha selvinnsikt nok til å kunne hjelpe sine klienter til å bruke seg rett og å kunne si ifra når noe er galt.

I denne lyntalen vil du se hvordan du svært enkelt kan få din mobilapplikasjon til å konsumere et HTTP API ved hjelp av noen få linjer kode. Enklere blir det ikke!
Mobilapper og REST API-er går gjerne hånd i hånd om man ønsker å lage en mobil app som skal snakke med omverdenen. Å forholde seg til nettverkskall, trådstyring, JSON-parsing og feilhåndtering kan være en hodepine, men heldigvis finnes det en løsning. Retrofit gjør dette til en lek og du skal få se hvordan. I løpet av lyntalen vil vi gå gjennom et enkelt oppsett for å konsumere et HTTP API, se nærmere på grunnleggende funksjonalitet som ned- og opplasting av data, og avslutte med å gå inn på noen av de mer avanserte tingene man kan gjøre med Retrofit. Retrofit er et av flere rammeverk fra Square, en startup innen betalingsløsninger til mobilen. Square har ansatt open source Android-guru Jake Wharton, som står for vedlikehold og videreutvikling av bl.a. Retrofit. Selv om Retrofit ble laget med utgangspunkt i Android og mobilverdenen, fungerer det vel så bra i en hvilken som helst Java-applikasjon.
Mobilutvikler hos Knowit som liker å lage gode brukeropplevelser og appplikasjoner som folk kan bruke i det daglige. Kan også litt av hvert om web-, integrasjonsutvikling og sikkerhet.

Hva skjer når en ny brukergruppe med nye behov skal begynne å bruke eksisterende løsning? Er det alltid bare gøy for eksisterende brukere å få snudd verden sin på hodet ved at gamle, kjente og kjære skjermbilder blir helt nye?
I forbindelse med ny jordskiftelov av 2016, skal Jordskifterettene begynne å bruke det eksisterende saksbehandlingssystemet til Ting- og Lagmannsretten. Vi hoppet på dypt vann og tok tak i den viktigste kjernekomponenten i hele systemet og forandret den totalt. I denne lyntalen ser vi på våre erfaringer med å introdusere nye og radikalt annerledes løsninger til en eksisterende brukergruppe, og hvordan vi gikk frem for at veldig ulike behov skulle løses i felles funksjonalitet.
Anne Landro har jobbet med systemutvikling i mange år. Den siste tiden har hun hatt mest fokus på det funksjonelle aspektet av å lage gode systemer. Hun liker godt å prøve forskjellige roller, og trives best når hun kan få en god forståelse av helheten og behovene bak et system.

Det kan være utfordrende å finne en god inndeling i moduler og applikasjoner når man skal utvikle løsninger for et større funksjonelt område. Ved å basere systemet på plugins kan man oppnå god granularisering samtidig som inndeling i en eller mange applikasjoner/micro-services kan utsettes til et senere tidspunkt.
Plugin-baserte systemer er vanlig i mye av den mest brukte programvaren for systemutvikling. Applikasjoner som Jenkins, Jira, IntelliJ og Emacs er alle glimrende eksempel på dette - hvor plugins brukes for å utvide eller tilpasse systemet til hver enkelt bruker eller gruppes behov. Plugin-tankegangen er også nyttig i de applikasjonene vi selv utvikler. Med plugins blir det enkelt å skru funksjonalitet av/på (feature-toggling), gjøre utrulling av deler/bugfix uten å ta ned systemet, og få en generelt god inndeling av applikasjonen. De siste årene har jeg fått starte utviklingen av en rekke nye applikasjoner som skal passe inn i en verden av micro-services. Applikasjoner som ideelt sett skal være enkle, testbare og skalerbare. På et par forskjellige applikasjoner har vi nå tatt i bruk en plugin-basert arkitektur som lar oss styre inndelingen på en langt mer fleksibel måte uten at det kompliserer ting. I denne presentasjonen går jeg gjennom hvilke erfaringer vi har med denne typen arkitektur - Hva oppnår vi? Hvordan gjør vi det rent praktisk? Hvilke andre alternativer har man?
Eivind liker å programmere datamaskiner. Han har over 15 års erfaring med utvikling av Java-baserte applikasjoner. Eivind jobber i Kodemaker.

Det offentlige og flere store bedrifter bruker milliarder av kroner på konsulenter hvert år. Få hodet opp av sanda, se virkligheten i hvitøyet og innse at å ha konsulenter rekende rundt i årevis ikke skaffer deg annet en dyre og dårlige løsninger!
Etter å ha sett denne lyntalen vil publikum forstå at korrekt bruk av konsulenter er at man leier dem inn for å løse spesifikke oppgaver som organisasjonen ikke selv har kompetanse til eller for å hjelpe til med uforutsette topper. Man skal ikke bruke konsulenter fordi man har ansettelsesstopp eller er redd for at man ikke kan kvitte seg med folk når man ikke lenger har bruk for dem.
Erik jobber som konsulent hos Iterate AS. Han jobber stort sett med backend, men havner stort sett der koden er dårlig nok. Gitt nok tid blander han seg gjerne inn i både test, drift og prosjektledelse.

Gutta i elfenbenstårnet. Powerpoint-arkitekter. Papirtigere. Slik oppfatter utviklere ofte arkitekter. Men hva tenker egentlig arkitekter om utviklere? Hvorfor ser arkitekter alltid ting annerledes? Og hvorfor gjør arkitekter som de gjør?
I det venstre hjørnet: utvikleren. Agile metoder, SCRUM, utvikling basert på brukerhistorier, lettvektige rammeverk, mest mulig egenutvikling med de nyeste teknologiene, microservices, osv. I det høyre hjørnet: arkitekten. Virksomhetsarkitektur, målbilde, BPM Suite, SOA plattform, mest mulig bruk av kommersielle løsninger, gjenbruk eller tjenesteorientering. Ut fra arkitektenes ståsted tas et kritisk blikk på bruk av agile metoder ved større infrastruktur- og plattformprosjekter. Utviklerens ønske og argumenter for mest mulig egenutvikling og bruk av de alltid hotteste teknologiene diskuteres opp med forretnings behov. Erfaringer, do’s and don’ts fra ulike kundercaser og prosjekter forestilles og et sett med anti-patterns presenteres.
CEO & Co-founder @ Greenbird Integration Technology. Mer enn 20 års erfaring fra bransjen som enterprise arkitekt, integrasjonsarkitekt og javautvikler.

Hvorfor bruke lang tid på å lage ikoner til din Android-app når man enkelt kan bruke plassbesparende font-ikoner fra web-verdenen. Vektorgrafikk er også på vei inn i Android med noen nyheter i Android 5.
Det kan ofte være tidkrevende å lage grafikk til applikasjoner. Under utvikling av selv en enkel app kan det være greit å spe på med ikoner i forskjellige størrelser enten som tillegg til tekst eller som erstatning til tekst på knapper. På web har man en stund brukt konseptet font-ikoner som erstatter GIF og PNG for enkle monokrome ikoner. Dette kan man enkelt også bruke direkte i en Android-app eller Swing-GUI. Jeg viser eksempler på hvordan font-ikoner kan implementeres i en Android-app på en enkel måte. Med Android 5 (Lollipop) så kommer også mulighet for å lage vektor-bilder og animasjoner av disse ved å bruke VectorDrawable og AnimatedVectorDrawable, hvor man representerer grafikken med XML-filer. Disse har stort potensiale for fremtiden, men har sine begrensninger. Jeg vil vise eksempler på bruk og hvordan man kan bruke vektorgrafikk og hvor dette ikke er anbefalt. Det finnes også alternativer for de som ønsker å bruke vektorgrafikk i tidligere versjoner av Android.
Med over 15 års erfaring innen web- og applikasjonsutvikling har Mikkel Steine jobbet med alle deler av teknologi-stacken. GUI, grafikk, design og brukeropplevelse står hjertet nærmest. Jobber til daglig som seniorkonsulent for Mesan, med Java-prosjekter, web-utvikling og mobil.

Brukertesting er et effektivt verktøy for å finne ut om man er på riktig vei med en løsning. Men hva kan vi lære av våre feil? Hva er det i løsningen din som brukeren sjelden forstår? Jeg deler min innsikt fra en drøss gjennomførte brukertester.
For å finne ut hva som kan forbedres i løsningen man utvikler er brukertesting utbredt. Både designere og utviklere har mange ganger vanskeligheter for å sette seg inn i brukerens situasjon og man ser seg gjerne litt blind på sin egen løsning. Etter å ha gjennomført en drøss med brukertester har jeg fått et visst innblikk i hva brukerne sliter med og ønsker å dele dette med dere! Målet med denne lyntalen er å gjøre dere oppmerksom på ulike fallgruver men nødvendigvis ikke tenker over og gi dere litt inspirasjon til å kanskje være med på neste brukertest? :)
Interaksjonsdesigner i Sopra Steria. Har vært de to siste årene utleid til Husbanken i forbindelse med eSøknad bostøtte og startlån, hvor førstnevnte vant Difis kåring av årets digitale tjeneste i 2014 og Dogas Merket for god design i 2015. Brenner for gode brukeropplevelser på tvers av befolkningen og har stor tro på et tett samarbeid mellom utviklere og designere må til for å få til dette.

Kort introduksjon til Scala.js - nå kan du bruke Scala i både frontend og backend, og dele kode mellom de to!
Scala.js kompilerer scala-kode til JavaScript, og lar deg dermed skrive hele web-applikasjonen din i Scala (pluss litt HTML & CSS). Denne lyntalen gir deg en introduksjon til Scala.js og hvordan det funker i praksis. Vi viser et lite eksempel på hvordan et prosjekt kan være satt opp med bl.a. utvikler-roundtrip og deling av kode mellom frontend og backend. Versjon 0.6.0 av Scala.js kom i februar 2015, og var den første som ble annonsert som produksjonsklar. Kode man skriver nå vil fungere igjennom hele 0.6.x og 1.x-seriene. Dette er med andre ord det perfekte tidspunktet å sette seg inn i Scala.js!
Sigmund har jobbet som konsulent i Knowit siden januar 2007, og før det et par år i forskningssektoren. Siden august 2011 til august 2015 var han vært teamleder og hovedarkitekt på Knowits største rene Scala-prosjekt. I tillegg til å være en lidenskapelig Scala-fanboy, setter Sigmund også pris på andre teknologier som gjør systemutvikling enkelt og forutsigbart. Han avskyr dynamisk typing og unødvendig kompliserte løsninger. Ved siden av konsulentrollen jobber Sigmund som pardansinstruktør på kveldstid, og bruker alt for mye tid på spill og øl.

Hva gjør du når du mistenker at webappen din har flere sikkerhetshull enn en gammel versjon av Struts? I denne lyntalen gir jeg en praktisk innføring i websikkerhet basert på erfaringer fra et prosjekt hos Skatteetaten. Litt om headere, litt om verktøy, og litt om hvordan man kan jobbe med sikkerhet uten å få hodepine.
Hva gjør du når du mistenker at webappen din har flere sikkerhetshull enn en gammel versjon av Struts? I denne lyntalen gir jeg en praktisk innføring i websikkerhet basert på erfaringer fra et prosjekt hos Skatteetaten. Jeg kommer til å touche innom følgende tema: - Hvordan tenke sikkerhet - Headerbruk - Informasjonsflyt - Kontekster - Noen verktøy Oppsummert håper jeg å levere en praktiskt tilnærming til sikkerhet som ikke skremmer, men som heller motiverer til å ta noen enkle grep. Man kan utrette mye uten å være ekspert!
Jeg er en fullstack utvikler fra Miles som er veldig glad i god brukeropplevelse, men som også bryr meg om temaer som smidig, testing, håndverk og sikkerhet.

Utvikler du løsninger uten UX-hjelp og mangler øye for design? Synes du løsningen din mangler noe, uten å helt klare å sette fingeren på hva det er?Jeg gir deg førstehjelp med 5 raske tips til en bedre brukeropplevelse.
Hvordan oppnå bedre brukeropplevelsen i løsningen din? Som interaksjonsdesigner jobber jeg tett med utviklere hver dag og har plukket med meg hva som oftest blir glemt eller mangler i løsningene. I denne lyntalen vil jeg vise de vanligste designfeilene og gi en innføring i hvordan man enkelt kan lage ryddigere, mer oversiktlige og brukervennlige løsninger.
Interaksjonsdesigner i Sopra Steria med interesse for front end og alle former for design. Lidenskapelig opptatt av å forstå brukerne mine og redde verden fra dårlige brukeropplever. Jobber for tiden med å designe elektronisk søknad for Startlån hos Husbanken. Utdannet ved NTNU og jobbet som utvikler før designinteressen tok overhånd.

There are two problems that occur in every project: data conversion and character encoding. This talk will give you an understanding for what a character set is and what an encoding is (yes, these are not the same thing). We will debunk two myths and give you the ability to differentiate between encoding and rendering problems
Although everyone knows something about character encoding, it's a topic which most people don't delve deep into because it's not fancy enough. Most of us have a rough idea about it, pick an encoding which sounds good enough and hack luckily away at our code. Then, the code is opened by a different user using a different editor ... Everyone has had problems with characters all of a sudden looking like gobbledy gook and have found some solution to it. Or perhaps not? How many have seen JavaDoc headers an author tag where the "å" in "Håkon" looking like Donald Duck's swearing? Character sets and encoding are fundamental concepts of every software project you'll ever work on and having a better understanding of it will help you investigate, solve and even avoid encoding related problems in all parts and layers of your code. This talk will give you a fresh reminder of some of the things you already know and teach you a few new things so that next time you see a square, you don't look like a question mark.
Passionate Java, BASH, Python, UNIX and GNU/Linux craftsman with a keen interest in web standards - and Emacs. Writes code in Escenic R&D.

For å få samlet inn kvartersmålinger fra 670.000 målepunkter, må vi ha godt samspill mellom et utall systemer både før, under og etter innsamlingen. Det er også ekstreme krav til ytelse og oppetid. Den gamle ESB'en med sin kanoniske datamodell leverte ikke. Løsningen viste seg å involvere Apache Kafka og en triple store.
Først tar vi deg med på hva AMS-prosjektet går ut på, og hvor de store utfordringene ligger. Så viser vi kontrastene mellom "Data Orientert Arkitektur” og “Service Orientert Arkitektur”: Dette er en helt annen måte å tenke på. Vi introduserer konseptene med kodeeksempler og visualiseringer. Vi viser hvordan alt spiller sammen i AMS, og hvilke “tricks” vi måtte bruke for å få ting til å fly fort nok. Vi kommer også inn på hvordan du kan bruke dette arkitekturparadigmet i dine prosjekter.
Simen Sommerfeldt er rådgiver og CTO ved Bouvet Øst. I sitt daglige virke jobber han som rågiver innen virksomhetsarkitektur og strategisk IT for flere store bedrifter og organisasjoner. Simen har tidligere erfaring fra eksportbedrifter innen telekom-bransjen. Han har i de senere år skrevet mye om tingenes internet og holdt mange foredrag om temaet.
Jon Andreas Pretorius er leder for IKT applikasjonstjenester i Hafslund ASA. Han har jobbet i Hafslund i 12 år, hvor han de siste fem årene, etter 6 år på forretningssiden, har jobbet med konsern-IKT. IKT applikasjonstjenester i konsernet forvalter og utvikler det konsernfelles applikasjonslandskapet.

Hos Statens Pensjonskasse tas for tiden de første skrittene fra tradisjonelle leveranseløp med hoved- og delleveranser til en løskoblet modell med kontinuerlige utrullinger av delsystem og applikasjoner. I denne lyntalen får du et innblikk i den første delen av prosessen, samt at vi deler foreløpige utfordringer, strategier og tabber med andre som vil gå samme vei.
Etter Perform-prosjekt, et av Norges største smidigprosjekt, har SPKs systemforvaltning og nyutvikling videreført og foredlet den smidige arbeidsformen. Men utrulling av endringer til produksjon har fortsatt å følge en tradisjonell modell, med formelle leveranseløp og delt versjonering. Vi gjør nå grep for å øke leveransetakten til produksjon og tilrettelegge bedre for parallell utvikling. I skrivende stund nærmer vi oss halvveis, og lyntalen tar for seg de første etappene i ferden mot løpende leveranser og distribuert versjonering.
Geir er seniorkonsulent i Conduct, og vært endringskatalysator i roller som systemutvikler, løsningarkitekt og teamleder i en rekke forskjellige oppdrag både i offentlig og privat sektor. Domenene har spenn fra telekom til detaljhandel og fra sikkerhetsløsninger og pensjonshåndtering.

Vi går gjennom 5 Maven-plugins og ser på hvordan de kan forenkle din hverdag.
Til tross for en del konkurranse fra andre produkter, er Maven fortsatt godt og mye brukt i store og små prosjekter der ute. Vi ser på 5 plugins som kan gjøre din hverdag enklere.
Rustam Mehmandarov har en mastergrad fra Institutt for Informatikk, UiO. Han har over 9 års erfaring som utvikler, teknisk prosjektleder, leveranseansvarlig og arkitekt i både store og små prosjekter. Han har interesse for smidig utvikling, webutvikling, arkitektur og geografiske informasjonssystemer. Rustam er en guru på både Linux og Windows. På fritiden er han veldig glad i å trene, når han ikke sitter og koder i Python eller Java. Rustam snakker også ofte på forskjellige konferanser som JavaZone, NDC, Boosterconf, Trondheim Developer Conference og diverse faglige events på universiteter over hele Norge.

Den generelle kodegeneratoren er like populær som Ebola og Byllepest. Men hva om du må migrere mengder gammel kode? Hva om du skriver en slags analysator og generator helt selv? En engangs, bruk-og-kast-generator for akkurat ett formål? Ditt eget formål? Kan du kalle det scriptet refactoring (kult) eller kodegenerering (ukult)? Uansett, stilt ansikt til ansikt med et reelt copy-paste-helvete så har jeg gitt det et forsøk!
Med noen fine fluent biblioteker sammen med Java8 lamda og annet snacks finner du ut om jeg endelig fikk oppleve kodegenereringens gode side eller om dette fortsatt er selvskading. Motivasjon Unngå fellene Hvordan Få hjelp av ditt IDE Trenger du egentlig produsere kompilerende kode? Kodeeksempler Resultat
Vidar er en teknisk arkitekt og senior programmerer med 17 års erfaring i bransjen, og var før det en ivrig hobbyprogrammerer allerede fra en alder av 10 år. Ren og effektiv kode samt tilsvarende arkitektur har hele tiden vært en pasjon. Trives godt med nesen dypt ned i kode.

Kom for denne lyntalen for en rask oversikt over Swift, Apples nye programmeringsspråk for iOS og OSX.
Etter å ha "tviholdt" på det noe obskure Objective-C i en årrekke, lanserte Apple et nytt multiparadigme språk for OS X og iOS utvikling på deres WWDC-konferanse i 2014. Språket heter Swift. Swift fikk raskt moment og klatret i løpet av få måneder høyt opp på popularitets-indekser. I april 2015 spurte Stack Overflow hvilke språk utviklere hadde brukt det siste året og hvilke av disse de helst ville jobbe med. 76% av de som hadde jobbet med Swift ønsket å jobbe videre med dette språket. I denne lyntalen går Tobias gjennom syntaks og konsepter i Swift:
Tobias har jobbet som konsulent i en årrekke, men jobber nå i Skattetaten fordi de gjør mye morro. Han har han stort sett har jobbet med utvikling av backend java-løsninger, men har også interesse for mobilutvikling og har vært med på å implementere apper du bruker daglig. Tobias har holdt foredrag på konferanser før, så han håper og tror at dette foredraget skal gå greit

Du hører kanskje favorittmusikken din på en av de store radiokanalene til daglig. Hadde det ikke vært kjekt å lage en egen online audio streamingstjeneste hvor du kan streame musikken din? I denne lyntalen skal jeg vise hvor enkelt di kan gjøre dette med kjent open source teknologi som SHOUTcast, MPD, MPC, JPlayer, AngularJS og OpenShift.
Det har blitt for mange musikktjenester på nettet. Favoritt musikken er vanskligere å finne. Er du av den typen som liker å bygge eget bibliotek av mp3 filer og ha det tilgjengelig fra et sted, så har du sikkert tenkt tanken å bygge egen radio kanal hvor du kan streame egen musikk til privat bruk. Denne lyntalen vil demonstrere hvor enkelt det er å oppnå dette målet. Jeg viser hvordan du kan hoste egen audio streamingstjeneste fra hhv din laptop, på en Raspberry Pi eller i skyene ved hjelp av kjent open source teknologi som SHOUTcast, MPD, MPC og OpenShift. Jeg forteller hvordan teknologiene fungerer og hvordan du kan spille av musikken fra din mobil telefon eller fra en nettleser ved å bruke f.eks. JPlayer.
Peyman er seniorkonsulent og arkitekt i Inmeta Consulting. Han har mastergrad utdanning i systemutvikling fra UiO. Hans hoveinteresser er systemutvikling, arkitektur innovasjon og fotball.

Erfaringer og tips om hvordan man går fra en React nettsideapplikasjon til en React Native iOS-app.
React er blitt et mer og mer populært rammeverk i nettsideutvikling. I år har også React kommet i en native utgave for iOS og Android som utfordrer både hybrid-rammeverkene og de opprinnelige native språkene. Dette åpner for en helt ny verden for React-utviklere, men hvordan kan man overføre kompetansen og erfaringen fra React til React Native? Jeg har jobbet med både å utvikle en nettside i React og deretter lage en React Native iOS-app for samme prosjekt. I dette foredraget viser jeg hvordan man går fra React til React Native.
Jeg er utvikler hos Iterate og har masse lidenskap for webutvikling. Har i løpet av kort tid innenfor yrke skaffet meg masse erfaring innenfor webutvikling. Alltid på utkikk etter det ultimate webutvikling rammeverker.

Event Sourcing er et konsept som vi stadig hører mer om i vår bransje. Men hva er Event Sourcing? Hvorfor skal vi drive med Event Sourcing? Og hva kan Event Sourcing hjelpe oss med?
Er du en av de som skriver "update table set column = X where column = Y"? SLUTT MED DET, det er livsfarlig! Alle våre system blir utsatt for hendelser. Lyntalen vil forklare konseptet Event Sourcing, og hvordan håndtering av hendelser kan ha betydelige forretningsmessige konsekvenser. Vi bør derfor vurdere hvilken strategi vi skal bruke når vi lagrer data i våre system.
Tor Åge er en utvikler som er oppfostret, opplært og oppdratt i Skatteetaten. Direkte fra barneskolen(NTNU) har han blitt kastet ut i store prosjekter i etaten. Tor Åge har vært med på innføring av Java i Skatteetaten, og vært involvert i overgangen fra silosystemer til mikroarkitektur hvor hendelser er i sentrum. Tor Åge elsker utvikling, teknisk arkitektur og design og føler at dagen ikke er komplett uten å ha blitt skitten på hendene.

Sitter du med en uggen følelse og bekymring for regresjonsfeil etter systemtest? Føler du at sjekklistene ikke dekker alt som skal til for å sikre kvaliteten? Er du i prosjekt der alt MÅ være riktig før det går i produksjon? Liker du i tillegg å la datamaskinen gjøre det den er laget for; Repetitive oppgaver? Da kan det hende vi har noen praktiske tips, triks og erfaringer du kan dra nytte av!
Gjennom flere prosjekter har vi sett behov for å automatisere testingen av systemene vi lager. Særlig når man splitter store systemer opp i mindre deler har ekle feil en tendens til å dukke opp sent og bli dyre. Vi går gjennom noen av våre erfaringer på området, med mål om å vise hvordan du kan automatisere både integrasjonstesting, generering av testdata og applikasjonsflyt. Temaer vi er innom: - Consumer-based testing - Sammenligningstesting av data før/etter endringer - Automatisert avsjekk av flyt gjennom et større system - Automatisert avsjekk av data systemer tilbyr - Automatisering av repterende oppgaver ifm. manuell testing Vi har dessverre ikke svaret på hvordan du slipper all manuell testing, men vi kan forhåpentligvis hjelpe deg med å kutte ned på tiden det tar. Og, muligens gi deg noen idéer til hvordan du kan skrive kode som tester for deg slik at du sover litt tryggere natten før prod.setting. Alt er basert på praktiske erfaringer fra våre prosjekter, men konseptene er forhåpentligvis så generelle at de bør være mulige å ta med seg ut i ditt eget prosjekt når hodepinen fra AweZone har gitt seg.
Øystein jobber som sjefskonsulent og fagsjef i Mesan. Han misliker repetitive oppgaver og er alltid på jakt etter måter å automatisere arbeidshverdagen på.
Lars Andreas jobber som konsulentsjef i Mesan, men skremmes fortsatt ut i prosjekter. Kvalitet, kodekvalitet og endringsvillig arkitektur er ting han brenner for.

«There are three kinds of lies: lies, damned lies, and statistics.» Og hva annet er en meningsmåling enn en masse statistikk? La oss se på noen meningsmålinger for å se om vi kan si noe om hvem som kommer til å vinne valget på mandag.
Hvor finner jeg en bra oversikt over de siste meningsmålingene i Norge? Hva slags informasjon kan man trekke ut av dem, og hvordan kan man gjøre det? Og hvordan pleier det å gå galt når en journalist skriver om det, og hvor galt kan det bli? Statistikk rundt meningsmålinger er en av de mest ironiske delfagene innen matematikk: de interessante, opplagte konklusjonene fra råtallene pleier å være feil, men så snart de opplagte konklusjonene begynner å bli sanne er de ikke lenger så interessante. Men det er gøy å leke med dette, og man oppdager fort at Small Data kan fort føre til Really Big Numbers. Bonusmateriale: en kvalifisert gjetning for hvem som kommer til å vinne valget i Oslo.
Filip van Laenen is a Chief Architect at the Norwegian software company Computas AS, which supplies IT solutions to the public and the private sector in Norway. He has more than fifteen years of experience in the software industry, from being a developer in both small and large teams to being the lead developer and competency leader for security and software engineering for the whole company. He's also working on a small (open source) hobby project extracting statistical information from opinion poll results.

En av de største endringene som kommer med Java 9 er Project Jigsaw. Project Jigsaw har som mål å modularisere JDK-en ved å introdusere et skalerbart modulsystem som gjør det mulig å definere eksplisitte avhengigheter mellom moduler, samt kunne definere hvilke deler av en modul som er private og offentlige. Målet er å gjøre det enklere å kjøre Java-programmer på små, integrerte enheter, forenkle vedlikehold, forbedre sikkerheten, øke ytelsen, og gjøre det enklere å utvikle og forvalte biblioteker og applikasjoner. Lyntalen går gjennom motivasjonen og historien til Project Jigsaw, status på prosjektet så langt, og ikke minst hvordan det vil påvirke oss Java-utviklere.
Project Jigsaw var egentlig tiltenkt Java 8, men ble utsatt til Java 9 for å unngå å forsinke Java 8 mer enn nødvendig. Nå er Project Jigsaw planlagt å bli en del av Java 9, men hvordan vil det påvirke oss? JDK-en er i dag på mange måter en stor monolitt. I Java 8 ble det innført en rekke kompakte profiler for å gjøre det enklere å kjøre Java-programmer på integrerte enheter, men det er fortsatt et stykke igjen for å få ned størrelsen på disse kompakte profilene. I tillegg er det mye Java-kode som har direkte avhengigheter til interne Java API-er, noe som skaper utfordringer for å utvikle og vedlikeholde Java-plattformen. I stedet for en monolitt er det ønskelig å ha moduler hvor man klart ser hvilke moduler som er avhengig av hverandre, samt metoder for å kunne gjøre det umulig å bruke kode i en modul som aldri var tenkt eksponert. I denne lyntalen vil vi gå gjennom motivasjonen og historien til Project Jigsaw og status på prosjektet så langt. Hvordan skal modulene bygges opp, og hvordan vil de fungere? I tillegg vil vi gå gjennom nye verktøy som tilbys av JDK-en for bygging av applikasjoner og biblioteker med det nye modulsystemet.
Henrik Wingerei jobber som seniorkonsulent i BEKK hvor han har jobbet som Java-utvikler i 3 år. Tidligere har Henrik en mastergrad fra Universitet i Oslo. Som medlem i faggruppen Java og JVM i BEKK har Henrik den siste tiden hatt et spesielt fokus på Java og JVM-plattformen. I tillegg har Henrik en generell interesse for alternativ språk og paradigmer. Henrik har tidligere holdt foredrag på både JavaZone og meetups.

Systemdokumentasjon er en God Ting™ men vekker sjelden stor begeistring hos de som skal skrive den. Denne presentasjonen belyser temaet systemdokumentasjon og hvordan den kan håndteres på en utviklervennlig måte og publiseres på en leservennlig måte med Markdown.
Systemdokumentasjon er egentlig en nødvendighet men vekker sjelden stor begeistring hos de som skal skrive den. Det er ikke bare fordi det er morsommere å skrive kode, men også fordi det kan være utfordrende å vite hva dokumentasjonen skal inneholde, hvor mye som er nok, og hvordan den skal håndteres og publiseres. Det er enklere å fokusere på innholdet når infrastruktur og verktøy er forfattervennlige og resultatet brukervennlig. Denne presentasjonen ser nærmere på systemdokumentasjon og Markdown, som ser ut til å ha etablert seg som det foretrukne formatet. Asciidoctor og dens tool-chain er implementasjonen brukt i foredraget.
Michael begynte å programmere på en Casio FX-602P og har vært fascinert av datateknologi siden. Datateknologilivet begynte for ham for fullt i 1999, med hovedfokus på millenium-feilen. Han programmerer ikke bare for å løse tekniske oppgaver men enkelte ganger bare for estetikkens skyld. Han elsker å lære nye og gamle ting, å anvende teori i praksis, å kjenne teorien kun for teoriens skyld. Han sysselsetter den andre halvdelen av hjernen med musikk og litteratur. Java har vært en del av hans yrkesliv siden 2006. Michael jobber som utvikler, teknisk arkitekt og teknisk prosjektleder i Computas. Han har jobbet på flere store Java prosjekt, og er leder for Java fagnettverket i Computas. Han liker ren, tydelig, lesbar og vedlikeholdbar kode med akurat nok dokumentasjon.

Denne workshopen gir deg en fyldig og hands-on innføring i Facebooks utrolig populære frontendrammeverk, React. Vi viser deg hvorfor dette har blitt et så populært og hvordan vi bruker det for å lage komplekse brukergrensesnitt med svært god ytelse.
Vi starter med en kort presentasjon om hvorfor dette er en ny, spennende og ikke minst effektiv måte å lage webapplikasjoner på. Deretter går vi raskere mulig over i den praktiske delen, hvor deltagerne selv skal kode React. Kodebiten er todelt - vi skal først lære grunnprinsippene gjennom å gjøre noen konkrete og frittstående oppgaver som demonstrere disse. Når grunnforståelsen så er på plass tar vi det et steg videre og leker med Twitter-APIet for å lage en svært interaktiv og leken overvåkningsapp! Etter denne dagen vil du ha god forståelse for hvordan React virker og sannsynligvis ha kjent på kroppen hvor _gøy_ det er å skrive apps på denne måten.
Utvikler i BEKK Consulting som lever og ånder for fete grensesnitt. Erfaren med javascript og leder BEKKs faggruppe for Webteknologier. Brukt React på flere store prosjekter i over et år og har plenty Reactkode i produksjon.
Kim is a senior consultant for BEKK in Norway, where he mostly works on large–scale JavaScript applications. He is the creator of Superhero.js, blogs about JavaScript, and contributes to open source. His current focus is on testing and architecture of large-scale frontend applications. He strongly believes that we should treat JavaScript as a real language when we use it to build large applications.

Et lite innblikk i utvikling av apper for smartklokker. Lyntalen baseres på Samsungs rekke av klokker med operativsystemet Tizen der apper skrives i JavaScript.
Dette er en liten presentasjon av hvordan man kan lage apper for smartklokker, og hvilke utfordringer og muligheter vi står ovenfor i en relativt ny sjanger.
Har 10 års erfaring som systemutvikler, og jobber nå som frontendarkitekt hos Dossier Solutions. Jeg blir fascinert av ny teknologi, liker å være kreativ, og utvikler blant annet apper til smartklokker på fritiden.

Digitalisering og API-revolusjonen gjør at stadig flere snakker om API. Men med så mange som snakker om det er det fort gjort at man egentlig snakker om forskjellige ting. Lyntalen vil raskt presentere hvilke API diskusjoner som det er vanligst å ha, og hva som er sentralt ved de ulike.
Digitalisering og API-revolusjonen gjør at stadig flere snakker om API. Men når stadig flere snakker om en ting øker sannsynligheten for misforståelser. Så når du snakker om API, snakker du om det fra en forretnings-dimensjon, arkitektur-dimensjon eller teknologi-dimensjon? Og hva er egentlig forskjellen på disse?
Vegard jobber på større og mindre prosjekter hvor han lager, utreder og vurderer større arkitekturer eller gir råd til kunder om IT-strategi og teknologi. I tillegg til prosjekthverdagen jobber Vegard som scientist i BEKK hvor han synser mye om arkitektur, it-rådgiving og teknologiutvikling. Arkitektur, kvalitet, forretningsforståelse, helhetlig tenkning og samspill er alle områder som Vegard er spesielt interessert i.

Bli med vår reise fra noen få monolitter med sjeldne og lite regelmessige deploys, over til stadig mindre applikasjoner som deployes flere ganger om dagen. Vi har vært gjennom en reise der vi på godt og vondt har fått lære fordelene og ulempene med å slå sammen ansvaret for drift og utvikling. Vi vil fortelle om hvilke (dels smertefulle!) lekser vi har lært på veien, og hvordan vi fikk organisasjonen rundt oss med på dette – til den grad at finansieringen av DevOps ble gjort av salgsavdelingen heller enn IT.
Hør historien om hvordan vi utviklet oss fra et lite team som kastet applikasjoner over veggen til driftsavdelingen uten den minste forståelse for hva slags miljø den landet i, over til de fagre engene med DevOps og micro services. Dette har på ingen måte vært en smertefri reise, og vi har lyst til å dele både det gode og det onde – og ikke minst de lærdommene vi har gjort oss på veien. Så gøy som vi enn synes det er, har vi ikke tenkt å grave oss ned i teknologien og vise fram alt det kule vi har lagd. Vi vil heller snakke om hvilke feil vi har gjort, hvilke smerter vi har kjent på og hvilke løsninger vi har endt opp med. Målet vårt er at du går ut av presentasjonen inspirert og full av gode ideer om hvordan du kan ta din egen arkitektur enda et steg videre. Og at du kanskje kan unngå å gjøre noen av de feilene vi har gjort.
Tiden flyr litt. Stian er fortsatt en ung krok, med bare 5 år som konsulent fra Bekk Consulting hos Posten. Stian er et råskinn på teknologi innen både DevOps og micro services, og har bred erfaring med å holde workshops om temaet på konferanser landet rundt.
Du verden som tiden flyr! Jøran har allerede rukket å bli en gammel IT-krok. Med 7 år som konsulent fra Bekk Consulting hos Posten har han fått gleden av å se konsekvensen av sine egne valg – og møte seg selv i døra mer enn én gang! Jøran er lidenskapelig opptatt av prinsippene bak både DevOps og micro services, og hva som skal til med å lykkes med det i en organisasjon.

Clojure og Scala er ikke lenger nye språk. Denne presentasjonen tar for seg hvordan det faktisk er å jobbe med dem, sammenlignet med Java (8).
Clojure og Scala er ikke lenger nye språk, og vi er også forbi tiden der man var usikre på om disse språkene ville overleve. Flere teams i Norge velger nå alternative språk til Java, selv når Java 8 har kommet ut. Jeg har vært så heldig å være på flere sånne teams. Jeg har erfaring med både Clojure og Scala i produksjon. I denne presentasjonen vil jeg gi innsikt i mine erfaringer med språkene. Jeg vil jeg fokusere på hvordan disse språkene forskjellige, men kanskje like interessant, er hvordan de er like. I tillegg vil jeg gløtte litt på hvordan Java nærmer seg disse språkene, med de funksjonelle tilleggene som kom med Java 8. Om du tror jeg kommer til å kåre en “vinner” så blir du nok skuffet. Målet mitt er å gi deg nok informasjon til kunne velge de riktige språket for ditt team, Scala, Clojure, eller kanskje til og med Java 8.
Alf Kristian har 11 års erfaring som programmerer. Han prøver alltid å ha det gøy på jobb, og det betyr vanligvis å lage de beste løsningene for prosjektet, med de riktige språkene og verktøyene. Til daglig jobber han som konsulent hos Kodemaker.

Vi hører ofte om nettsider som har blitt kompromittert og har fått stjålet brukerinformasjon. Dette fører til et ønske om at nettsider ikke skal behøve og ta vare på disse hemmelighetene for oss. Det er også økt fokus på at man ikke bør ha samme brukernavn og passord på flere sider. Her kommer SQRL inn som et alternativ.
SQRL som uttales squirrel er et foreslått alternativ til brukernavn og passord og har potensiale til å revolusjonere logg inn og autentisering. Det eliminerer mange problemer som finnes ved tradisjonell innlogging. Vi vil f.eks. ha en unik identitet per nettside vi logger inn på og vi trenger bare huske et passord som en passord manager.
Liv Kolås jobber som konsulent og utvikler i EVRY. Hun jobber som utvikler fordi hun liker å lage ting og kunne se resultatet av det hun gjør på slutten av dagen. I tillegg setter hun pris på en utfordring og det å tenke ut gode løsninger. På fritiden driver Liv med håndarbeid (mye strikking). I tillegg er hun interessert i sikkerhet og prøver og holde seg litt oppdatert på dette området. Som en del av å holde seg oppdatert har hun tatt enkeltemner relatert til dette på UIO (Universitetet i Oslo).

«All logikken må ligge i Java-laget fordi frontend ikke skalerer» «Applikasjoner større enn en «to do»-app trenger et ordentlig web-rammeverk, som JSF». Om du er enig med disse utsagnene, er det på tide å ta et oppgjør med hvordan du bygger klienten din.
Frontend har gått fra å være et nødvendig onde til å bli en egen fagdisiplin. Klientene har blitt tykkere, og logikk som tidligere ble pakket inn i en Action Delegate lever nå fullstendig i frontend-laget. Med begrenset tooling og ingen etablert standard kan frontend-koden vokse seg til et uhåndterlig vesen som til slutt kollapser av sin egen tyngde. I gamledager kunne vi kaste alt og starte på nytt, men det går ikke lenger. I dette foredraget skal vi se på hvordan bygge applikasjoner som kan skaleres og videreutvikles i årene fremover – hvordan unngå en monolittisk struktur, og hvordan laste koden i klienten på best mulig måte.
Kent er konsulent hos BEKK Consulting med 4års erfaring som frontendutvikler. Til daglig jobber han med utvikling og forvaltning av flere javascript-applikasjoner. Kent er lidenskapelig opptatt av JavaScript og arkitektur og web-tooling.

Enhetstesting og fokuset på at små deler skal gjøre sin oppgave riktig har lenge vært viktig for oss som skriver programvare. Men om man glemmer at alle disse mindre enhetene må spille sammen for å gi verdi, kan man fort lage små feil i skjøtene. Denne lyntalen argumenterer for å lage flere tester som går gjennom de ulike lagene i systemet.
Ønsket om små, isolerte tester kan av og til ta litt overhånd. Ved å bytte ut alle avhengigheter med mock-er kan man både skjule feil i koblingene og sideeffekter i andre klasser. Denne talen tar for seg det den kaller for helhetstesting. Ved å teste fra et kall mot en servlet helt ned til en inmemdb og opp igjen, så kan man luke ut flere feil, og føle seg tryggere når man bytter ut deler av systemet. Helhetstesting handler om å lage slike tester hvor de fleste koblinger er reelle, mens man har de konvensjonelle enhetstestene på mindre deler hvor det ikke er sideeffekter.
Andreas kom inn i arbeidslivet for ett år siden som systemutvikler for Sopra Steria. Han har jobbet med java siden. Som ny til en verden med enhetstesting kastet han seg begeistret over mocking. Senere la han merke til den kognitive lasten slike tester medførte, og begynte søken etter bedre alternativer.

De siste to årene har vi jobbet med å bryte opp en massiv monolittisk portal bestående av SpareBank 1 sin privatnettbank, bedriftsnettbank og cms-løsning https://www.sparebank1.no. Monolitten er blitt til en rekke samarbeidende webapplikasjoner som er en enhetlig løsning, men som har mange av egenskapene til en mikroservicearkitektur når det gjelder kohesjon og kobling. Veien fram hit er belagt med både suksesser, fiaskoer og ikke minst mye læring. Kom og bli med når vi deler dette med dere.
SpareBank 1 sin portal begynte å nå smertegrensen når det gjaldt koblinger og gamle rammeverk. Samtidig var portalen en braksuksess. Vi hadde levert en release i måneden i tre år. Både organsiasjon og prosessene våre var fintunet gjennom denne tiden til å kunne levere med fast takt på en måned. Vi fikk smertelig erfare at å rokke på prosesser som i utgangspunktet føles å fungere godt, må gjøres med adskillig mer kløkt og omhu enn det vi klarte ved første forsøk. Foredraget går gjennom de viktigste læringspunktene vi har hatt på veien fra en monolittisk til en distribuert applikasjonsarkitektur, med fokus både på teknologi-, prosess- og organiasjonsendringene vi har gjort.
Arkitekt og utvikler med mange års erfaring fra noen av de største programvareprosjektene i Norge. Brenner for lean og smidige prinsipper, og liker å utfordre både tekniske monolitter og organisatoriske siloer for å kunne levere stadig bedre og raskere.
Arkitekt og utvikler med lang erfaring fra store programvareprosjekter, inkludert det å lage monolitter. Veldig glad i koding, men bidrar gjerne i arbeidet med å få team til å fungere maksimalt med høy motivasjon. Opptatt av å forenkle gjennom å levere mindre endringer hyppigere.

Elsker du å programmere, men blir frustert av å lese andres kode? Hvordan er det å lese din egen kode tre måneder etter du skrev den? Noe mystisk skjer i tidsperioden fra kode blir skrevet og til den blir lest, her skal vi prøve vi å finne ut hva.
Syntaks er for maskiner, ord for mennesker, og kode må tilfredsstille begge. Det er lett å glemme at når ditt eget nøye utformede kodeverk havner i andres hender, har det sluttet å være et problem og blitt til en løsning. En del av din jobb som utvikler er å gjøre det klinkende klart overfor leseren din hvorfor du har valgt én løsning over en annen. Og dette er ikke helt lett når hjernen din motarbeider deg. Denne lyntalen vil ved et kjapt dykk i kognitiv psykologi ta for seg hvorfor det å lese andres kode er så fantastisk vanskelig, og hvorfor du gjør lurt i å finne frem forfatteren du har i magen.
June Henriksen jobber som seniorkonsulent i BEKK, og har programmert profesjonelt siden 2006. Hun leser bøker om kognitiv psykologi på senga, har en spesiell forkjærlighet for åpen kildekode, og har en mastergrad i Informatikk fra Universitetet i Tromsø og Lancaster University. June bor for øyeblikket i Oslo. Følg henne på twitter på @juneih.

Denne presentasjonen oppsummerer teknikker for arkitektur-gjennomgang som er tilgjengelig i industrien, forskjellene mellom dem, og hvordan man kan tilpasse dem til sin prosjektkontekst
De fleste organisasjoner som driver softwareprosjekter har en eller annen type arkitekturgjennomgang / review-aktivitet, men flertallet av dem bruker ad hoc teknikker og har ingen systematisk tilnærming. Som en konsekvens av dette leverer de ikke en nyttig analyse av hva som har blitt, eller skal bli, produsert. En vesentlig årsak til dette er at det er få arkitekter i bransjen som er klar over de teknikker for arkitektur-gjennomgang som finnes, eller som vet hvordan de skal bruke dem i praksis.
Jason is a consultant in Miles AS. He has worked with architecture in commercial projects, industrial research and basic research. He is interested in how we perceive solutions and how to build up a good toolkit to support work with application, solution, and enterprise architecture.

Du er ikke garantert at alle klassene og metodene du kompilerte med er tilgjengelig når du kjører programmet ditt. Jeg viser deg hvorfor du får NoSuchMethodError og NoClassDefFoundError, og hvordan du kan unngå det!
Selv om Java er kompilert, statisk og sterk typet er du ikke garantert at alle klassene og metodene du kompilerte med er tilgjengelig når du kjører programmet ditt. De klassene og metodene du har tilgjengelig i programmet ditt avgjøres av hvilke jar-filer som ligger på class path. Har du oversikt over hvilke avhengigheter du har, både direkte og transitivt? Er du sikker på at alle avhengighetene du har er kompatible? Jeg vil fortelle deg hvorfor NoSuchMethodError og NoClassDefFoundError oppstår, og hvordan du ved hjelp av bytekode-analyse under bygging kan bli sikrere på at de ikke oppstår på produksjonsserveren din!
Marvin er sivilingeniør i datateknikk med fordypning i intelligente systemer, og senior systemutvikler hos Kantega AS. Han har jobbet med forvaltning og utvikling av flere store java-applikasjoner, blant annet Kantegas hjemmesnekrede CMS og applikasjoner som bygger på dette. Han liker å finne ut hvordan programmer virker, og prøver å gjøre livet som utvikler enklere.

Mange mobilapplikasjoner har som hovedmål å tilby søkbart innhold fra server. Samtidig skal de fungere offline også. Og det skal gå raskt! Her smelter Couchbase og ElasticSearch sammen til en himmelsk kombinasjon: Jeg vil gå gjennom hvordan du enkelt og raskt kan oppnå offline lagring, rask og enkel synkronisering av innhold og et kraftig søk ved å kombinere Couchbase Lite, Couchbase Server og ElasticSearch.
Selv i dagens tilkoblede samfunn vil du ikke kunne unngå å fra tid til annen være offline, enten det er på hytten, i utlandet, i kjelleren eller på butikken. Dette må vi som utviklere ta inn over oss. Vi må ikke bare ta hensyn til det, men vi bør utvikle for en offline tilstand! Trenger du virkelig å synkronisere med server for hver sidelasting? Må dataene brukeren legger inn ligge på server umiddelbart? Nei, men det bør være så sømløst som mulig for brukeren å hoppe mellom online og offline tilstand. Ved å bruke Couchbase Lite, kombinert med Couchbase SyncGateway, kan applikasjonen lagre data i den lokale databasen på mobilen, og så synkroniseres dataene til server som en bakgrunnsjobb når mobilen får nettverkstilgang. Tilsvarende kan innhold synkroniseres fra server til mobilen, slik at det er tilgjengelig offline til en hver tid. Dermed har man også eliminert mye ventetid som går med til kommunikasjon med serveren, og appen kjører like raskt enten den er på Wifi, mobilnettet eller er offline. Samtidig ønsker vi å tilby en rikere opplevelse når brukeren er online. Kraftig fritekstsøk er en slik funksjonalitet, og Elasticsearch er en av teknologiene som leder an her. Jeg skal vise hvordan ElasticSearch kan brukes til å indeksere og søke i dokumenter fra Couchbase, og kombineres med Couchbase Lite for å servere innhold med veldig høy hastighet.
Utvikler hos Itera Norge, som jobber med alt fra JavaScript og CSS til ren Java backend. Har bakgrunn fra Datateknologi-studiet ved NTNU. Har mange brennende interesser, som diverse ballsport, dataspill, bøker og selvfølgelig programmering. Bruker for tiden mye av fritiden på en mobilapplikasjon for å søke i og lagre oppskrifter. Denne applikasjonen danner bakgrunnen for denne presentasjonen.

I denne lyntalen vil du se hvordan et spill går fra å være "dum" til å gradvis bli sterkere etter hvert som vi utforsker bedre maskinlæringsteknikker. Kom på lyntalen og lær hvordan!
Denne lyntalen gir deg innsikt i noen enkle teknikker innen Maskinlæring og hvordan du med disse kan få en datamaskin til å spille et hvilket som helst brettspill, slik som 4-på-rad, kinasjakk, Ludo, Monopol. Du vil få en praktisk tilnærming med kodeeksempler fra et Java-basert Open Source spill som er lette å forstå og som du selv kan bygge videre på. I lyntalen skal vi først se på enkle linære algoritmer som bruker vekter for å evaluere tilstander. Deretter ser vi på mer avanserte teknikker som mønstergjenkjenning i observerte data med Nevrale Nettverk. For å gjøre det enklest mulig for deg å ta i bruk maskinlæring, vil foredraget begrense seg til hvordan en datamaskin lærer ved hjelp treningsdata. Etter lyntalen vil du ha et utgangspunkt med kodeeksempler og verktøy for å teste ut maskinlæring i egne prosjekter.
Dervis er en engasjert konsulent med nesten åtte års erfaring fra Java-utvikling. Han jobber for tiden i Inmeta Consulting og har erfaring med alt fra mobile og desktop-applikasjoner til store enterprise systemer. Ved siden av jobben, er han også en aktiv blogger og Open Source utvikler. Tidligere har han blant annet utviklet kunstig intellingens (sjakk) i både Java og Scala. Dervis brenner for community og sitter i styret til javaBin. Han er i tillegg co-host for javaBin Oslo sin Meetup-gruppe som arrangerer foredrag og events for javaBins mange medlemmer.

Istedenfor å bruke år på å utbrodere arkitekturtegninger for å sikre at en ikke gjør et galt valg på noe som blir vanskelig å endre, bør man rett og slett bruke tiden på å bygge.
Når man bygger må man sørge for å og holde seg innenfor prinsippene om å unngå synkrone kall, sørg for robusthet ift feil, automatiser så langt som mulig testing, utrulling, overvåking og sørg for at «deploy» er en «ikke-hendelse».
Jan Henrik er CTO i Knowit Objectnet. Han har 20 års erfaring med teknologi på JVMen. Har de siste årene syslet mye med applikasjonsdrift, mikrotjenester og DevOps sentralt i Oslo kommune. En ivrig lettvekts-fantast som forsøker å jobbe mot smidige arkitekturer og løsninger.

